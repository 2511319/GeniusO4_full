#!/bin/bash
# scripts/check-production-config.sh
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É

set -e

echo "üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò CHARTGENIUS –ö –ü–†–û–î–ê–ö–®–ï–ù–£"
echo "================================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

ERRORS=0
WARNINGS=0

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
error() {
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê: $1${NC}"
    ((ERRORS++))
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: $1${NC}"
    ((WARNINGS++))
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
echo -e "\n${BLUE}üìä –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ô${NC}"
echo "==================="

PROD_VERSION=$(cat production/VERSION 2>/dev/null || echo "–ù–ï –ù–ê–ô–î–ï–ù")
FRONTEND_VERSION=$(grep '"version"' frontend/package.json | cut -d'"' -f4 2>/dev/null || echo "–ù–ï –ù–ê–ô–î–ï–ù")

if [ -f "production/frontend/src/config.js" ]; then
    CONFIG_VERSION=$(grep 'APP_VERSION' production/frontend/src/config.js | cut -d"'" -f2 2>/dev/null || echo "–ù–ï –ù–ê–ô–î–ï–ù")
else
    CONFIG_VERSION="–§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù"
fi

if [ -f "frontend/src/config.js" ]; then
    DEV_CONFIG_VERSION=$(grep 'APP_VERSION' frontend/src/config.js | cut -d"'" -f2 2>/dev/null || echo "–ù–ï –ù–ê–ô–î–ï–ù")
else
    DEV_CONFIG_VERSION="–§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù"
fi

echo "Production VERSION: $PROD_VERSION"
echo "Frontend package.json: $FRONTEND_VERSION"
echo "Production config.js: $CONFIG_VERSION"
echo "Development config.js: $DEV_CONFIG_VERSION"

if [ "$PROD_VERSION" = "$FRONTEND_VERSION" ] && [ "$PROD_VERSION" = "$CONFIG_VERSION" ]; then
    success "–í–µ—Ä—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
else
    error "–í–µ—Ä—Å–∏–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"
fi

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API URL
echo -e "\n${BLUE}üîó –ü–†–û–í–ï–†–ö–ê API URL${NC}"
echo "==================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ localhost –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞—Ö
if grep -r "localhost\|127\.0\.0\.1" production/ 2>/dev/null; then
    error "–ù–∞–π–¥–µ–Ω—ã localhost/127.0.0.1 –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞—Ö"
else
    success "localhost –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞—Ö"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è API URL –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞—Ö
NGINX_API_URL=$(grep -o 'https://[^;]*\.run\.app' production/frontend/nginx.conf 2>/dev/null || echo "–ù–ï –ù–ê–ô–î–ï–ù")
DOCKERFILE_API_URL=$(grep -o 'https://[^"]*\.run\.app' production/frontend/Dockerfile 2>/dev/null || echo "–ù–ï –ù–ê–ô–î–ï–ù")

if [ -f "production/frontend/src/config.js" ]; then
    CONFIG_API_URL=$(grep -o 'https://[^"]*\.run\.app' production/frontend/src/config.js 2>/dev/null || echo "–ù–ï –ù–ê–ô–î–ï–ù")
else
    CONFIG_API_URL="–§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù"
fi

echo "Nginx API URL: $NGINX_API_URL"
echo "Dockerfile API URL: $DOCKERFILE_API_URL"
echo "Config API URL: $CONFIG_API_URL"

if [ "$NGINX_API_URL" = "$DOCKERFILE_API_URL" ] && [ "$NGINX_API_URL" = "$CONFIG_API_URL" ]; then
    success "API URL —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞—Ö"
else
    error "API URL –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –º–µ–∂–¥—É –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞–º–∏"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
echo -e "\n${BLUE}üîê –ü–†–û–í–ï–†–ö–ê –°–ï–ö–†–ï–¢–û–í${NC}"
echo "==================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–¥–µ
if grep -r "sk-" . --exclude-dir=node_modules --exclude-dir=.git 2>/dev/null | grep -v "your-" | grep -v "example" | grep -v ".md"; then
    error "–ù–∞–π–¥–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ"
else
    success "–†–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–¥–µ"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Ç–æ–∫–µ–Ω–∞ –≤ setup-secrets.ps1
if grep -q "7279183061:" production/setup-secrets.ps1 2>/dev/null; then
    error "–ù–∞–π–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π Telegram —Ç–æ–∫–µ–Ω –≤ setup-secrets.ps1"
else
    success "–†–µ–∞–ª—å–Ω—ã–π Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö"
fi

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–ª–∞–¥–∫–∏
echo -e "\n${BLUE}üêõ –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–û–í –û–¢–õ–ê–î–ö–ò${NC}"
echo "============================="

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DEBUG –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f "production/backend/config/production.py" ]; then
    if grep -q "DEBUG = False" production/backend/config/production.py; then
        success "DEBUG –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω backend"
    else
        error "DEBUG –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω backend"
    fi
fi

if [ -f "production/frontend/src/config.js" ]; then
    if grep -q "DEBUG = false" production/frontend/src/config.js; then
        success "DEBUG –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω frontend"
    else
        warning "DEBUG –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω frontend"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ console.log –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
if grep -r "console\.log" production/ 2>/dev/null; then
    warning "–ù–∞–π–¥–µ–Ω—ã console.log –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞—Ö"
else
    success "console.log –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–∞—Ö"
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤
echo -e "\n${BLUE}üê≥ –ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò${NC}"
echo "================================="

DOCKER_FILES=("production/backend/Dockerfile" "production/frontend/Dockerfile" "production/bot/Dockerfile")

for dockerfile in "${DOCKER_FILES[@]}"; do
    if [ -f "$dockerfile" ]; then
        success "–ù–∞–π–¥–µ–Ω $dockerfile"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ multi-stage build
        if grep -q "FROM.*AS" "$dockerfile"; then
            success "  Multi-stage build –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else
            warning "  Multi-stage build –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ $dockerfile"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
        if grep -q "HEALTHCHECK" "$dockerfile"; then
            success "  Health check –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            warning "  Health check –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ $dockerfile"
        fi
    else
        error "–ù–µ –Ω–∞–π–¥–µ–Ω $dockerfile"
    fi
done

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
echo -e "\n${BLUE}üìÅ –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê${NC}"
echo "=============================="

REQUIRED_DIRS=("production" "backend" "frontend" "bot")
REQUIRED_FILES=("production/VERSION" "production/deploy-production.sh" "production/setup-secrets.sh")

for dir in "${REQUIRED_DIRS[@]}"; do
    if [ -d "$dir" ]; then
        success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
done

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        success "–§–∞–π–ª $file —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        error "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
done

# 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo -e "\n${BLUE}üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢${NC}"
echo "=================="

echo "–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: $ERRORS"
echo "–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $WARNINGS"

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "\n${GREEN}üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É${NC}"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏${NC}"
    exit 0
else
    echo -e "\n${RED}‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏${NC}"
    exit 1
fi
