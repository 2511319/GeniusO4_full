#!/usr/bin/env python3
# –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ –ø–æ—Å–ª–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ GCP
# –ê–†–•–ò–í–ù–´–ô –§–ê–ô–õ - –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

print('üí∞ –†–ê–°–ß–ï–¢ –î–û–°–¢–ò–ì–ù–£–¢–û–ô –≠–ö–û–ù–û–ú–ò–ò')
print('=' * 50)

# –ù–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
services = {
    'chartgenius-api-working': {'cpu': 0.25, 'memory_gb': 0.25},
    'chartgenius-bot-working': {'cpu': 0.125, 'memory_gb': 0.125}, 
    'chartgenius-frontend': {'cpu': 0.125, 'memory_gb': 0.125}
}

# –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
deleted_services = {
    'chartgenius-bot-new': {'cpu': 1, 'memory_gb': 0.5}
}

print('üìä –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:')
total_cpu = 0
total_memory_gb = 0

for name, resources in services.items():
    cpu = resources['cpu']
    memory = resources['memory_gb']
    total_cpu += cpu
    total_memory_gb += memory
    print(f'  ‚úÖ {name}: {cpu} CPU, {memory}Gi RAM')

print(f'  üìä –ò–¢–û–ì–û: {total_cpu} CPU, {total_memory_gb}Gi RAM')

print('\n‚ùå –£–î–ê–õ–ï–ù–ù–´–ï –°–ï–†–í–ò–°–´:')
for name, resources in deleted_services.items():
    cpu = resources['cpu']
    memory = resources['memory_gb']
    print(f'  üóëÔ∏è {name}: {cpu} CPU, {memory}Gi RAM')

# –†–∞—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ 10% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
activity_percent = 0.10  # 10% –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω—ã
hours_month = 720
active_hours = hours_month * activity_percent

print(f'\n‚è±Ô∏è –ê–ö–¢–ò–í–ù–û–°–¢–¨ –°–ï–†–í–ò–°–û–í: {activity_percent*100}% –≤—Ä–µ–º–µ–Ω–∏ ({active_hours} —á–∞—Å–æ–≤/–º–µ—Å—è—Ü)')

# –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
effective_cpu_hours = total_cpu * active_hours
effective_memory_gb_hours = total_memory_gb * active_hours

print(f'üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:')
print(f'  CPU: {effective_cpu_hours} vCPU-—á–∞—Å–æ–≤/–º–µ—Å—è—Ü')
print(f'  Memory: {effective_memory_gb_hours} GiB-—á–∞—Å–æ–≤/–º–µ—Å—è—Ü')

# Free Tier –ª–∏–º–∏—Ç—ã
free_cpu_hours = 50  # 180,000 —Å–µ–∫—É–Ω–¥ = 50 —á–∞—Å–æ–≤
free_memory_gb_hours = 100  # 360,000 GiB-—Å–µ–∫—É–Ω–¥ = 100 GiB-—á–∞—Å–æ–≤

print(f'\nüÜì FREE TIER –õ–ò–ú–ò–¢–´:')
print(f'  CPU: {free_cpu_hours} vCPU-—á–∞—Å–æ–≤/–º–µ—Å—è—Ü')
print(f'  Memory: {free_memory_gb_hours} GiB-—á–∞—Å–æ–≤/–º–µ—Å—è—Ü')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è Free Tier
cpu_usage_percent = (effective_cpu_hours / free_cpu_hours) * 100
memory_usage_percent = (effective_memory_gb_hours / free_memory_gb_hours) * 100

print(f'\nüìä –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï FREE TIER:')
print(f'  CPU: {cpu_usage_percent:.1f}% ({"‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö" if cpu_usage_percent <= 100 else "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ"})')
print(f'  Memory: {memory_usage_percent:.1f}% ({"‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö" if memory_usage_percent <= 100 else "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ"})')

# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
if effective_cpu_hours <= free_cpu_hours and effective_memory_gb_hours <= free_memory_gb_hours:
    cloud_run_cost = 0
    print(f'\nüí∞ –°–¢–û–ò–ú–û–°–¢–¨ CLOUD RUN: $0/–º–µ—Å—è—Ü (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Free Tier)')
else:
    billable_cpu_hours = max(0, effective_cpu_hours - free_cpu_hours)
    billable_memory_gb_hours = max(0, effective_memory_gb_hours - free_memory_gb_hours)
    
    cpu_cost = billable_cpu_hours * 0.000024
    memory_cost = billable_memory_gb_hours * 0.0000025
    cloud_run_cost = cpu_cost + memory_cost
    
    print(f'\nüí∞ –°–¢–û–ò–ú–û–°–¢–¨ CLOUD RUN: ${cloud_run_cost:.2f}/–º–µ—Å—è—Ü')

# Container Registry (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏)
registry_cost = 1.0  # ~$1 –∑–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—Ä–∞–∑—ã

# Cloud Build (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
build_cost = 0.5  # ~$0.5 –∑–∞ —Ä–µ–¥–∫–∏–µ –±–∏–ª–¥—ã

total_new_cost = cloud_run_cost + registry_cost + build_cost

print(f'\nüí∞ –û–ë–©–ê–Ø –ù–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨:')
print(f'  Cloud Run: ${cloud_run_cost:.2f}/–º–µ—Å—è—Ü')
print(f'  Container Registry: ${registry_cost:.2f}/–º–µ—Å—è—Ü')
print(f'  Cloud Build: ${build_cost:.2f}/–º–µ—Å—è—Ü')
print(f'  –ò–¢–û–ì–û: ${total_new_cost:.2f}/–º–µ—Å—è—Ü')

# –≠–∫–æ–Ω–æ–º–∏—è
old_cost = 104.25
savings = old_cost - total_new_cost
savings_percent = (savings / old_cost) * 100

print(f'\nüéâ –î–û–°–¢–ò–ì–ù–£–¢–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø:')
print(f'  –ë—ã–ª–æ: ${old_cost}/–º–µ—Å—è—Ü')
print(f'  –°—Ç–∞–ª–æ: ${total_new_cost:.2f}/–º–µ—Å—è—Ü')
print(f'  –≠–∫–æ–Ω–æ–º–∏—è: ${savings:.2f}/–º–µ—Å—è—Ü ({savings_percent:.1f}%)')

if total_new_cost <= 5:
    print(f'\n‚úÖ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: –†–∞—Å—Ö–æ–¥—ã ‚â§ $5/–º–µ—Å—è—Ü!')
else:
    print(f'\n‚ö†Ô∏è –¶–µ–ª—å —á–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –î–ª—è $0/–º–µ—Å—è—Ü –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.')

print(f'\nüìã –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:')
print(f'  ‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å chartgenius-bot-new')
print(f'  ‚úÖ –†–∞–¥–∏–∫–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–µ–Ω—ã —Ä–µ—Å—É—Ä—Å—ã –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤')
print(f'  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω scale-to-zero (min-instances=0)')
print(f'  ‚úÖ –í–∫–ª—é—á–µ–Ω CPU throttling')
print(f'  ‚úÖ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã')
print(f'  ‚úÖ –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏')
print(f'  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã concurrency –∏ timeout')

print(f'\nüéØ –°–¢–ê–¢–£–°: –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!')
