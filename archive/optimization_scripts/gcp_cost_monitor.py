#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GCP Cost Monitor for ChartGenius - –ê–†–•–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–æ–≤ Google Cloud Platform –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ü–ï–†–ï–ú–ï–©–ï–ù –ò–ó –ö–û–†–ù–ï–í–û–ô –î–ò–†–ï–ö–¢–û–†–ò–ò
"""

import subprocess
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any
import sys

class GCPCostMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤ GCP - –ê–†–•–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    def __init__(self):
        self.project_id = "chartgenius-444017"
        self.region = "europe-west1"
        
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∞—Ä—Ö–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ scripts/monitoring/")
        
        # Free Tier –ª–∏–º–∏—Ç—ã (2025)
        self.free_tier_limits = {
            "cloud_run": {
                "cpu_seconds": 180000,      # vCPU-—Å–µ–∫—É–Ω–¥/–º–µ—Å—è—Ü
                "memory_gb_seconds": 360000, # GiB-—Å–µ–∫—É–Ω–¥/–º–µ—Å—è—Ü
                "requests": 2000000,        # –∑–∞–ø—Ä–æ—Å–æ–≤/–º–µ—Å—è—Ü
                "outbound_gb": 1            # GiB/–º–µ—Å—è—Ü
            },
            "container_registry": {
                "storage_gb": 0.5           # GiB –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            },
            "cloud_build": {
                "build_minutes_day": 120    # –º–∏–Ω—É—Ç/–¥–µ–Ω—å
            },
            "firestore": {
                "reads_day": 50000,         # —á—Ç–µ–Ω–∏–π/–¥–µ–Ω—å
                "writes_day": 20000,        # –∑–∞–ø–∏—Å–µ–π/–¥–µ–Ω—å
                "storage_gb": 1             # GiB
            }
        }
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã (USD)
        self.pricing = {
            "cloud_run": {
                "cpu_hour": 0.00002400,     # –∑–∞ vCPU-—á–∞—Å
                "memory_gb_hour": 0.00000250, # –∑–∞ GiB-—á–∞—Å
                "request": 0.0000004        # –∑–∞ –∑–∞–ø—Ä–æ—Å
            },
            "container_registry": {
                "storage_gb_month": 0.026   # –∑–∞ GiB/–º–µ—Å—è—Ü
            },
            "cloud_build": {
                "build_minute": 0.003       # –∑–∞ –º–∏–Ω—É—Ç—É —Å–±–æ—Ä–∫–∏
            }
        }
    
    def run_gcloud_command(self, command: List[str]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ gcloud –∫–æ–º–∞–Ω–¥—ã"""
        try:
            result = subprocess.run(
                command,
                capture_output=True,
                text=True,
                check=True
            )
            
            if result.stdout.strip():
                try:
                    return json.loads(result.stdout)
                except json.JSONDecodeError:
                    return {"output": result.stdout.strip()}
            
            return {"success": True}
            
        except subprocess.CalledProcessError as e:
            return {"error": e.stderr.strip()}
    
    def generate_cost_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º"""
        print("üí∞ –ê–†–•–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø - –ê–ù–ê–õ–ò–ó –†–ê–°–•–û–î–û–í GCP")
        print("=" * 50)
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ scripts/monitoring/")
        
        return {
            "timestamp": datetime.now().isoformat(),
            "status": "archived",
            "message": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ scripts/monitoring/"
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = GCPCostMonitor()
    
    print("‚ö†Ô∏è –ê–†–•–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø –°–ö–†–ò–ü–¢–ê")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é:")
    print("python scripts/monitoring/gcp_cost_monitor.py")
    
    return monitor.generate_cost_report()

if __name__ == "__main__":
    main()
