# backend/routers/webhooks.py
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhooks (Telegram, –ø–ª–∞—Ç–µ–∂–∏)
"""

import json
from typing import Dict, Any

from fastapi import APIRouter, HTTPException, Request, status
from pydantic import BaseModel

from config.config import get_settings, logger

router = APIRouter()
settings = get_settings()


class TelegramUpdate(BaseModel):
    """–ú–æ–¥–µ–ª—å Telegram update"""
    update_id: int
    message: Dict[str, Any] = None
    callback_query: Dict[str, Any] = None
    pre_checkout_query: Dict[str, Any] = None
    successful_payment: Dict[str, Any] = None


@router.post("/telegram")
async def telegram_webhook(update: TelegramUpdate):
    """
    Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram Bot
    """
    try:
        logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω Telegram update: {update.update_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message:
            await _handle_telegram_message(update.message)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
        if update.callback_query:
            await _handle_telegram_callback(update.callback_query)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤
        if update.pre_checkout_query:
            await _handle_pre_checkout(update.pre_checkout_query)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if update.successful_payment:
            await _handle_successful_payment(update.successful_payment)
        
        return {"ok": True}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"
        )


@router.post("/telegram-payment")
async def telegram_payment_webhook(request: Request):
    """
    Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º raw –¥–∞–Ω–Ω—ã–µ
        body = await request.body()
        data = json.loads(body)
        
        logger.info(f"üí≥ –ü–æ–ª—É—á–µ–Ω payment webhook: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        if "successful_payment" in data:
            payment_data = data["successful_payment"]
            await _process_telegram_payment(payment_data)
        
        return {"ok": True}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ payment webhook: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
        )


async def _handle_telegram_message(message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
    try:
        user_id = message.get("from", {}).get("id")
        text = message.get("text", "")
        
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä: /start, /help, /analyze –∏ —Ç.–¥.
        
        if text.startswith("/start"):
            await _handle_start_command(user_id, message)
        elif text.startswith("/help"):
            await _handle_help_command(user_id)
        elif text.startswith("/analyze"):
            await _handle_analyze_command(user_id, text)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def _handle_telegram_callback(callback_query: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries"""
    try:
        user_id = callback_query.get("from", {}).get("id")
        data = callback_query.get("data", "")
        
        logger.info(f"üîò Callback –æ—Ç {user_id}: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
        if data.startswith("subscribe_"):
            plan = data.replace("subscribe_", "")
            await _handle_subscription_callback(user_id, plan)
        elif data == "open_webapp":
            await _handle_webapp_callback(user_id)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")


async def _handle_pre_checkout(pre_checkout_query: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        query_id = pre_checkout_query.get("id")
        user_id = pre_checkout_query.get("from", {}).get("id")
        currency = pre_checkout_query.get("currency")
        total_amount = pre_checkout_query.get("total_amount")
        
        logger.info(f"üí∞ Pre-checkout –æ—Ç {user_id}: {total_amount} {currency}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –æ–¥–æ–±—Ä—è–µ–º
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Bot API:
        # await bot.answer_pre_checkout_query(query_id, ok=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre-checkout: {e}")


async def _handle_successful_payment(payment: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
    try:
        user_id = payment.get("from", {}).get("id")
        currency = payment.get("currency")
        total_amount = payment.get("total_amount")
        invoice_payload = payment.get("invoice_payload")
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç {user_id}: {total_amount} {currency}")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if invoice_payload:
            try:
                payload_data = json.loads(invoice_payload)
                payment_id = payload_data.get("payment_id")
                
                if payment_id:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    from routers.subscription import _activate_subscription
                    await _activate_subscription(payment_id)
                    
            except json.JSONDecodeError:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç invoice_payload")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")


async def _process_telegram_payment(payment_data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ Telegram Stars"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        telegram_payment_id = payment_data.get("telegram_payment_charge_id")
        invoice_payload = payment_data.get("invoice_payload")
        
        if not telegram_payment_id or not invoice_payload:
            logger.error("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from config.database import execute_query
        
        try:
            payload_data = json.loads(invoice_payload)
            payment_id = payload_data.get("payment_id")
            
            if payment_id:
                await execute_query(
                    """UPDATE payments 
                       SET status = 'completed',
                           telegram_payment_id = :telegram_payment_id,
                           completed_at = CURRENT_TIMESTAMP
                       WHERE id = :payment_id""",
                    {
                        "payment_id": payment_id,
                        "telegram_payment_id": telegram_payment_id
                    }
                )
                
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                
        except json.JSONDecodeError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


async def _handle_start_command(user_id: int, message: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
        
        logger.info(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Bot API
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start: {e}")


async def _handle_help_command(user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        logger.info(f"‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /help: {e}")


async def _handle_analyze_command(user_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze"""
    try:
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑: {text}")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        # –ù–∞–ø—Ä–∏–º–µ—Ä: /analyze BTCUSDT 4h
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /analyze: {e}")


async def _handle_subscription_callback(user_id: int, plan: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        logger.info(f"üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–ª–∞–Ω: {plan}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ invoice –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


async def _handle_webapp_callback(user_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp"""
    try:
        logger.info(f"üåê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç WebApp")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ WebApp
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp: {e}")
