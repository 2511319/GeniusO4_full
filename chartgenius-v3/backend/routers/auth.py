# backend/routers/auth.py
"""
–†–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
JWT –∏ Telegram WebApp –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
"""

from typing import Dict, Any
from datetime import datetime

from fastapi import APIRouter, HTTPException, Depends, status
from pydantic import BaseModel

from auth.dependencies import (
    get_current_user, create_access_token, TelegramWebAppAuth,
    get_or_create_user
)
from config.config import get_settings, logger

router = APIRouter()
settings = get_settings()


class TelegramAuthRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    init_data: str


class AuthResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    success: bool
    access_token: str
    token_type: str = "bearer"
    user: Dict[str, Any]


class UserProfileResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    success: bool
    user: Dict[str, Any]


@router.post("/telegram", response_model=AuthResponse)
async def authenticate_telegram(request: TelegramAuthRequest):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
    """
    try:
        logger.info("üîê –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram WebApp")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram
        telegram_auth = TelegramWebAppAuth()
        user_data = telegram_auth.validate_telegram_data(
            request.init_data,
            settings.telegram_bot_token
        )
        
        if not user_data:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram WebApp"
            )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user(user_data)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        access_token = create_access_token(user['telegram_id'])
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}")
        
        return AuthResponse(
            success=True,
            access_token=access_token,
            user=user
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )


@router.get("/profile", response_model=UserProfileResponse)
async def get_user_profile(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_info = _get_subscription_info(current_user)
        
        user_profile = {
            **current_user,
            "subscription_info": subscription_info
        }
        
        return UserProfileResponse(
            success=True,
            user=user_profile
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
        )


@router.post("/refresh")
async def refresh_token(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        new_token = create_access_token(current_user['telegram_id'])
        
        return {
            "success": True,
            "access_token": new_token,
            "token_type": "bearer"
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"
        )


@router.get("/verify")
async def verify_token(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    """
    return {
        "success": True,
        "valid": True,
        "user_id": current_user['id'],
        "telegram_id": current_user['telegram_id']
    }


def _get_subscription_info(user: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from config.config import Constants
    
    subscription_plan = user.get('subscription_plan', 'free')
    plan_info = Constants.SUBSCRIPTION_PLANS.get(
        subscription_plan, 
        Constants.SUBSCRIPTION_PLANS['free']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_expires_at = user.get('subscription_expires_at')
    is_active = True
    
    if subscription_expires_at and subscription_plan != 'free':
        is_active = subscription_expires_at > datetime.now()
        if not is_active:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
            subscription_plan = 'free'
            plan_info = Constants.SUBSCRIPTION_PLANS['free']
    
    # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–Ω–∞–ª–∏–∑–æ–≤
    analyses_today = user.get('analyses_today', 0)
    daily_limit = plan_info['analyses_per_day']
    
    if daily_limit == -1:
        remaining_analyses = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
    else:
        remaining_analyses = max(0, daily_limit - analyses_today)
    
    return {
        "plan_name": plan_info['name'],
        "plan_code": subscription_plan,
        "price_stars": plan_info['price'],
        "daily_limit": daily_limit,
        "analyses_today": analyses_today,
        "remaining_analyses": remaining_analyses,
        "is_active": is_active,
        "expires_at": subscription_expires_at.isoformat() if subscription_expires_at else None
    }
