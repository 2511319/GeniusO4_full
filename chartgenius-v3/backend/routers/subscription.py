# backend/routers/subscription.py
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ Telegram Stars payments
"""

import json
from typing import Dict, Any, List
from datetime import datetime, timedelta

from fastapi import APIRouter, HTTPException, Depends, status
from pydantic import BaseModel

from auth.dependencies import get_current_user
from config.config import get_settings, logger, Constants
from config.database import execute_query, execute_one

router = APIRouter()
settings = get_settings()


class SubscriptionPlan(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    code: str
    name: str
    price_stars: int
    analyses_per_day: int
    description: str


class CreatePaymentRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    plan_code: str
    payment_method: str = "telegram_stars"


class PaymentResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    success: bool
    payment_id: int
    amount_stars: int
    telegram_invoice_link: str


class SubscriptionResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    success: bool
    subscription: Dict[str, Any]


@router.get("/plans")
async def get_subscription_plans() -> Dict[str, List[SubscriptionPlan]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        plans = []
        
        for code, info in Constants.SUBSCRIPTION_PLANS.items():
            if code == 'free':
                continue  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è
            
            description = _get_plan_description(code, info)
            
            plans.append(SubscriptionPlan(
                code=code,
                name=info['name'],
                price_stars=info['price'],
                analyses_per_day=info['analyses_per_day'],
                description=description
            ))
        
        return {
            "success": True,
            "plans": plans
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤"
        )


@router.get("/current")
async def get_current_subscription(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        query = """
            SELECT id, plan_name, status, price_stars, starts_at, 
                   expires_at, auto_renew, created_at
            FROM subscriptions
            WHERE user_id = :user_id AND status = 'active'
            ORDER BY created_at DESC
            FETCH FIRST 1 ROWS ONLY
        """
        
        result = await execute_one(query, {"user_id": current_user['id']})
        
        if result:
            subscription = {
                "id": result[0],
                "plan_name": result[1],
                "status": result[2],
                "price_stars": result[3],
                "starts_at": result[4].isoformat() if result[4] else None,
                "expires_at": result[5].isoformat() if result[5] else None,
                "auto_renew": bool(result[6]),
                "created_at": result[7].isoformat() if result[7] else None
            }
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            subscription = {
                "id": None,
                "plan_name": "free",
                "status": "active",
                "price_stars": 0,
                "starts_at": None,
                "expires_at": None,
                "auto_renew": False,
                "created_at": None
            }
        
        return SubscriptionResponse(
            success=True,
            subscription=subscription
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"
        )


@router.post("/purchase", response_model=PaymentResponse)
async def create_payment(
    request: CreatePaymentRequest,
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
        if request.plan_code not in Constants.SUBSCRIPTION_PLANS:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏"
            )
        
        plan_info = Constants.SUBSCRIPTION_PLANS[request.plan_code]
        
        if request.plan_code == 'free':
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–∫—É–ø–∫–∏"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
        payment_query = """
            INSERT INTO payments (
                user_id, payment_method, amount_stars, status, metadata
            ) VALUES (
                :user_id, :payment_method, :amount_stars, 'pending', :metadata
            ) RETURNING id
        """
        
        metadata = {
            "plan_code": request.plan_code,
            "plan_name": plan_info['name'],
            "user_telegram_id": current_user['telegram_id']
        }
        
        result = await execute_one(payment_query, {
            "user_id": current_user['id'],
            "payment_method": request.payment_method,
            "amount_stars": plan_info['price'],
            "metadata": json.dumps(metadata)
        })
        
        if not result:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
            )
        
        payment_id = result[0]
        
        # –°–æ–∑–¥–∞–µ–º Telegram invoice
        telegram_invoice_link = await _create_telegram_invoice(
            payment_id=payment_id,
            plan_info=plan_info,
            user_telegram_id=current_user['telegram_id']
        )
        
        logger.info(f"üí≥ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user['telegram_id']}")
        
        return PaymentResponse(
            success=True,
            payment_id=payment_id,
            amount_stars=plan_info['price'],
            telegram_invoice_link=telegram_invoice_link
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"
        )


@router.post("/webhook/telegram-payment")
async def telegram_payment_webhook(payment_data: Dict[str, Any]):
    """
    Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars
    """
    try:
        logger.info(f"üí´ –ü–æ–ª—É—á–µ–Ω webhook –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        telegram_payment_id = payment_data.get('telegram_payment_charge_id')
        invoice_payload = payment_data.get('invoice_payload')
        
        if not telegram_payment_id or not invoice_payload:
            logger.error("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞")
            return {"success": False, "error": "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}
        
        # –ü–∞—Ä—Å–∏–º payload
        try:
            payload_data = json.loads(invoice_payload)
            payment_id = payload_data.get('payment_id')
        except:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload")
            return {"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π payload"}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        update_query = """
            UPDATE payments 
            SET status = 'completed',
                telegram_payment_id = :telegram_payment_id,
                completed_at = CURRENT_TIMESTAMP
            WHERE id = :payment_id AND status = 'pending'
        """
        
        rows_updated = await execute_query(update_query, {
            "payment_id": payment_id,
            "telegram_payment_id": telegram_payment_id
        })
        
        if rows_updated == 0:
            logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return {"success": False, "error": "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await _activate_subscription(payment_id)
        
        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        return {"success": True}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return {"success": False, "error": str(e)}


async def _create_telegram_invoice(
    payment_id: int,
    plan_info: Dict[str, Any],
    user_telegram_id: int
) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ Telegram invoice –¥–ª—è Telegram Stars"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Telegram Bot API
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock URL
        
        invoice_payload = json.dumps({
            "payment_id": payment_id,
            "plan_code": plan_info.get('name'),
            "user_id": user_telegram_id
        })
        
        # Mock URL –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤:
        # bot.create_invoice_link(...)
        
        mock_invoice_link = f"https://t.me/invoice/{payment_id}_{plan_info['price']}_stars"
        
        logger.info(f"üìß –°–æ–∑–¥–∞–Ω invoice –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        
        return mock_invoice_link
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è invoice: {e}")
        raise


async def _activate_subscription(payment_id: int):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_query = """
            SELECT user_id, amount_stars, metadata
            FROM payments
            WHERE id = :payment_id AND status = 'completed'
        """
        
        payment_result = await execute_one(payment_query, {"payment_id": payment_id})
        
        if not payment_result:
            raise Exception(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user_id, amount_stars, metadata_json = payment_result
        metadata = json.loads(metadata_json)
        plan_code = metadata.get('plan_code')
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        await execute_query(
            "UPDATE subscriptions SET status = 'expired' WHERE user_id = :user_id AND status = 'active'",
            {"user_id": user_id}
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        starts_at = datetime.now()
        expires_at = starts_at + timedelta(days=30)  # 30 –¥–Ω–µ–π
        
        subscription_query = """
            INSERT INTO subscriptions (
                user_id, plan_name, status, price_stars, 
                starts_at, expires_at, auto_renew
            ) VALUES (
                :user_id, :plan_name, 'active', :price_stars,
                :starts_at, :expires_at, 0
            ) RETURNING id
        """
        
        subscription_result = await execute_one(subscription_query, {
            "user_id": user_id,
            "plan_name": plan_code,
            "price_stars": amount_stars,
            "starts_at": starts_at,
            "expires_at": expires_at
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await execute_query(
            """UPDATE users 
               SET subscription_plan = :plan_code,
                   subscription_expires_at = :expires_at,
                   analyses_today = 0
               WHERE id = :user_id""",
            {
                "user_id": user_id,
                "plan_code": plan_code,
                "expires_at": expires_at
            }
        )
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        if subscription_result:
            subscription_id = subscription_result[0]
            await execute_query(
                "UPDATE payments SET subscription_id = :subscription_id WHERE id = :payment_id",
                {"subscription_id": subscription_id, "payment_id": payment_id}
            )
        
        logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        raise


def _get_plan_description(code: str, info: Dict[str, Any]) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    descriptions = {
        "basic": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. 20 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –¥–µ–Ω—å.",
        "premium": "–î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. 100 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –¥–µ–Ω—å + –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.",
        "unlimited": "–î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤. –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã + —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏."
    }
    
    return descriptions.get(code, f"{info['analyses_per_day']} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –¥–µ–Ω—å")
