# backend/services/cache_service.py
"""
–°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import json
import asyncio
from typing import Any, Optional, Dict
from datetime import datetime, timedelta

try:
    import redis.asyncio as redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False

from config.config import get_settings, logger

settings = get_settings()


class CacheService:
    """–°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Redis –∏ in-memory fallback"""
    
    def __init__(self):
        self.redis_client: Optional[redis.Redis] = None
        self.memory_cache: Dict[str, Dict[str, Any]] = {}
        self.cache_enabled = settings.enable_cache
        self.default_ttl = settings.cache_ttl_seconds
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if REDIS_AVAILABLE and self.cache_enabled:
            asyncio.create_task(self._init_redis())
    
    async def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.redis_client = redis.from_url(
                settings.redis_url,
                password=settings.redis_password,
                decode_responses=True,
                socket_connect_timeout=5,
                socket_timeout=5
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self.redis_client.ping()
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è memory cache: {e}")
            self.redis_client = None
    
    async def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        if not self.cache_enabled:
            return None
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
            if self.redis_client:
                value = await self.redis_client.get(key)
                if value:
                    return json.loads(value)
            
            # Fallback –Ω–∞ memory cache
            if key in self.memory_cache:
                cache_item = self.memory_cache[key]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
                if cache_item['expires_at'] > datetime.now():
                    return cache_item['value']
                else:
                    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–ª–µ–º–µ–Ω—Ç
                    del self.memory_cache[key]
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return None
    
    async def set(self, key: str, value: Any, ttl: Optional[int] = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        if not self.cache_enabled:
            return False
        
        ttl = ttl or self.default_ttl
        
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            serialized_value = json.dumps(value, ensure_ascii=False, default=str)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            if self.redis_client:
                await self.redis_client.setex(key, ttl, serialized_value)
                return True
            
            # Fallback –Ω–∞ memory cache
            expires_at = datetime.now() + timedelta(seconds=ttl)
            self.memory_cache[key] = {
                'value': value,
                'expires_at': expires_at
            }
            
            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            await self._cleanup_memory_cache()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à {key}: {e}")
            return False
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        if not self.cache_enabled:
            return False
        
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
            if self.redis_client:
                await self.redis_client.delete(key)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ memory cache
            if key in self.memory_cache:
                del self.memory_cache[key]
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ {key}: {e}")
            return False
    
    async def clear(self, pattern: Optional[str] = None) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        if not self.cache_enabled:
            return False
        
        try:
            if pattern:
                # –û—á–∏—â–∞–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                if self.redis_client:
                    keys = await self.redis_client.keys(pattern)
                    if keys:
                        await self.redis_client.delete(*keys)
                
                # –û—á–∏—â–∞–µ–º memory cache –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                keys_to_delete = [k for k in self.memory_cache.keys() if pattern in k]
                for key in keys_to_delete:
                    del self.memory_cache[key]
            else:
                # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                if self.redis_client:
                    await self.redis_client.flushdb()
                
                self.memory_cache.clear()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –∫—ç—à–µ"""
        if not self.cache_enabled:
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
            if self.redis_client:
                return bool(await self.redis_client.exists(key))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º memory cache
            if key in self.memory_cache:
                cache_item = self.memory_cache[key]
                if cache_item['expires_at'] > datetime.now():
                    return True
                else:
                    del self.memory_cache[key]
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è {key}: {e}")
            return False
    
    async def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        stats = {
            "enabled": self.cache_enabled,
            "redis_available": self.redis_client is not None,
            "memory_cache_size": len(self.memory_cache),
            "default_ttl": self.default_ttl
        }
        
        if self.redis_client:
            try:
                info = await self.redis_client.info()
                stats.update({
                    "redis_used_memory": info.get("used_memory_human", "N/A"),
                    "redis_connected_clients": info.get("connected_clients", 0),
                    "redis_total_commands": info.get("total_commands_processed", 0)
                })
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis: {e}")
        
        return stats
    
    async def _cleanup_memory_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ memory cache"""
        try:
            current_time = datetime.now()
            expired_keys = [
                key for key, item in self.memory_cache.items()
                if item['expires_at'] <= current_time
            ]
            
            for key in expired_keys:
                del self.memory_cache[key]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä memory cache
            if len(self.memory_cache) > 1000:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                sorted_items = sorted(
                    self.memory_cache.items(),
                    key=lambda x: x[1]['expires_at']
                )
                
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 800 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                for key, _ in sorted_items[:-800]:
                    del self.memory_cache[key]
                
                logger.info("üßπ Memory cache –æ—á–∏—â–µ–Ω –æ—Ç —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ memory cache: {e}")


class AnalysisCacheService(CacheService):
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.analysis_ttl = settings.redis_ttl_ohlcv  # 15 –º–∏–Ω—É—Ç
    
    async def get_analysis(self, symbol: str, interval: str, days: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        cache_key = f"analysis:{symbol}:{interval}:{days}"
        return await self.get(cache_key)
    
    async def set_analysis(
        self,
        symbol: str,
        interval: str,
        days: int,
        analysis_data: Dict[str, Any]
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫—ç—à"""
        cache_key = f"analysis:{symbol}:{interval}:{days}"
        return await self.set(cache_key, analysis_data, self.analysis_ttl)
    
    async def get_ohlcv_data(self, symbol: str, interval: str, limit: int) -> Optional[list]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö OHLCV –¥–∞–Ω–Ω—ã—Ö"""
        cache_key = f"ohlcv:{symbol}:{interval}:{limit}"
        return await self.get(cache_key)
    
    async def set_ohlcv_data(
        self,
        symbol: str,
        interval: str,
        limit: int,
        ohlcv_data: list
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à"""
        cache_key = f"ohlcv:{symbol}:{interval}:{limit}"
        # OHLCV –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä—É–µ–º –Ω–∞ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è
        return await self.set(cache_key, ohlcv_data, 300)  # 5 –º–∏–Ω—É—Ç
    
    async def clear_symbol_cache(self, symbol: str) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        patterns = [
            f"analysis:{symbol}:*",
            f"ohlcv:{symbol}:*"
        ]
        
        for pattern in patterns:
            await self.clear(pattern)
        
        return True


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
cache_service = CacheService()
analysis_cache = AnalysisCacheService()
