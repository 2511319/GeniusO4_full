# backend/services/chatgpt_analyzer.py
"""
AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI o4-mini-2025-04-16 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 24 –æ–±—ä–µ–∫—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
"""

import json
import os
from typing import List, Dict, Any, Optional
from datetime import datetime

import openai
from openai import AsyncOpenAI

from config.config import get_settings, logger

settings = get_settings()


class ChatGPTAnalyzer:
    """AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞ –±–∞–∑–µ OpenAI"""
    
    def __init__(self):
        self.client = AsyncOpenAI(api_key=settings.openai_api_key)
        self.model = settings.openai_model
        self.prompt_template = self._load_prompt_template()
    
    def _load_prompt_template(self) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        try:
            # –ü—É—Ç—å –∫ prompt.txt –∏–∑ GeniusO4_full-stable
            prompt_path = os.path.join(
                os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
                "GeniusO4_full-stable", "backend", "prompt.txt"
            )
            
            if os.path.exists(prompt_path):
                with open(prompt_path, 'r', encoding='utf-8') as f:
                    prompt = f.read()
                logger.info("‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ GeniusO4_full-stable")
                return prompt
            else:
                logger.warning("‚ö†Ô∏è prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
                return self._get_default_prompt()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return self._get_default_prompt()
    
    def _get_default_prompt(self) -> str:
        """–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ fallback"""
        return """
–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 24 –æ–±—ä–µ–∫—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:

1. primary_analysis - –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
2. confidence_in_trading_decisions - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
3. support_resistance_levels - –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
4. trend_lines - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ª–∏–Ω–∏–∏
5. pivot_points - –ü–∏–≤–æ—Ç –ø–æ–∏–Ω—Ç—ã
6. fibonacci_levels - –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
7. volume_analysis - –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
8. momentum_indicators - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –º–æ–º–µ–Ω—Ç—É–º–∞
9. oscillators - –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
10. moving_averages - –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
11. bollinger_bands - –ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
12. ichimoku_cloud - –û–±–ª–∞–∫–æ –ò—à–∏–º–æ–∫—É
13. candlestick_patterns - –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
14. chart_patterns - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
15. elliott_wave - –í–æ–ª–Ω—ã –≠–ª–ª–∏–æ—Ç—Ç–∞
16. market_structure - –†—ã–Ω–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
17. risk_management - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
18. entry_exit_points - –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
19. price_targets - –¶–µ–Ω–æ–≤—ã–µ —Ü–µ–ª–∏
20. stop_loss_levels - –£—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
21. market_sentiment - –†—ã–Ω–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
22. correlation_analysis - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
23. volatility_analysis - –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
24. time_frame_analysis - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫

–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- summary: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- details: –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- signals: —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
- confidence: —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0-100)

OHLCV –¥–∞–Ω–Ω—ã–µ: {ohlcv_data}
–°–∏–º–≤–æ–ª: {symbol}
–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}
"""
    
    async def analyze_ohlcv_data(
        self,
        ohlcv_data: List[Dict[str, Any]],
        symbol: str,
        interval: str
    ) -> Optional[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ OHLCV –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AI
        
        Args:
            ohlcv_data: –°–ø–∏—Å–æ–∫ OHLCV –¥–∞–Ω–Ω—ã—Ö
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            interval: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å 24 –æ–±—ä–µ–∫—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"ü§ñ –ù–∞—á–∞—Ç AI –∞–Ω–∞–ª–∏–∑ {symbol} {interval}")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            formatted_data = self._format_ohlcv_for_prompt(ohlcv_data)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            prompt = self.prompt_template.format(
                ohlcv_data=formatted_data,
                symbol=symbol,
                interval=interval
            )
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                temperature=0.3,
                max_tokens=4000,
                response_format={"type": "json_object"}
            )
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
            content = response.choices[0].message.content
            
            if not content:
                logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                return None
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try:
                analysis_result = json.loads(content)
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI: {e}")
                logger.error(f"–û—Ç–≤–µ—Ç: {content[:500]}...")
                return None
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if not self._validate_analysis_structure(analysis_result):
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI")
                return None
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            analysis_result["_metadata"] = {
                "symbol": symbol,
                "interval": interval,
                "timestamp": datetime.now().isoformat(),
                "ai_model": self.model,
                "data_points": len(ohlcv_data)
            }
            
            logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}", exc_info=True)
            return None
    
    def _format_ohlcv_for_prompt(self, ohlcv_data: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not ohlcv_data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤)
        recent_data = ohlcv_data[-50:]
        
        formatted_lines = []
        for candle in recent_data:
            line = (
                f"Time: {candle.get('datetime', 'N/A')}, "
                f"O: {candle.get('open', 0):.4f}, "
                f"H: {candle.get('high', 0):.4f}, "
                f"L: {candle.get('low', 0):.4f}, "
                f"C: {candle.get('close', 0):.4f}, "
                f"V: {candle.get('volume', 0):.2f}"
            )
            formatted_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        prices = [float(candle.get('close', 0)) for candle in recent_data if candle.get('close')]
        if prices:
            current_price = prices[-1]
            min_price = min(prices)
            max_price = max(prices)
            
            stats = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.4f}
- –ú–∏–Ω–∏–º—É–º: {min_price:.4f}
- –ú–∞–∫—Å–∏–º—É–º: {max_price:.4f}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((current_price - prices[0]) / prices[0] * 100):.2f}%
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π: {len(recent_data)}

OHLCV –¥–∞–Ω–Ω—ã–µ:
"""
            return stats + "\n".join(formatted_lines)
        
        return "\n".join(formatted_lines)
    
    def _validate_analysis_structure(self, analysis: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã AI –∞–Ω–∞–ª–∏–∑–∞"""
        required_keys = [
            "primary_analysis", "confidence_in_trading_decisions", "support_resistance_levels",
            "trend_lines", "pivot_points", "fibonacci_levels", "volume_analysis",
            "momentum_indicators", "oscillators", "moving_averages", "bollinger_bands",
            "ichimoku_cloud", "candlestick_patterns", "chart_patterns", "elliott_wave",
            "market_structure", "risk_management", "entry_exit_points", "price_targets",
            "stop_loss_levels", "market_sentiment", "correlation_analysis", 
            "volatility_analysis", "time_frame_analysis"
        ]
        
        missing_keys = [key for key in required_keys if key not in analysis]
        
        if missing_keys:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ AI –∞–Ω–∞–ª–∏–∑–µ: {missing_keys}")
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
            for key in missing_keys:
                analysis[key] = {
                    "summary": "–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    "details": "–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã AI –º–æ–¥–µ–ª—å—é",
                    "signals": [],
                    "confidence": 0
                }
            logger.info("‚úÖ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω—ã")
        
        return True
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI"""
        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": "Test"}],
                max_tokens=10
            )
            
            return bool(response.choices[0].message.content)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
chatgpt_analyzer = ChatGPTAnalyzer()
