# backend/middleware/rate_limiting.py
"""
Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (Rate Limiting)
"""

import time
from typing import Dict, Any
from collections import defaultdict, deque

from fastapi import Request, Response, HTTPException, status
from starlette.middleware.base import BaseHTTPMiddleware

from config.config import get_settings, logger

settings = get_settings()


class RateLimitMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, app):
        super().__init__(app)
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ IP
        self.requests: Dict[str, deque] = defaultdict(lambda: deque())
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
        self.blocked_ips: Dict[str, float] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
        self.max_requests = settings.rate_limit_requests
        self.window_seconds = settings.rate_limit_window
        self.block_duration = 300  # 5 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    
    async def dispatch(self, request: Request, call_next):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π rate limit"""
        
        # –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        client_ip = self._get_client_ip(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP
        if self._is_blocked(client_ip):
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP –ø—ã—Ç–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {client_ip}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="IP –∞–¥—Ä–µ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if not self._check_rate_limit(client_ip, request):
            # –ë–ª–æ–∫–∏—Ä—É–µ–º IP –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
            self._block_ip(client_ip)
            
            logger.warning(f"‚ö†Ô∏è Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è IP: {client_ip}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {self.max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {self.window_seconds} —Å–µ–∫—É–Ω–¥"
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ rate limit
        remaining_requests = self._get_remaining_requests(client_ip)
        reset_time = self._get_reset_time(client_ip)
        
        response.headers["X-Rate-Limit-Limit"] = str(self.max_requests)
        response.headers["X-Rate-Limit-Remaining"] = str(remaining_requests)
        response.headers["X-Rate-Limit-Reset"] = str(reset_time)
        response.headers["X-Rate-Limit-Window"] = str(self.window_seconds)
        
        return response
    
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
        
        # Fallback –Ω–∞ IP –∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        return request.client.host if request.client else "unknown"
    
    def _check_rate_limit(self, client_ip: str, request: Request) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è IP"""
        current_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è IP
        ip_requests = self.requests[client_ip]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤–Ω–µ –æ–∫–Ω–∞)
        while ip_requests and ip_requests[0] < current_time - self.window_seconds:
            ip_requests.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        if len(ip_requests) >= self.max_requests:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        ip_requests.append(current_time)
        
        return True
    
    def _is_blocked(self, client_ip: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ IP"""
        if client_ip not in self.blocked_ips:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        block_time = self.blocked_ips[client_ip]
        if time.time() - block_time > self.block_duration:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º IP
            del self.blocked_ips[client_ip]
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
            if client_ip in self.requests:
                del self.requests[client_ip]
            return False
        
        return True
    
    def _block_ip(self, client_ip: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–∞"""
        self.blocked_ips[client_ip] = time.time()
        logger.warning(f"üö´ IP {client_ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.block_duration} —Å–µ–∫—É–Ω–¥")
    
    def _get_remaining_requests(self, client_ip: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if client_ip not in self.requests:
            return self.max_requests
        
        current_requests = len(self.requests[client_ip])
        return max(0, self.max_requests - current_requests)
    
    def _get_reset_time(self, client_ip: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        if client_ip not in self.requests or not self.requests[client_ip]:
            return int(time.time() + self.window_seconds)
        
        # –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ = –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ + –æ–∫–Ω–æ
        first_request_time = self.requests[client_ip][0]
        return int(first_request_time + self.window_seconds)


class APIKeyRateLimitMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è rate limiting –ø–æ API –∫–ª—é—á—É"""
    
    def __init__(self, app):
        super().__init__(app)
        self.api_requests: Dict[str, deque] = defaultdict(lambda: deque())
        
        # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –ª–∏–º–∏—Ç—ã –¥–ª—è API –∫–ª—é—á–µ–π
        self.max_requests = 1000
        self.window_seconds = 3600  # 1 —á–∞—Å
    
    async def dispatch(self, request: Request, call_next):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API key rate limit"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = request.headers.get("X-API-Key")
        
        if api_key:
            if not self._check_api_rate_limit(api_key):
                raise HTTPException(
                    status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                    detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API: {self.max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å"
                )
        
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∫–ª—é—á–µ–π
        if api_key:
            remaining = self._get_api_remaining_requests(api_key)
            response.headers["X-API-Rate-Limit-Remaining"] = str(remaining)
        
        return response
    
    def _check_api_rate_limit(self, api_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è API –∫–ª—é—á–∞"""
        current_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è API –∫–ª—é—á–∞
        api_requests = self.api_requests[api_key]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        while api_requests and api_requests[0] < current_time - self.window_seconds:
            api_requests.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(api_requests) >= self.max_requests:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        api_requests.append(current_time)
        return True
    
    def _get_api_remaining_requests(self, api_key: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è API –∫–ª—é—á–∞"""
        if api_key not in self.api_requests:
            return self.max_requests
        
        current_requests = len(self.api_requests[api_key])
        return max(0, self.max_requests - current_requests)
