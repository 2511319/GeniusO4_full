# backend/config/database.py
"""
Конфигурация базы данных Oracle AJD для ChartGenius v3
"""

import asyncio
import oracledb
from typing import Optional, Dict, Any
from contextlib import asynccontextmanager

from config.config import get_settings, logger

# Глобальный пул соединений
_connection_pool: Optional[oracledb.ConnectionPool] = None


async def init_database():
    """Инициализация подключения к Oracle AJD"""
    global _connection_pool
    
    settings = get_settings()
    
    try:
        # Создание пула соединений
        _connection_pool = oracledb.create_pool(
            user=settings.oracle_username,
            password=settings.oracle_password,
            dsn=settings.oracle_dsn,
            min=settings.oracle_pool_min,
            max=settings.oracle_pool_max,
            increment=settings.oracle_pool_increment,
            encoding="UTF-8"
        )
        
        logger.info("✅ Oracle AJD connection pool created successfully")
        
        # Проверка подключения
        async with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM DUAL")
            result = cursor.fetchone()
            if result:
                logger.info("✅ Oracle AJD connection test successful")
            
        # Создание таблиц если не существуют
        await create_tables_if_not_exist()
        
    except Exception as e:
        logger.error(f"❌ Failed to initialize Oracle AJD: {e}")
        raise


async def close_database():
    """Закрытие подключения к базе данных"""
    global _connection_pool
    
    if _connection_pool:
        try:
            _connection_pool.close()
            _connection_pool = None
            logger.info("✅ Oracle AJD connection pool closed")
        except Exception as e:
            logger.error(f"❌ Error closing Oracle AJD pool: {e}")


@asynccontextmanager
async def get_connection():
    """Получение соединения из пула"""
    if not _connection_pool:
        raise RuntimeError("Database pool not initialized")
    
    connection = None
    try:
        connection = _connection_pool.acquire()
        yield connection
    finally:
        if connection:
            _connection_pool.release(connection)


async def create_tables_if_not_exist():
    """Создание таблиц если они не существуют"""
    
    tables_sql = {
        "users": """
            CREATE TABLE IF NOT EXISTS users (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                telegram_id NUMBER UNIQUE NOT NULL,
                username VARCHAR2(255),
                first_name VARCHAR2(255),
                last_name VARCHAR2(255),
                language_code VARCHAR2(10) DEFAULT 'ru',
                subscription_plan VARCHAR2(50) DEFAULT 'free',
                subscription_expires_at TIMESTAMP,
                role VARCHAR2(50) DEFAULT 'user',
                is_active NUMBER(1) DEFAULT 1,
                analyses_today NUMBER DEFAULT 0,
                last_analysis_date DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """,
        
        "analyses": """
            CREATE TABLE IF NOT EXISTS analyses (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id NUMBER NOT NULL,
                symbol VARCHAR2(20) NOT NULL,
                interval_type VARCHAR2(10) NOT NULL,
                days_count NUMBER NOT NULL,
                analysis_data CLOB NOT NULL,
                ohlcv_data CLOB,
                ai_model VARCHAR2(100),
                processing_time_ms NUMBER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT fk_analyses_user FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """,
        
        "subscriptions": """
            CREATE TABLE IF NOT EXISTS subscriptions (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id NUMBER NOT NULL,
                plan_name VARCHAR2(50) NOT NULL,
                status VARCHAR2(20) DEFAULT 'active',
                price_stars NUMBER,
                payment_id VARCHAR2(255),
                starts_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP,
                auto_renew NUMBER(1) DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT fk_subscriptions_user FOREIGN KEY (user_id) REFERENCES users(id)
            )
        """,
        
        "payments": """
            CREATE TABLE IF NOT EXISTS payments (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id NUMBER NOT NULL,
                subscription_id NUMBER,
                payment_method VARCHAR2(50) DEFAULT 'telegram_stars',
                amount_stars NUMBER NOT NULL,
                amount_usd NUMBER,
                telegram_payment_id VARCHAR2(255),
                status VARCHAR2(20) DEFAULT 'pending',
                metadata CLOB,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                CONSTRAINT fk_payments_user FOREIGN KEY (user_id) REFERENCES users(id),
                CONSTRAINT fk_payments_subscription FOREIGN KEY (subscription_id) REFERENCES subscriptions(id)
            )
        """,
        
        "user_settings": """
            CREATE TABLE IF NOT EXISTS user_settings (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id NUMBER NOT NULL,
                setting_key VARCHAR2(100) NOT NULL,
                setting_value CLOB,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT fk_user_settings_user FOREIGN KEY (user_id) REFERENCES users(id),
                CONSTRAINT uk_user_settings UNIQUE (user_id, setting_key)
            )
        """,
        
        "admin_logs": """
            CREATE TABLE IF NOT EXISTS admin_logs (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                admin_user_id NUMBER NOT NULL,
                action VARCHAR2(100) NOT NULL,
                target_user_id NUMBER,
                details CLOB,
                ip_address VARCHAR2(45),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT fk_admin_logs_admin FOREIGN KEY (admin_user_id) REFERENCES users(id)
            )
        """
    }
    
    async with get_connection() as conn:
        cursor = conn.cursor()
        
        for table_name, sql in tables_sql.items():
            try:
                # Проверяем существование таблицы
                cursor.execute("""
                    SELECT COUNT(*) FROM user_tables WHERE table_name = :table_name
                """, {"table_name": table_name.upper()})
                
                exists = cursor.fetchone()[0] > 0
                
                if not exists:
                    # Oracle не поддерживает CREATE TABLE IF NOT EXISTS
                    # Убираем эту часть из SQL
                    clean_sql = sql.replace("CREATE TABLE IF NOT EXISTS", "CREATE TABLE")
                    cursor.execute(clean_sql)
                    logger.info(f"✅ Created table: {table_name}")
                else:
                    logger.info(f"ℹ️ Table already exists: {table_name}")
                    
            except Exception as e:
                logger.error(f"❌ Error creating table {table_name}: {e}")
                # Не прерываем выполнение, продолжаем с другими таблицами
        
        # Создание индексов для оптимизации
        indexes_sql = [
            "CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id)",
            "CREATE INDEX IF NOT EXISTS idx_analyses_user_id ON analyses(user_id)",
            "CREATE INDEX IF NOT EXISTS idx_analyses_created_at ON analyses(created_at)",
            "CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id)",
            "CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id)"
        ]
        
        for index_sql in indexes_sql:
            try:
                # Oracle синтаксис для индексов
                clean_index_sql = index_sql.replace("CREATE INDEX IF NOT EXISTS", "CREATE INDEX")
                cursor.execute(clean_index_sql)
            except Exception as e:
                # Индекс может уже существовать
                if "already exists" not in str(e).lower():
                    logger.warning(f"⚠️ Index creation warning: {e}")
        
        conn.commit()
        logger.info("✅ Database schema initialization completed")


async def execute_query(query: str, params: Optional[Dict[str, Any]] = None) -> Any:
    """Выполнение SQL запроса"""
    async with get_connection() as conn:
        cursor = conn.cursor()
        if params:
            cursor.execute(query, params)
        else:
            cursor.execute(query)
        
        if query.strip().upper().startswith(('INSERT', 'UPDATE', 'DELETE')):
            conn.commit()
            return cursor.rowcount
        else:
            return cursor.fetchall()


async def execute_one(query: str, params: Optional[Dict[str, Any]] = None) -> Any:
    """Выполнение SQL запроса с возвратом одной записи"""
    async with get_connection() as conn:
        cursor = conn.cursor()
        if params:
            cursor.execute(query, params)
        else:
            cursor.execute(query)
        
        return cursor.fetchone()
