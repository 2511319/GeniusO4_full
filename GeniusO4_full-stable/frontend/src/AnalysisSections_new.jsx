import React from 'react';

// –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
const ALL_ANALYSIS_SECTIONS = [
  { key: 'primary_analysis', title: '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑', category: 'basic' },
  { key: 'confidence_in_trading_decisions', title: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏—è—Ö', category: 'basic' },
  { key: 'support_resistance_levels', title: '–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è', category: 'technical' },
  { key: 'trend_lines', title: '–õ–∏–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞', category: 'technical' },
  { key: 'fibonacci_analysis', title: '–ê–Ω–∞–ª–∏–∑ –§–∏–±–æ–Ω–∞—á—á–∏', category: 'technical' },
  { key: 'elliott_wave_analysis', title: '–í–æ–ª–Ω—ã –≠–ª–ª–∏–æ—Ç–∞', category: 'technical' },
  { key: 'unfinished_zones', title: '–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã', category: 'advanced' },
  { key: 'imbalances', title: '–î–∏—Å–±–∞–ª–∞–Ω—Å—ã', category: 'advanced' },
  { key: 'divergence_analysis', title: '–ê–Ω–∞–ª–∏–∑ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π', category: 'advanced' },
  { key: 'structural_edge', title: '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', category: 'advanced' },
  { key: 'candlestick_patterns', title: '–°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', category: 'patterns' },
  { key: 'anomalous_candles', title: '–ê–Ω–æ–º–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–∏', category: 'patterns' },
  { key: 'gap_analysis', title: '–ê–Ω–∞–ª–∏–∑ –≥—ç–ø–æ–≤', category: 'patterns' },
  { key: 'psychological_levels', title: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏', category: 'patterns' },
  { key: 'fair_value_gaps', title: '–ó–æ–Ω—ã —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏', category: 'advanced' },
  { key: 'indicators_analysis', title: '–ê–Ω–∞–ª–∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤', category: 'indicators' },
  { key: 'volume_analysis', title: '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤', category: 'indicators' },
  { key: 'momentum_analysis', title: '–ê–Ω–∞–ª–∏–∑ –º–æ–º–µ–Ω—Ç—É–º–∞', category: 'indicators' },
  { key: 'volatility_analysis', title: '–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏', category: 'indicators' },
  { key: 'correlation_analysis', title: '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑', category: 'advanced' },
  { key: 'market_structure', title: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞', category: 'advanced' },
  { key: 'liquidity_analysis', title: '–ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏', category: 'advanced' },
  { key: 'order_flow_analysis', title: '–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤', category: 'advanced' },
  { key: 'sentiment_analysis', title: '–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π', category: 'advanced' },
  { key: 'recommendations', title: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', category: 'basic' },
  { key: 'price_prediction', title: '–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã', category: 'basic' },
  { key: 'risk_assessment', title: '–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤', category: 'basic' }
];

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const categoryTitles = {
  basic: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
  technical: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑',
  indicators: '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
  patterns: '–ü–∞—Ç—Ç–µ—Ä–Ω—ã',
  advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑'
};

function AnalysisSections({ analysis, activeLayers = [] }) {
  if (!analysis || Object.keys(analysis).length === 0) {
    return (
      <div className="text-center py-8 text-gray-500 dark:text-gray-400">
        <div className="text-4xl mb-2">üìä</div>
        <p>–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
      </div>
    );
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ä–∞–∑–¥–µ–ª
  const shouldShowSection = (key) => {
    const value = analysis[key];
    if (!value) return false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (typeof value === 'string' && value.trim()) return true;
    if (typeof value === 'object' && Object.keys(value).length > 0) return true;
    if (Array.isArray(value) && value.length > 0) return true;
    
    return false;
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const groupedSections = ALL_ANALYSIS_SECTIONS.reduce((acc, section) => {
    if (!acc[section.category]) {
      acc[section.category] = [];
    }
    acc[section.category].push(section);
    return acc;
  }, {});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
  const formatValue = (value, key) => {
    if (!value) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    if (typeof value === 'string') {
      return value;
    }
    
    if (Array.isArray(value)) {
      return value.map((item, index) => (
        <div key={index} className="mb-2 p-2 bg-gray-100 dark:bg-gray-700 rounded">
          {formatObjectValue(item, index)}
        </div>
      ));
    }
    
    if (typeof value === 'object') {
      return formatObjectValue(value, key);
    }
    
    return String(value);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
  const formatObjectValue = (obj, key) => {
    if (!obj || typeof obj !== 'object') return String(obj);

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–ª—è explanation
    if (obj.explanation) {
      return (
        <div>
          <div className="mb-2 italic text-gray-700 dark:text-gray-300 text-sm">
            {obj.explanation}
          </div>
          {Object.entries(obj).filter(([k]) => k !== 'explanation').map(([subKey, subValue]) => (
            <div key={subKey} className="mb-1">
              <span className="font-bold text-blue-600 dark:text-blue-400 text-xs">
                {subKey.replace(/_/g, ' ')}:
              </span>
              <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
                {typeof subValue === 'object' ? JSON.stringify(subValue, null, 2) : String(subValue)}
              </span>
            </div>
          ))}
        </div>
      );
    }

    return Object.entries(obj).map(([subKey, subValue]) => (
      <div key={subKey} className="mb-1">
        <span className="font-bold text-blue-600 dark:text-blue-400 text-xs">
          {subKey.replace(/_/g, ' ')}:
        </span>
        <span className="ml-2 text-sm text-gray-700 dark:text-gray-300">
          {typeof subValue === 'object' ? JSON.stringify(subValue, null, 2) : String(subValue)}
        </span>
      </div>
    ));
  };

  return (
    <div className="w-full">
      {Object.entries(groupedSections).map(([category, sections]) => {
        const visibleSections = sections.filter(section =>
          analysis[section.key] && shouldShowSection(section.key)
        );

        if (visibleSections.length === 0) return null;

        return (
          <div key={category} className="mb-4">
            <h3 className="mb-2 text-blue-600 dark:text-blue-400 font-bold text-sm">
              {categoryTitles[category]}
            </h3>
            <hr className="mb-3 border-gray-200 dark:border-gray-600" />

            {visibleSections.map(({ key, title }) => {
              const value = analysis[key];

              return (
                <div key={key} className="mb-3 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 card-modern-dark shadow-modern-dark">
                  <div className="p-3 border-b border-gray-200 dark:border-gray-700">
                    <div className="flex items-center gap-2">
                      <span className="font-medium text-sm text-gray-900 dark:text-white">
                        {title}
                      </span>
                      {activeLayers.includes(key) && (
                        <span className="text-blue-600 dark:text-blue-400 text-xs animate-pulse-glow">‚óè</span>
                      )}
                    </div>
                  </div>

                  <div className="p-4">
                    <div className="whitespace-pre-wrap text-xs leading-relaxed text-gray-700 dark:text-gray-300">
                      {formatValue(value, key)}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        );
      })}
    </div>
  );
}

export default AnalysisSections;
