# backend/middleware/telegram_webapp.py

import os
import hashlib
import hmac
import json
import time
from urllib.parse import unquote, parse_qsl
from typing import Optional, Dict, Any
from fastapi import HTTPException, Request
from backend.config.config import logger, db
from google.cloud import firestore


class TelegramWebAppAuth:
    """Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram WebApp"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º bot token –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.bot_token = None

        # –°–ø–æ—Å–æ–± 1: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è dev)
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if self.bot_token:
            logger.info("‚úÖ Telegram bot token –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        else:
            # –°–ø–æ—Å–æ–± 2: Google Cloud Secrets (–¥–ª—è production)
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ production —Å—Ä–µ–¥–µ
                import sys
                sys.path.append('/app')  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤ Cloud Run

                from config.production import config
                self.bot_token = config.get_telegram_bot_token()
                logger.info("‚úÖ Telegram bot token –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Google Cloud Secrets")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ Google Cloud Secrets: {e}")

                # –°–ø–æ—Å–æ–± 3: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Secret Manager
                try:
                    from google.cloud import secretmanager
                    client = secretmanager.SecretManagerServiceClient()
                    project_id = os.getenv("GOOGLE_CLOUD_PROJECT", "chartgenius-444017")
                    secret_name = f"projects/{project_id}/secrets/telegram-bot-token/versions/latest"
                    response = client.access_secret_version(request={"name": secret_name})
                    self.bot_token = response.payload.data.decode("UTF-8").strip()
                    logger.info("‚úÖ Telegram bot token –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Secret Manager")
                except Exception as e2:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Secret Manager: {e2}")

        if not self.bot_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
    def validate_webapp_data(self, init_data: str) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp

        –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram:
        https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app

        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. Data-check-string = –≤—Å–µ –ø–æ–ª—è (–∫—Ä–æ–º–µ hash), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É,
           –≤ —Ñ–æ—Ä–º–∞—Ç–µ key=<value> —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º \n
        2. Secret key = HMAC-SHA256(bot_token, "WebAppData")
        3. Calculated hash = HMAC-SHA256(data_check_string, secret_key)
        4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º hash
        """
        try:
            logger.info(f"üîç –ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WebApp –¥–∞–Ω–Ω—ã—Ö (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
            logger.info(f"üìã Bot token —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {bool(self.bot_token)}")
            logger.info(f"üìã Bot token (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): {self.bot_token[:10] if self.bot_token else '–ù–ï–¢'}")
            logger.info(f"üìã Init data –¥–ª–∏–Ω–∞: {len(init_data) if init_data else 0}")

            if not self.bot_token:
                logger.error("‚ùå Bot token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return False

            if not init_data:
                logger.error("‚ùå init_data –ø—É—Å—Ç–æ–π")
                return False

            # –®–∞–≥ 1: –ü–∞—Ä—Å–∏–º query string (–ü–†–û–í–ï–†–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –æ—Ç @TheBlackHacker)
            from urllib.parse import parse_qs
            parsed_data = parse_qs(init_data)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞ (parse_qs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏)
            parsed_data = {key: values[0] for key, values in parsed_data.items()}

            logger.info(f"üìã –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö: –Ω–∞–π–¥–µ–Ω–æ {len(parsed_data)} –ø–æ–ª–µ–π")
            logger.info(f"üìã –ü–æ–ª—è: {list(parsed_data.keys())}")

            if 'hash' not in parsed_data:
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ init_data")
                return False

            # –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º hash
            received_hash = parsed_data.pop('hash')
            logger.info(f"üîë Received hash: {received_hash}")

            # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º data-check-string (–ü–†–û–í–ï–†–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú)
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ \n
            sorted_items = sorted((key, value) for key, value in parsed_data.items())
            data_to_check = [f"{key}={value}" for key, value in sorted_items]
            data_check_string = '\n'.join(data_to_check)

            logger.info(f"üìã Data check string (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {data_check_string[:200]}...")

            # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º secret key (–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú)
            # secret_key = HMAC_SHA256(<bot_token>, "WebAppData")
            secret_key = hmac.new(
                "WebAppData".encode('utf-8'),
                self.bot_token.encode('utf-8'),
                hashlib.sha256
            ).digest()

            # –®–∞–≥ 5: –í—ã—á–∏—Å–ª—è–µ–º hash (–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú)
            # calculated_hash = HMAC_SHA256(data_check_string, secret_key)
            calculated_hash = hmac.new(
                secret_key,
                data_check_string.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()

            # –®–∞–≥ 6: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à–µ–π
            is_valid = hmac.compare_digest(received_hash, calculated_hash)

            logger.info(f"üîë Calculated hash: {calculated_hash}")
            logger.info(f"‚úÖ –•–µ—à–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {is_valid}")

            if not is_valid:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π hash –≤ init_data - –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç Telegram")
                return False

            # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (–∑–∞—â–∏—Ç–∞ –æ—Ç replay –∞—Ç–∞–∫)
            if 'auth_date' in parsed_data:
                auth_date = int(parsed_data['auth_date'])
                current_time = int(time.time())

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                if current_time - auth_date > 86400:
                    logger.warning("‚ö†Ô∏è init_data —É—Å—Ç–∞—Ä–µ–ª (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)")
                    # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º

            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram WebApp –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            return False
    
    def extract_user_from_init_data(self, init_data: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ init_data
        """
        try:
            # –ü–∞—Ä—Å–∏–º init_data
            params = {}
            for param in init_data.split('&'):
                key, value = param.split('=', 1)
                params[key] = unquote(value)
            
            if 'user' in params:
                user_data = json.loads(params['user'])
                return user_data
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ init_data: {e}")
            return None


async def get_current_user_from_webapp(request: Request) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        init_data = request.headers.get("X-Telegram-Init-Data")
        
        if not init_data:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            init_data = request.query_params.get("init_data")
        
        if not init_data:
            return None
        
        auth = TelegramWebAppAuth()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if not auth.validate_webapp_data(init_data):
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = auth.extract_user_from_init_data(init_data)
        if not user_data:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
        telegram_id = str(user_data.get('id'))
        user_doc = await get_or_create_user(telegram_id, user_data)
        
        return user_doc
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ WebApp: {e}")
        return None


async def get_or_create_user(telegram_id: str, user_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
    """
    try:
        if not db:
            logger.error("Firestore client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_ref = db.collection('users').document(telegram_id)
        user_doc = user_ref.get()
        
        if user_doc.exists:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = user_doc.to_dict()
            user_ref.update({
                'username': user_data.get('username', ''),
                'first_name': user_data.get('first_name', ''),
                'last_name': user_data.get('last_name', ''),
                'last_seen': firestore.SERVER_TIMESTAMP
            })
            user_info.update({
                'telegram_id': telegram_id,
                'username': user_data.get('username', ''),
                'first_name': user_data.get('first_name', ''),
                'last_name': user_data.get('last_name', '')
            })
            return user_info
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_id = os.getenv("ADMIN_TELEGRAM_ID", "299820674")
            role = "admin" if telegram_id == admin_id else "user"
            
            new_user = {
                'telegram_id': telegram_id,
                'username': user_data.get('username', ''),
                'first_name': user_data.get('first_name', ''),
                'last_name': user_data.get('last_name', ''),
                'role': role,
                'created_at': firestore.SERVER_TIMESTAMP,
                'last_seen': firestore.SERVER_TIMESTAMP
            }
            
            user_ref.set(new_user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id} —Å —Ä–æ–ª—å—é {role}")
            
            return new_user
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ Firestore: {e}")
        return {}


def check_webapp_signature(token: str, init_data: str) -> bool:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ WebApp –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å photo_url –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–µ—à–∞–º–∏

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—É—é telegram.helpers.check_webapp_signature
    –≤ python-telegram-bot –≤–µ—Ä—Å–∏–∏ 22.1+
    """
    try:
        if not token or not init_data:
            logger.error("Token –∏–ª–∏ init_data –ø—É—Å—Ç—ã–µ")
            return False

        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ü–†–û–í–ï–†–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –æ—Ç @TheBlackHacker)
        from urllib.parse import parse_qs
        parsed_data = parse_qs(init_data)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞
        parsed_data = {key: values[0] for key, values in parsed_data.items()}

        if 'hash' not in parsed_data:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ init_data")
            return False

        received_hash = parsed_data.pop('hash')

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ü–†–û–í–ï–†–ï–ù–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú)
        sorted_items = sorted((key, value) for key, value in parsed_data.items())
        data_to_check = [f"{key}={value}" for key, value in sorted_items]
        data_check_string = '\n'.join(data_to_check)

        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new(
            "WebAppData".encode(),
            token.encode(),
            hashlib.sha256
        ).digest()

        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
        is_valid = hmac.compare_digest(received_hash, calculated_hash)

        if not is_valid:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π hash –≤ init_data")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if 'auth_date' in parsed_data:
            auth_date = int(parsed_data['auth_date'])
            current_time = int(time.time())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
            if current_time - auth_date > 86400:
                logger.warning("init_data —É—Å—Ç–∞—Ä–µ–ª (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)")
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º

        logger.info("–í–∞–ª–∏–¥–∞—Ü–∏—è WebApp –ø–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WebApp –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False
