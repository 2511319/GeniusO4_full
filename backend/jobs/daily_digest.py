# backend/jobs/daily_digest.py

import os
import sys
import asyncio
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from config.config import logger, db
from services.crypto_compare_provider import fetch_ohlcv
from google.cloud import firestore
import httpx


async def get_price_data(symbol: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        df = await fetch_ohlcv(symbol, '1d', 2)
        
        if df.empty or len(df) < 2:
            return None
        
        current_price = df.iloc[-1]['Close']
        prev_price = df.iloc[-2]['Close']
        change_pct = ((current_price - prev_price) / prev_price) * 100
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è MA (20 –∏ 50 –ø–µ—Ä–∏–æ–¥–æ–≤)
        if len(df) >= 50:
            ma20 = df['Close'].rolling(20).mean().iloc[-1]
            ma50 = df['Close'].rolling(50).mean().iloc[-1]
            ma_signal = "üü¢ –ë—ã—á–∏–π" if ma20 > ma50 else "üî¥ –ú–µ–¥–≤–µ–∂–∏–π"
        else:
            ma_signal = "‚ö™ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        
        return {
            'symbol': symbol,
            'price': current_price,
            'change_pct': change_pct,
            'ma_signal': ma_signal
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return None


async def generate_digest_for_user(telegram_id: str, symbols: List[str]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        digest_lines = [
            f"üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç ChartGenius**",
            f"üìÖ {datetime.now().strftime('%d.%m.%Y')}",
            "",
            "üí∞ **–í–∞—à watchlist:**"
        ]
        
        for symbol in symbols[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
            price_data = await get_price_data(symbol)
            
            if price_data:
                change_emoji = "üü¢" if price_data['change_pct'] > 0 else "üî¥"
                change_sign = "+" if price_data['change_pct'] > 0 else ""
                
                digest_lines.append(
                    f"{symbol}: ${price_data['price']:.4f} "
                    f"({change_emoji}{change_sign}{price_data['change_pct']:.2f}%)"
                )
                digest_lines.append(f"   MA: {price_data['ma_signal']}")
            else:
                digest_lines.append(f"{symbol}: ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        digest_lines.extend([
            "",
            "üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!",
            "",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞: /settings"
        ])
        
        return "\n".join(digest_lines)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è {telegram_id}: {e}")
        return None


async def send_digest_to_user(telegram_id: str, digest_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json={
                'chat_id': telegram_id,
                'text': digest_text,
                'parse_mode': 'Markdown'
            })
            
            if response.status_code == 200:
                logger.info(f"–î–∞–π–¥–∂–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {response.text}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        return False


async def daily_digest():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –¥–ª—è vip/premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        if not db:
            logger.error("Firestore client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        now = datetime.utcnow()
        subs_ref = db.collection('subscriptions')
        active_subs = subs_ref.where('expires_at', '>', now).stream()
        
        sent_count = 0
        
        for sub in active_subs:
            sub_data = sub.to_dict()
            telegram_id = sub.id
            level = sub_data.get('level', '')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç —Ç–æ–ª—å–∫–æ vip –∏ premium
            if level not in ['vip', 'premium']:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º watchlist –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            watchlist_ref = db.collection('watchlists').document(telegram_id)
            watchlist_doc = watchlist_ref.get()
            
            if not watchlist_doc.exists:
                continue
            
            watchlist_data = watchlist_doc.to_dict()
            symbols = watchlist_data.get('symbols', [])
            
            if not symbols:
                continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
            digest_text = await generate_digest_for_user(telegram_id, symbols)
            
            if digest_text:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
                success = await send_digest_to_user(telegram_id, digest_text)
                if success:
                    sent_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {sent_count}")
        return sent_count
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤: {e}")
        return 0


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Cloud Scheduler"""
    try:
        result = asyncio.run(daily_digest())
        print(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result} –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ daily_digest: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
