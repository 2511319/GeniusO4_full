#!/usr/bin/env python3
# üîç ChartGenius Bot Comprehensive Diagnostics
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ deployment pipeline

import asyncio
import aiohttp
import json
import os
import subprocess
import sys
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import hashlib

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_ID = "chartgenius-444017"
REGION = "europe-west1"
SERVICE_NAME = "chartgenius-bot"
BOT_TOKEN = "7279183061:AAERodVAje0VnifJmUJWeq0EM4FxMueXrB0"
ADMIN_USER_ID = "299820674"

class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'  # No Color

class BotDiagnostics:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.session = None
        self.results = {}
        self.errors = []
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    def print_header(self, title: str):
        print(f"\n{Colors.BLUE}{'='*60}{Colors.NC}")
        print(f"{Colors.BLUE}{title}{Colors.NC}")
        print(f"{Colors.BLUE}{'='*60}{Colors.NC}\n")
    
    def print_success(self, message: str):
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.NC}")
    
    def print_error(self, message: str):
        print(f"{Colors.RED}‚ùå {message}{Colors.NC}")
        self.errors.append(message)
    
    def print_warning(self, message: str):
        print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.NC}")
    
    def print_info(self, message: str):
        print(f"{Colors.CYAN}‚ÑπÔ∏è  {message}{Colors.NC}")
    
    def run_command(self, command: str, capture_output: bool = True) -> tuple:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ shell –∫–æ–º–∞–Ω–¥—ã"""
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=capture_output, 
                text=True,
                timeout=30
            )
            return result.returncode, result.stdout, result.stderr
        except subprocess.TimeoutExpired:
            return -1, "", "Command timeout"
        except Exception as e:
            return -1, "", str(e)
    
    async def check_local_code_version(self):
        """1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
        self.print_header("1. –ü–†–û–í–ï–†–ö–ê –õ–û–ö–ê–õ–¨–ù–û–ì–û –ö–û–î–ê")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            bot_file = "bot-dev/bot_aiogram.py"
            if not os.path.exists(bot_file):
                self.print_error(f"–§–∞–π–ª {bot_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(bot_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            fixes_check = {
                "send_start_menu function": "async def send_start_menu" in content,
                "AuthMiddleware fallback": "fallback': True" in content,
                "TimeoutError handling": "asyncio.TimeoutError" in content,
                "Error middleware": "error_middleware" in content,
                "Health check": "/health" in content
            }
            
            all_fixes_present = True
            for fix_name, present in fixes_check.items():
                if present:
                    self.print_success(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {fix_name}")
                else:
                    self.print_error(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {fix_name}")
                    all_fixes_present = False
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
            file_hash = hashlib.md5(content.encode()).hexdigest()
            self.print_info(f"–•–µ—à –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file_hash}")
            
            self.results['local_code'] = {
                'all_fixes_present': all_fixes_present,
                'file_hash': file_hash,
                'file_size': len(content)
            }
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: {e}")
    
    async def check_cloud_run_status(self):
        """2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Cloud Run"""
        self.print_header("2. –ü–†–û–í–ï–†–ö–ê CLOUD RUN –°–¢–ê–¢–£–°–ê")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
            cmd = f"gcloud run services describe {SERVICE_NAME} --region={REGION} --format=json"
            returncode, stdout, stderr = self.run_command(cmd)
            
            if returncode != 0:
                self.print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ: {stderr}")
                return
            
            service_info = json.loads(stdout)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = service_info.get('status', {})
            conditions = status.get('conditions', [])
            
            for condition in conditions:
                condition_type = condition.get('type')
                condition_status = condition.get('status')
                
                if condition_type == 'Ready':
                    if condition_status == 'True':
                        self.print_success("–°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    else:
                        self.print_error("–°–µ—Ä–≤–∏—Å –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                        self.print_info(f"–ü—Ä–∏—á–∏–Ω–∞: {condition.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
            url = status.get('url')
            if url:
                self.print_success(f"URL —Å–µ—Ä–≤–∏—Å–∞: {url}")
                self.results['service_url'] = url
            else:
                self.print_error("URL —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–≤–∏–∑–∏—é
            latest_revision = status.get('latestReadyRevisionName')
            if latest_revision:
                self.print_info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–≤–∏–∑–∏—è: {latest_revision}")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–≤–∏–∑–∏–∏
                await self.check_revision_details(latest_revision)
            
            self.results['cloud_run'] = {
                'ready': any(c.get('type') == 'Ready' and c.get('status') == 'True' for c in conditions),
                'url': url,
                'latest_revision': latest_revision
            }
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloud Run: {e}")
    
    async def check_revision_details(self, revision_name: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–≤–∏–∑–∏–∏"""
        try:
            cmd = f"gcloud run revisions describe {revision_name} --region={REGION} --format=json"
            returncode, stdout, stderr = self.run_command(cmd)
            
            if returncode != 0:
                self.print_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–≤–∏–∑–∏–∏: {stderr}")
                return
            
            revision_info = json.loads(stdout)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑
            spec = revision_info.get('spec', {})
            containers = spec.get('template', {}).get('spec', {}).get('containers', [])
            
            if containers:
                image = containers[0].get('image')
                self.print_info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –æ–±—Ä–∞–∑: {image}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                env_vars = containers[0].get('env', [])
                env_dict = {var['name']: var.get('value', 'SECRET') for var in env_vars}
                
                important_vars = ['TELEGRAM_BOT_TOKEN', 'WEBHOOK_URL', 'ENVIRONMENT', 'VERSION']
                for var in important_vars:
                    if var in env_dict:
                        value = env_dict[var] if var != 'TELEGRAM_BOT_TOKEN' else 'HIDDEN'
                        self.print_success(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var}: {value}")
                    else:
                        self.print_warning(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            creation_time = revision_info.get('metadata', {}).get('creationTimestamp')
            if creation_time:
                self.print_info(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–∏–∑–∏–∏: {creation_time}")
                
        except Exception as e:
            self.print_warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–≤–∏–∑–∏–∏: {e}")
    
    async def check_docker_images(self):
        """3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"""
        self.print_header("3. –ü–†–û–í–ï–†–ö–ê DOCKER –û–ë–†–ê–ó–û–í")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑—ã –≤ GCR
            cmd = f"gcloud container images list-tags gcr.io/{PROJECT_ID}/{SERVICE_NAME} --limit=5 --format=json"
            returncode, stdout, stderr = self.run_command(cmd)
            
            if returncode != 0:
                self.print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤: {stderr}")
                return
            
            images = json.loads(stdout)
            
            if not images:
                self.print_error("–û–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Container Registry")
                return
            
            self.print_success(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –æ–±—Ä–∞–∑–æ–≤ –≤ GCR")
            
            for i, image in enumerate(images):
                digest = image.get('digest')
                timestamp = image.get('timestamp', {}).get('datetime')
                tags = image.get('tags', [])
                
                self.print_info(f"–û–±—Ä–∞–∑ {i+1}:")
                self.print_info(f"  Digest: {digest}")
                self.print_info(f"  –í—Ä–µ–º—è: {timestamp}")
                self.print_info(f"  –¢–µ–≥–∏: {', '.join(tags) if tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã
            cmd = f"docker images gcr.io/{PROJECT_ID}/{SERVICE_NAME}"
            returncode, stdout, stderr = self.run_command(cmd)
            
            if returncode == 0 and stdout.strip():
                self.print_success("–õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã")
                self.print_info(f"–õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã:\n{stdout}")
            else:
                self.print_warning("–õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            self.results['docker_images'] = {
                'gcr_images_count': len(images),
                'latest_image_time': images[0].get('timestamp', {}).get('datetime') if images else None
            }
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤: {e}")
    
    async def check_logs(self):
        """4. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"""
        self.print_header("4. –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Cloud Run
            self.print_info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ Cloud Run...")
            cmd = f'gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name={SERVICE_NAME}" --limit=20 --format=json --freshness=1h'
            returncode, stdout, stderr = self.run_command(cmd)
            
            if returncode != 0:
                self.print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏: {stderr}")
                return
            
            if not stdout.strip():
                self.print_warning("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            logs = json.loads(stdout)
            
            if not logs:
                self.print_warning("–ü—É—Å—Ç—ã–µ –ª–æ–≥–∏")
                return
            
            self.print_success(f"–ù–∞–π–¥–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
            error_count = 0
            warning_count = 0
            startup_found = False
            
            for log_entry in logs:
                severity = log_entry.get('severity', 'INFO')
                text_payload = log_entry.get('textPayload', '')
                timestamp = log_entry.get('timestamp')
                
                if severity == 'ERROR':
                    error_count += 1
                    self.print_error(f"[{timestamp}] {text_payload}")
                elif severity == 'WARNING':
                    warning_count += 1
                    self.print_warning(f"[{timestamp}] {text_payload}")
                
                if 'Bot started' in text_payload or 'startup' in text_payload.lower():
                    startup_found = True
                    self.print_success(f"[{timestamp}] {text_payload}")
            
            self.print_info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤: {error_count} –æ—à–∏–±–æ–∫, {warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
            
            if not startup_found:
                self.print_warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
            
            self.results['logs'] = {
                'total_entries': len(logs),
                'error_count': error_count,
                'warning_count': warning_count,
                'startup_found': startup_found
            }
            
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤: {e}")
    
    async def check_telegram_webhook(self):
        """5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram webhook"""
        self.print_header("5. –ü–†–û–í–ï–†–ö–ê TELEGRAM WEBHOOK")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
            async with self.session.get(url) as response:
                if response.status != 200:
                    self.print_error(f"–û—à–∏–±–∫–∞ API Telegram: {response.status}")
                    return
                
                data = await response.json()
                
                if not data.get('ok'):
                    self.print_error(f"–û—à–∏–±–∫–∞ Telegram API: {data}")
                    return
                
                webhook_info = data['result']
                
                webhook_url = webhook_info.get('url')
                pending_updates = webhook_info.get('pending_update_count', 0)
                last_error = webhook_info.get('last_error_message')
                last_error_date = webhook_info.get('last_error_date')
                
                if webhook_url:
                    self.print_success(f"Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å webhook URL
                    await self.test_webhook_url(webhook_url)
                else:
                    self.print_error("Webhook URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                if pending_updates > 0:
                    self.print_warning(f"–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {pending_updates}")
                else:
                    self.print_success("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                
                if last_error:
                    error_date = datetime.fromtimestamp(last_error_date) if last_error_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    self.print_error(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ [{error_date}]: {last_error}")
                else:
                    self.print_success("–ù–µ—Ç –æ—à–∏–±–æ–∫ webhook")
                
                self.results['telegram_webhook'] = {
                    'url_set': bool(webhook_url),
                    'pending_updates': pending_updates,
                    'has_errors': bool(last_error),
                    'last_error': last_error
                }
                
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}")
    
    async def test_webhook_url(self, webhook_url: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook URL"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π URL
            base_url = webhook_url.replace('/webhook', '')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
            health_url = f"{base_url}/health"
            async with self.session.get(health_url, timeout=10) as response:
                if response.status == 200:
                    self.print_success("Health check endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    self.print_warning(f"Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook endpoint
            test_data = {"test": "ping"}
            async with self.session.post(webhook_url, json=test_data, timeout=10) as response:
                if response.status in [200, 400, 405]:  # 400/405 –æ–∂–∏–¥–∞–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    self.print_success("Webhook endpoint –æ—Ç–≤–µ—á–∞–µ—Ç")
                else:
                    self.print_warning(f"Webhook endpoint –ø—Ä–æ–±–ª–µ–º–∞: {response.status}")
                    
        except asyncio.TimeoutError:
            self.print_error("Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ webhook URL")
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook URL: {e}")
    
    async def test_bot_commands(self):
        """6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        self.print_header("6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î –ë–û–¢–ê")
        
        try:
            # –¢–µ—Å—Ç getMe
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        bot_info = data['result']
                        self.print_success(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info['username']}")
                    else:
                        self.print_error(f"–û—à–∏–±–∫–∞ getMe: {data}")
                else:
                    self.print_error(f"HTTP –æ—à–∏–±–∫–∞ getMe: {response.status}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            test_message = f"""
üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç</b>

–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.

–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç:
‚úÖ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã /start
            """
            
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": ADMIN_USER_ID,
                "text": test_message,
                "parse_mode": "HTML"
            }
            
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        self.print_success("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
                    else:
                        self.print_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                else:
                    self.print_error(f"HTTP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    
        except Exception as e:
            self.print_error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
    
    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        
        print(f"{Colors.CYAN}–í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}{Colors.NC}")
        print(f"{Colors.CYAN}–ü—Ä–æ–µ–∫—Ç: {PROJECT_ID}{Colors.NC}")
        print(f"{Colors.CYAN}–°–µ—Ä–≤–∏—Å: {SERVICE_NAME}{Colors.NC}")
        print()
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = {
            "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥": self.results.get('local_code', {}).get('all_fixes_present', False),
            "Cloud Run —Å–µ—Ä–≤–∏—Å": self.results.get('cloud_run', {}).get('ready', False),
            "Docker –æ–±—Ä–∞–∑—ã": self.results.get('docker_images', {}).get('gcr_images_count', 0) > 0,
            "–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã": self.results.get('logs', {}).get('startup_found', False),
            "Telegram webhook": self.results.get('telegram_webhook', {}).get('url_set', False)
        }
        
        print(f"{Colors.BLUE}–°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:{Colors.NC}")
        all_ok = True
        for component, status in components.items():
            if status:
                self.print_success(f"{component}")
            else:
                self.print_error(f"{component}")
                all_ok = False
        
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"{Colors.BLUE}–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Colors.NC}")
        
        if not all_ok:
            if not components["–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–¥"]:
                self.print_warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–¥–µ")
            
            if not components["Cloud Run —Å–µ—Ä–≤–∏—Å"]:
                self.print_warning("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π –≤ Cloud Run")
            
            if not components["Docker –æ–±—Ä–∞–∑—ã"]:
                self.print_warning("–ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Docker –æ–±—Ä–∞–∑")
            
            if not components["Telegram webhook"]:
                self.print_warning("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram webhook –∑–∞–Ω–æ–≤–æ")
        else:
            self.print_success("–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ - –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º")
        
        # –û—à–∏–±–∫–∏
        if self.errors:
            print(f"\n{Colors.RED}–ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:{Colors.NC}")
            for i, error in enumerate(self.errors, 1):
                print(f"{Colors.RED}{i}. {error}{Colors.NC}")
        
        return all_ok

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print(f"{Colors.PURPLE}")
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CHARTGENIUS BOT")
    print("=" * 60)
    print(f"{Colors.NC}")
    
    async with BotDiagnostics() as diagnostics:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await diagnostics.check_local_code_version()
        await diagnostics.check_cloud_run_status()
        await diagnostics.check_docker_images()
        await diagnostics.check_logs()
        await diagnostics.check_telegram_webhook()
        await diagnostics.test_bot_commands()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        all_ok = await diagnostics.generate_report()
        
        if all_ok:
            print(f"\n{Colors.GREEN}‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ{Colors.NC}")
            return 0
        else:
            print(f"\n{Colors.RED}‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã{Colors.NC}")
            return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
