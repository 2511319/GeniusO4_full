# üß™ Tests for WebSocket Service
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –¢–µ—Å—Ç—ã –¥–ª—è WebSocket —Å–µ—Ä–≤–∏—Å–∞

import pytest
import asyncio
import json
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime

from backend.services.websocket_service import ConnectionManager, WebSocketMessage, NotificationType


class TestConnectionManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è ConnectionManager"""
    
    @pytest.fixture
    def manager(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return ConnectionManager()
    
    @pytest.fixture
    def mock_websocket(self):
        """–ú–æ–∫ –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        websocket = AsyncMock()
        websocket.accept = AsyncMock()
        websocket.send_text = AsyncMock()
        websocket.close = AsyncMock()
        return websocket
    
    @pytest.mark.asyncio
    async def test_connect_new_user(self, manager, mock_websocket):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = "test_user_123"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await manager.connect(mock_websocket, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert user_id in manager.active_connections
        assert manager.active_connections[user_id] == mock_websocket
        mock_websocket.accept.assert_called_once()
        mock_websocket.send_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_connect_existing_user(self, manager, mock_websocket):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = "test_user_123"
        old_websocket = AsyncMock()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        manager.active_connections[user_id] = old_websocket
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await manager.connect(mock_websocket, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
        old_websocket.close.assert_called_once()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        assert manager.active_connections[user_id] == mock_websocket
    
    @pytest.mark.asyncio
    async def test_disconnect_user(self, manager, mock_websocket):
        """–¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = "test_user_123"
        task_id = "task_123"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫—É
        manager.active_connections[user_id] = mock_websocket
        manager.task_subscriptions[task_id] = {user_id}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
        await manager.disconnect(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert user_id not in manager.active_connections
        assert len(manager.task_subscriptions[task_id]) == 0
    
    @pytest.mark.asyncio
    async def test_send_personal_message_success(self, manager, mock_websocket):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = "test_user_123"
        manager.active_connections[user_id] = mock_websocket
        
        message = WebSocketMessage(
            type="test_message",
            data={"content": "Hello"},
            timestamp=datetime.utcnow().isoformat(),
            user_id=user_id
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await manager.send_personal_message(user_id, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        mock_websocket.send_text.assert_called_once()
        sent_data = json.loads(mock_websocket.send_text.call_args[0][0])
        assert sent_data["type"] == "test_message"
        assert sent_data["data"]["content"] == "Hello"
    
    @pytest.mark.asyncio
    async def test_send_personal_message_user_not_connected(self, manager):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_id = "nonexistent_user"
        
        message = WebSocketMessage(
            type="test_message",
            data={"content": "Hello"},
            timestamp=datetime.utcnow().isoformat(),
            user_id=user_id
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
        await manager.send_personal_message(user_id, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        assert user_id not in manager.active_connections
    
    @pytest.mark.asyncio
    async def test_broadcast_message(self, manager):
        """–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = ["user1", "user2", "user3"]
        websockets = []
        
        for user_id in users:
            websocket = AsyncMock()
            websockets.append(websocket)
            manager.active_connections[user_id] = websocket
        
        message = WebSocketMessage(
            type="broadcast",
            data={"content": "Broadcast message"},
            timestamp=datetime.utcnow().isoformat()
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        await manager.broadcast_message(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        for websocket in websockets:
            websocket.send_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_broadcast_message_with_exclusion(self, manager):
        """–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = ["user1", "user2", "user3"]
        websockets = {}
        
        for user_id in users:
            websocket = AsyncMock()
            websockets[user_id] = websocket
            manager.active_connections[user_id] = websocket
        
        message = WebSocketMessage(
            type="broadcast",
            data={"content": "Broadcast message"},
            timestamp=datetime.utcnow().isoformat()
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º user2
        await manager.broadcast_message(message, exclude_user="user2")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        websockets["user1"].send_text.assert_called_once()
        websockets["user2"].send_text.assert_not_called()
        websockets["user3"].send_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_subscribe_to_task(self, manager):
        """–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–¥–∞—á—É"""
        user_id = "test_user"
        task_id = "task_123"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await manager.subscribe_to_task(user_id, task_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert task_id in manager.task_subscriptions
        assert user_id in manager.task_subscriptions[task_id]
    
    @pytest.mark.asyncio
    async def test_unsubscribe_from_task(self, manager):
        """–¢–µ—Å—Ç –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∑–∞–¥–∞—á–∏"""
        user_id = "test_user"
        task_id = "task_123"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        manager.task_subscriptions[task_id] = {user_id}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø–∏—Å–∫—É
        await manager.unsubscribe_from_task(user_id, task_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert task_id not in manager.task_subscriptions
    
    @pytest.mark.asyncio
    async def test_notify_task_subscribers(self, manager):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞–¥–∞—á–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        task_id = "task_123"
        users = ["user1", "user2"]
        websockets = {}
        
        for user_id in users:
            websocket = AsyncMock()
            websockets[user_id] = websocket
            manager.active_connections[user_id] = websocket
        
        manager.task_subscriptions[task_id] = set(users)
        
        message = WebSocketMessage(
            type="task_update",
            data={"progress": 50},
            timestamp=datetime.utcnow().isoformat(),
            task_id=task_id
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await manager.notify_task_subscribers(task_id, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        for websocket in websockets.values():
            websocket.send_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_handle_message_subscribe_task(self, manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–¥–∞—á—É"""
        user_id = "test_user"
        websocket = AsyncMock()
        manager.active_connections[user_id] = websocket
        
        message_data = {
            "type": "subscribe_task",
            "data": {"task_id": "task_123"}
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await manager.handle_message(user_id, message_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞
        assert "task_123" in manager.task_subscriptions
        assert user_id in manager.task_subscriptions["task_123"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        websocket.send_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_handle_message_unsubscribe_task(self, manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∑–∞–¥–∞—á–∏"""
        user_id = "test_user"
        task_id = "task_123"
        websocket = AsyncMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        manager.active_connections[user_id] = websocket
        manager.task_subscriptions[task_id] = {user_id}
        
        message_data = {
            "type": "unsubscribe_task",
            "data": {"task_id": task_id}
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await manager.handle_message(user_id, message_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞
        assert task_id not in manager.task_subscriptions
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        websocket.send_text.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_handle_message_ping(self, manager):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ ping —Å–æ–æ–±—â–µ–Ω–∏—è"""
        user_id = "test_user"
        websocket = AsyncMock()
        manager.active_connections[user_id] = websocket
        
        message_data = {
            "type": "ping",
            "data": {}
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await manager.handle_message(user_id, message_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω pong
        websocket.send_text.assert_called_once()
        sent_data = json.loads(websocket.send_text.call_args[0][0])
        assert sent_data["type"] == "pong"
    
    def test_get_connection_stats(self, manager):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        manager.active_connections["user1"] = Mock()
        manager.active_connections["user2"] = Mock()
        manager.task_subscriptions["task1"] = {"user1", "user2"}
        manager.task_subscriptions["task2"] = {"user1"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_connection_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert stats["active_connections"] == 2
        assert stats["task_subscriptions"] == 2
        assert stats["total_subscribers"] == 3  # user1 –≤ –¥–≤—É—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö + user2 –≤ –æ–¥–Ω–æ–π
        assert "user1" in stats["connected_users"]
        assert "user2" in stats["connected_users"]


class TestWebSocketMessage:
    """–¢–µ—Å—Ç—ã –¥–ª—è WebSocketMessage"""
    
    def test_websocket_message_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = WebSocketMessage(
            type="test_message",
            data={"content": "Hello"},
            timestamp="2023-01-01T00:00:00Z",
            user_id="user123",
            task_id="task456"
        )
        
        assert message.type == "test_message"
        assert message.data["content"] == "Hello"
        assert message.timestamp == "2023-01-01T00:00:00Z"
        assert message.user_id == "user123"
        assert message.task_id == "task456"


class TestNotificationType:
    """–¢–µ—Å—Ç—ã –¥–ª—è NotificationType enum"""
    
    def test_notification_types(self):
        """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        assert NotificationType.ANALYSIS_STARTED.value == "analysis_started"
        assert NotificationType.ANALYSIS_PROGRESS.value == "analysis_progress"
        assert NotificationType.ANALYSIS_COMPLETED.value == "analysis_completed"
        assert NotificationType.ANALYSIS_FAILED.value == "analysis_failed"
        assert NotificationType.TASK_UPDATE.value == "task_update"
        assert NotificationType.SYSTEM_ALERT.value == "system_alert"
        assert NotificationType.USER_MESSAGE.value == "user_message"


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
class TestWebSocketServiceIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è WebSocket —Å–µ—Ä–≤–∏—Å–∞"""
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_redis_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Redis"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Redis
        pytest.skip("Requires running Redis instance")
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_full_websocket_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ WebSocket –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
        pytest.skip("Requires running WebSocket server")


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
