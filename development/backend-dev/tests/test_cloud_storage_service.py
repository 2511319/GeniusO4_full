# üß™ Tests for Cloud Storage Service
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏

import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
from datetime import datetime

from backend.services.cloud_storage_service import CloudStorageService, PromptType


class TestCloudStorageService:
    """–¢–µ—Å—Ç—ã –¥–ª—è CloudStorageService"""
    
    @pytest.fixture
    def service(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        with patch('backend.services.cloud_storage_service.storage.Client'), \
             patch('backend.services.cloud_storage_service.firestore.Client'):
            service = CloudStorageService()
            return service
    
    @pytest.fixture
    def mock_bucket(self):
        """–ú–æ–∫ –¥–ª—è Google Cloud Storage bucket"""
        bucket = Mock()
        blob = Mock()
        bucket.blob.return_value = blob
        return bucket, blob
    
    @pytest.mark.asyncio
    async def test_upload_prompt_success(self, service, mock_bucket):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞"""
        bucket, blob = mock_bucket
        service.bucket = bucket
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
        blob.upload_from_string = Mock()
        service._update_prompt_metadata = AsyncMock()
        service._clear_prompt_cache = AsyncMock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        result = await service.upload_prompt(
            prompt_type="technical_analysis",
            version="1.0",
            content="Test prompt content",
            description="Test description",
            created_by="test_user"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is True
        blob.upload_from_string.assert_called_once()
        service._update_prompt_metadata.assert_called_once()
        service._clear_prompt_cache.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_upload_prompt_empty_content(self, service):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø—É—Å—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
        result = await service.upload_prompt(
            prompt_type="technical_analysis",
            version="1.0",
            content="",
            description="Test description"
        )
        
        assert result is False
    
    @pytest.mark.asyncio
    async def test_download_prompt_success(self, service, mock_bucket):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
        bucket, blob = mock_bucket
        service.bucket = bucket
        
        # –ú–æ–∫–∞–µ–º Redis
        redis_mock = AsyncMock()
        redis_mock.get.return_value = None
        redis_mock.setex = AsyncMock()
        service.get_redis = AsyncMock(return_value=redis_mock)
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        service._get_prompt_metadata = AsyncMock(return_value=Mock(active_version="1.0"))
        
        # –ú–æ–∫–∞–µ–º blob
        blob.exists.return_value = True
        blob.download_as_text.return_value = "Test prompt content"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        result = await service.download_prompt("technical_analysis", "1.0")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result == "Test prompt content"
        blob.download_as_text.assert_called_once()
        redis_mock.setex.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_download_prompt_from_cache(self, service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –∫—ç—à–∞"""
        # –ú–æ–∫–∞–µ–º Redis —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        redis_mock = AsyncMock()
        redis_mock.get.return_value = b"Cached prompt content"
        service.get_redis = AsyncMock(return_value=redis_mock)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        result = await service.download_prompt("technical_analysis", "1.0")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result == "Cached prompt content"
    
    @pytest.mark.asyncio
    async def test_download_prompt_not_found(self, service, mock_bucket):
        """–¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        bucket, blob = mock_bucket
        service.bucket = bucket
        
        # –ú–æ–∫–∞–µ–º Redis
        redis_mock = AsyncMock()
        redis_mock.get.return_value = None
        service.get_redis = AsyncMock(return_value=redis_mock)
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        service._get_prompt_metadata = AsyncMock(return_value=Mock(active_version="1.0"))
        
        # –ú–æ–∫–∞–µ–º blob –∫–∞–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        blob.exists.return_value = False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        result = await service.download_prompt("technical_analysis", "1.0")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is None
    
    @pytest.mark.asyncio
    async def test_set_active_version_success(self, service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        mock_metadata = Mock()
        mock_metadata.versions = {"1.0": Mock(), "1.1": Mock()}
        mock_metadata.active_version = "1.0"
        
        service._get_prompt_metadata = AsyncMock(return_value=mock_metadata)
        service._clear_prompt_cache = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º Firestore
        doc_ref = Mock()
        service.db.collection.return_value.document.return_value = doc_ref
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        result = await service.set_active_version("technical_analysis", "1.1", "admin")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is True
        assert mock_metadata.active_version == "1.1"
        doc_ref.set.assert_called_once()
        service._clear_prompt_cache.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_set_active_version_not_exists(self, service):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        mock_metadata = Mock()
        mock_metadata.versions = {"1.0": Mock()}
        
        service._get_prompt_metadata = AsyncMock(return_value=mock_metadata)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏
        result = await service.set_active_version("technical_analysis", "2.0", "admin")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is False
    
    @pytest.mark.asyncio
    async def test_delete_prompt_version_success(self, service, mock_bucket):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–º–ø—Ç–∞"""
        bucket, blob = mock_bucket
        service.bucket = bucket
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        mock_metadata = Mock()
        mock_metadata.versions = {"1.0": Mock(), "1.1": Mock()}
        mock_metadata.active_version = "1.0"
        
        service._get_prompt_metadata = AsyncMock(return_value=mock_metadata)
        service._clear_prompt_cache = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º Firestore
        doc_ref = Mock()
        service.db.collection.return_value.document.return_value = doc_ref
        
        # –ú–æ–∫–∞–µ–º blob
        blob.exists.return_value = True
        blob.delete = Mock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
        result = await service.delete_prompt_version("technical_analysis", "1.1")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is True
        assert "1.1" not in mock_metadata.versions
        blob.delete.assert_called_once()
        doc_ref.set.assert_called_once()
        service._clear_prompt_cache.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_delete_active_version_fails(self, service):
        """–¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        mock_metadata = Mock()
        mock_metadata.versions = {"1.0": Mock(), "1.1": Mock()}
        mock_metadata.active_version = "1.0"
        
        service._get_prompt_metadata = AsyncMock(return_value=mock_metadata)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        result = await service.delete_prompt_version("technical_analysis", "1.0")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is False
    
    @pytest.mark.asyncio
    async def test_list_prompt_versions(self, service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–º–ø—Ç–∞"""
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        mock_metadata = Mock()
        mock_metadata.versions = {"1.0": Mock(), "1.1": Mock(), "1.2": Mock()}
        
        service._get_prompt_metadata = AsyncMock(return_value=mock_metadata)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π
        result = await service.list_prompt_versions("technical_analysis")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result == ["1.0", "1.1", "1.2"]
    
    @pytest.mark.asyncio
    async def test_list_prompt_versions_no_metadata(self, service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        service._get_prompt_metadata = AsyncMock(return_value=None)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π
        result = await service.list_prompt_versions("nonexistent")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result == []
    
    def test_prompt_type_enum(self):
        """–¢–µ—Å—Ç enum —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        assert PromptType.TECHNICAL_ANALYSIS.value == "technical_analysis"
        assert PromptType.FUNDAMENTAL_ANALYSIS.value == "fundamental_analysis"
        assert PromptType.SENTIMENT_ANALYSIS.value == "sentiment_analysis"
        assert PromptType.RISK_ASSESSMENT.value == "risk_assessment"


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
class TestCloudStorageServiceIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CloudStorageService"""
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_full_prompt_lifecycle(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö Google Cloud credentials
        # –∏ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
        pytest.skip("Requires real Google Cloud credentials")
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_redis_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Redis"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Redis
        pytest.skip("Requires running Redis instance")


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
