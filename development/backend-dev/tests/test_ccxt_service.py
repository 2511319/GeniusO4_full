# üß™ Tests for CCXT Service
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∏—Ä–∂–∞–º–∏

import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
from datetime import datetime

from backend.services.ccxt_service import CCXTService, ExchangeStatus, normalize_symbol, ccxt_to_chartgenius_format


class TestCCXTService:
    """–¢–µ—Å—Ç—ã –¥–ª—è CCXTService"""
    
    @pytest.fixture
    def service(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        with patch('backend.services.ccxt_service.ccxt'):
            service = CCXTService()
            return service
    
    @pytest.fixture
    def mock_exchange(self):
        """–ú–æ–∫ –¥–ª—è CCXT –±–∏—Ä–∂–∏"""
        exchange = AsyncMock()
        exchange.id = "binance"
        exchange.markets = {
            "BTC/USDT": {"symbol": "BTC/USDT"},
            "ETH/USDT": {"symbol": "ETH/USDT"}
        }
        return exchange
    
    @pytest.mark.asyncio
    async def test_initialize_exchanges(self, service):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏—Ä–∂"""
        with patch('backend.services.ccxt_service.ccxt.binance') as mock_binance:
            mock_exchange = AsyncMock()
            mock_binance.return_value = mock_exchange
            
            await service.initialize_exchanges()
            
            assert "binance" in service.exchanges
            mock_binance.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_get_ohlcv_data_success(self, service, mock_exchange):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.exchanges["binance"] = mock_exchange
        service.exchange_health["binance"] = ExchangeStatus.HEALTHY
        
        # –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        ohlcv_data = [
            [1640995200000, 47000, 48000, 46500, 47500, 1000],
            [1640998800000, 47500, 48500, 47000, 48000, 1200]
        ]
        mock_exchange.fetch_ohlcv.return_value = ohlcv_data
        mock_exchange.load_markets.return_value = {"BTC/USDT": {}}
        
        # –ú–æ–∫–∞–µ–º Redis
        redis_mock = AsyncMock()
        redis_mock.get.return_value = None
        redis_mock.setex = AsyncMock()
        service.get_redis = AsyncMock(return_value=redis_mock)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        result = await service.get_ohlcv_data("BTC/USDT", "1h", 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is not None
        assert len(result) == 2
        mock_exchange.fetch_ohlcv.assert_called_once_with("BTC/USDT", "1h", limit=100)
    
    @pytest.mark.asyncio
    async def test_get_ohlcv_data_from_cache(self, service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞"""
        # –ú–æ–∫–∞–µ–º Redis —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        cached_data = [[1640995200000, 47000, 48000, 46500, 47500, 1000]]
        redis_mock = AsyncMock()
        redis_mock.get.return_value = str(cached_data).encode()
        service.get_redis = AsyncMock(return_value=redis_mock)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        result = await service.get_ohlcv_data("BTC/USDT", "1h", 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is not None
    
    @pytest.mark.asyncio
    async def test_get_ohlcv_data_fallback(self, service):
        """–¢–µ—Å—Ç fallback –º–µ–∂–¥—É –±–∏—Ä–∂–∞–º–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∏—Ä–∂–∏
        binance_mock = AsyncMock()
        coinbase_mock = AsyncMock()
        
        service.exchanges["binance"] = binance_mock
        service.exchanges["coinbase"] = coinbase_mock
        service.exchange_health["binance"] = ExchangeStatus.UNAVAILABLE
        service.exchange_health["coinbase"] = ExchangeStatus.HEALTHY
        
        # –ú–æ–∫–∞–µ–º Redis
        redis_mock = AsyncMock()
        redis_mock.get.return_value = None
        redis_mock.setex = AsyncMock()
        service.get_redis = AsyncMock(return_value=redis_mock)
        
        # –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è coinbase
        ohlcv_data = [[1640995200000, 47000, 48000, 46500, 47500, 1000]]
        coinbase_mock.fetch_ohlcv.return_value = ohlcv_data
        coinbase_mock.load_markets.return_value = {"BTC/USDT": {}}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        result = await service.get_ohlcv_data("BTC/USDT", "1h", 100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ binance –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω, –∞ coinbase –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        binance_mock.fetch_ohlcv.assert_not_called()
        coinbase_mock.fetch_ohlcv.assert_called_once()
        assert result is not None
    
    @pytest.mark.asyncio
    async def test_get_ticker_data_success(self, service, mock_exchange):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è ticker –¥–∞–Ω–Ω—ã—Ö"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.exchanges["binance"] = mock_exchange
        service.exchange_health["binance"] = ExchangeStatus.HEALTHY
        
        # –ú–æ–∫–∞–µ–º ticker –¥–∞–Ω–Ω—ã–µ
        ticker_data = {
            "symbol": "BTC/USDT",
            "last": 47500,
            "bid": 47450,
            "ask": 47550,
            "baseVolume": 1000,
            "change": 500,
            "percentage": 1.06,
            "timestamp": 1640995200000
        }
        mock_exchange.fetch_ticker.return_value = ticker_data
        
        # –ú–æ–∫–∞–µ–º Redis
        redis_mock = AsyncMock()
        redis_mock.get.return_value = None
        redis_mock.setex = AsyncMock()
        service.get_redis = AsyncMock(return_value=redis_mock)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ ticker
        result = await service.get_ticker_data("BTC/USDT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result is not None
        assert result["symbol"] == "BTC/USDT"
        assert result["last"] == 47500
        mock_exchange.fetch_ticker.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_health_check_all(self, service, mock_exchange):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –±–∏—Ä–∂"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.exchanges["binance"] = mock_exchange
        service.exchange_health["binance"] = ExchangeStatus.HEALTHY
        
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π health check
        mock_exchange.fetch_ticker.return_value = {"symbol": "BTC/USDT"}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        result = await service.health_check_all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert "binance" in result
        assert result["binance"].status == ExchangeStatus.HEALTHY
    
    @pytest.mark.asyncio
    async def test_health_check_failure(self, service, mock_exchange):
        """–¢–µ—Å—Ç health check –ø—Ä–∏ –æ—à–∏–±–∫–µ –±–∏—Ä–∂–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.exchanges["binance"] = mock_exchange
        service.exchange_health["binance"] = ExchangeStatus.HEALTHY
        
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É
        mock_exchange.fetch_ticker.side_effect = Exception("Network error")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        result = await service.health_check_all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert "binance" in result
        assert result["binance"].status == ExchangeStatus.UNAVAILABLE
    
    @pytest.mark.asyncio
    async def test_get_supported_symbols(self, service, mock_exchange):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.exchanges["binance"] = mock_exchange
        
        # –ú–æ–∫–∞–µ–º markets
        mock_exchange.load_markets.return_value = {
            "BTC/USDT": {},
            "ETH/USDT": {},
            "ADA/USDT": {}
        }
        mock_exchange.markets = {
            "BTC/USDT": {},
            "ETH/USDT": {},
            "ADA/USDT": {}
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
        result = await service.get_supported_symbols("binance")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == 3
        assert "BTC/USDT" in result
        assert "ETH/USDT" in result
        assert "ADA/USDT" in result
    
    def test_normalize_symbol(self):
        """–¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        assert normalize_symbol("BTCUSDT") == "BTC/USDT"
        assert normalize_symbol("ETHBTC") == "ETH/BTC"
        assert normalize_symbol("BTC/USDT") == "BTC/USDT"
        assert normalize_symbol("ADAETH") == "ADA/ETH"
    
    def test_ccxt_to_chartgenius_format(self):
        """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CCXT —Ñ–æ—Ä–º–∞—Ç–∞ –≤ ChartGenius —Ñ–æ—Ä–º–∞—Ç"""
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ CCXT
        ccxt_data = [
            [1640995200000, 47000, 48000, 46500, 47500, 1000],
            [1640998800000, 47500, 48500, 47000, 48000, 1200]
        ]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        result = ccxt_to_chartgenius_format(ccxt_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(result) == 2
        assert result[0]["timestamp"] == 1640995200000
        assert result[0]["open"] == 47000
        assert result[0]["high"] == 48000
        assert result[0]["low"] == 46500
        assert result[0]["close"] == 47500
        assert result[0]["volume"] == 1000
    
    @pytest.mark.asyncio
    async def test_close_all_exchanges(self, service, mock_exchange):
        """–¢–µ—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service.exchanges["binance"] = mock_exchange
        mock_exchange.close = AsyncMock()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
        await service.close_all_exchanges()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ close –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_exchange.close.assert_called_once()


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
class TestCCXTServiceIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è CCXTService"""
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_real_exchange_connection(self):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–µ"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        pytest.skip("Requires internet connection and may hit rate limits")
    
    @pytest.mark.integration
    @pytest.mark.asyncio
    async def test_redis_caching(self):
        """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Redis"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Redis
        pytest.skip("Requires running Redis instance")


# –¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
class TestUtilityFunctions:
    """–¢–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def test_normalize_symbol_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        assert normalize_symbol("") == ""
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        assert normalize_symbol("BTC") == "BTC"
        
        # –£–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
        assert normalize_symbol("BTC/USDT") == "BTC/USDT"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        assert normalize_symbol("BTCUSDT") == "BTC/USDT"
        assert normalize_symbol("1000SHIBUSDT") == "1000SHIB/USDT"
    
    def test_ccxt_to_chartgenius_format_edge_cases(self):
        """–¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞"""
        # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        assert ccxt_to_chartgenius_format([]) == []
        
        # –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        incomplete_data = [[1640995200000, 47000, 48000]]
        result = ccxt_to_chartgenius_format(incomplete_data)
        assert len(result) == 0  # –î–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        
        # –î–∞–Ω–Ω—ã–µ –±–µ–∑ volume
        no_volume_data = [[1640995200000, 47000, 48000, 46500, 47500]]
        result = ccxt_to_chartgenius_format(no_volume_data)
        assert len(result) == 1
        assert result[0]["volume"] == 0.0


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
