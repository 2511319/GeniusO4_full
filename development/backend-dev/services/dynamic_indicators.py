# üßÆ Dynamic Indicators Engine for ChartGenius
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

import ast
import operator
import math
import numpy as np
import pandas as pd
from typing import Dict, Any, List, Optional, Union
import logging
import hashlib
import json
from datetime import datetime
import redis.asyncio as redis
from backend.services.metrics_service import metrics

logger = logging.getLogger(__name__)

# === –ë–ï–ó–û–ü–ê–°–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===
SAFE_OPERATORS = {
    ast.Add: operator.add,
    ast.Sub: operator.sub,
    ast.Mult: operator.mul,
    ast.Div: operator.truediv,
    ast.Pow: operator.pow,
    ast.USub: operator.neg,
    ast.UAdd: operator.pos,
}

SAFE_FUNCTIONS = {
    'abs': abs,
    'min': min,
    'max': max,
    'round': round,
    'sum': sum,
    'len': len,
    'sqrt': math.sqrt,
    'log': math.log,
    'exp': math.exp,
    'sin': math.sin,
    'cos': math.cos,
    'tan': math.tan,
    'mean': np.mean,
    'std': np.std,
    'median': np.median,
    'sma': lambda data, period: pd.Series(data).rolling(window=period).mean().tolist(),
    'ema': lambda data, period: pd.Series(data).ewm(span=period).mean().tolist(),
    'rsi': lambda data, period=14: _calculate_rsi(data, period),
    'macd': lambda data: _calculate_macd(data),
    'bollinger': lambda data, period=20: _calculate_bollinger_bands(data, period),
}

class FormulaSecurityError(Exception):
    """–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã"""
    pass

class FormulaValidationError(Exception):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª—ã"""
    pass

class DynamicIndicatorEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self):
        self.redis_client = None
        self.max_execution_time = 5.0  # 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        self.max_data_points = 10000   # –ú–∞–∫—Å–∏–º—É–º —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
        self.cache_ttl = 3600          # 1 —á–∞—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    
    async def get_redis(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Redis –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.redis_client:
            self.redis_client = redis.Redis(
                host='localhost', 
                port=6379, 
                decode_responses=True
            )
        return self.redis_client
    
    def validate_formula(self, formula: str) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        
        Args:
            formula: –°—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º—É–ª–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "sma(close, 20)")
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Raises:
            FormulaSecurityError: –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            FormulaValidationError: –ü—Ä–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        """
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ AST
            tree = ast.parse(formula, mode='eval')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self._check_security(tree)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            self._check_syntax(tree)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            dependencies = self._extract_dependencies(tree)
            
            return {
                'valid': True,
                'dependencies': dependencies,
                'complexity_score': self._calculate_complexity(tree),
                'estimated_execution_time': self._estimate_execution_time(tree)
            }
            
        except SyntaxError as e:
            raise FormulaValidationError(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        except FormulaSecurityError:
            raise
        except Exception as e:
            raise FormulaValidationError(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    def _check_security(self, node):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ AST —É–∑–ª–∞"""
        if isinstance(node, ast.Import) or isinstance(node, ast.ImportFrom):
            raise FormulaSecurityError("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        if isinstance(node, ast.Call):
            if isinstance(node.func, ast.Name):
                func_name = node.func.id
                if func_name not in SAFE_FUNCTIONS:
                    raise FormulaSecurityError(f"–§—É–Ω–∫—Ü–∏—è '{func_name}' –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
            elif isinstance(node.func, ast.Attribute):
                raise FormulaSecurityError("–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        if isinstance(node, ast.Attribute):
            # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º (close, open, high, low, volume)
            allowed_attributes = ['close', 'open', 'high', 'low', 'volume']
            if hasattr(node, 'attr') and node.attr not in allowed_attributes:
                raise FormulaSecurityError(f"–î–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É '{node.attr}' –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        if isinstance(node, ast.BinOp) and type(node.op) not in SAFE_OPERATORS:
            raise FormulaSecurityError(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {type(node.op).__name__} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
        for child in ast.iter_child_nodes(node):
            self._check_security(child)
    
    def _check_syntax(self, tree):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏"""
        try:
            compile(tree, '<formula>', 'eval')
        except SyntaxError as e:
            raise FormulaValidationError(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    def _extract_dependencies(self, tree) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ —Ñ–æ—Ä–º—É–ª—ã"""
        dependencies = set()
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Name):
                dependencies.add(node.id)
            elif isinstance(node, ast.Attribute):
                if hasattr(node, 'attr'):
                    dependencies.add(node.attr)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        valid_deps = {'close', 'open', 'high', 'low', 'volume'}
        return list(dependencies.intersection(valid_deps))
    
    def _calculate_complexity(self, tree) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã"""
        complexity = 0
        for node in ast.walk(tree):
            if isinstance(node, ast.Call):
                complexity += 2
            elif isinstance(node, ast.BinOp):
                complexity += 1
        return complexity
    
    def _estimate_execution_time(self, tree) -> float:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã"""
        base_time = 0.001  # 1ms –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Call):
                func_name = getattr(node.func, 'id', '')
                if func_name in ['sma', 'ema', 'rsi', 'macd']:
                    base_time += 0.01  # 10ms –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                else:
                    base_time += 0.001  # 1ms –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        
        return base_time
    
    async def execute_formula(self, formula: str, data: Dict[str, List[float]], 
                            cache_key: Optional[str] = None) -> List[float]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            formula: –°—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º—É–ª—ã
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ (close, open, high, low, volume)
            cache_key: –ö–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if cache_key:
                cached_result = await self._get_cached_result(cache_key)
                if cached_result:
                    metrics.track_cache_hit('dynamic_indicator')
                    return cached_result
                metrics.track_cache_miss('dynamic_indicator')
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª—ã
            validation = self.validate_formula(formula)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            max_length = max(len(values) for values in data.values())
            if max_length > self.max_data_points:
                raise FormulaValidationError(
                    f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {max_length} > {self.max_data_points}"
                )
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            context = self._prepare_execution_context(data)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã
            start_time = datetime.utcnow()
            tree = ast.parse(formula, mode='eval')
            result = self._evaluate_ast(tree, context)
            execution_time = (datetime.utcnow() - start_time).total_seconds()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if execution_time > self.max_execution_time:
                raise FormulaValidationError(
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}s > {self.max_execution_time}s"
                )
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            normalized_result = self._normalize_result(result, max_length)
            
            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if cache_key:
                await self._cache_result(cache_key, normalized_result)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            metrics.track_user_action('dynamic_indicator_executed', 'user')
            
            logger.info(f"Formula executed successfully in {execution_time:.3f}s")
            return normalized_result
            
        except Exception as e:
            logger.error(f"Error executing formula: {e}")
            metrics.track_error(type(e).__name__, 'dynamic_indicator')
            raise
    
    def _prepare_execution_context(self, data: Dict[str, List[float]]) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã"""
        context = {
            # –î–∞–Ω–Ω—ã–µ
            **data,
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            **SAFE_FUNCTIONS,
            # –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            'pi': math.pi,
            'e': math.e,
        }
        return context
    
    def _evaluate_ast(self, node, context):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AST —É–∑–ª–∞"""
        if isinstance(node, ast.Expression):
            return self._evaluate_ast(node.body, context)
        
        elif isinstance(node, ast.Num):  # Python < 3.8
            return node.n
        elif isinstance(node, ast.Constant):  # Python >= 3.8
            return node.value
        
        elif isinstance(node, ast.Name):
            if node.id in context:
                return context[node.id]
            else:
                raise NameError(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è '{node.id}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        
        elif isinstance(node, ast.BinOp):
            left = self._evaluate_ast(node.left, context)
            right = self._evaluate_ast(node.right, context)
            op = SAFE_OPERATORS.get(type(node.op))
            if op:
                return op(left, right)
            else:
                raise FormulaSecurityError(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {type(node.op).__name__} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω")
        
        elif isinstance(node, ast.UnaryOp):
            operand = self._evaluate_ast(node.operand, context)
            op = SAFE_OPERATORS.get(type(node.op))
            if op:
                return op(operand)
            else:
                raise FormulaSecurityError(f"–£–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä {type(node.op).__name__} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω")
        
        elif isinstance(node, ast.Call):
            func_name = node.func.id if isinstance(node.func, ast.Name) else None
            if func_name and func_name in SAFE_FUNCTIONS:
                args = [self._evaluate_ast(arg, context) for arg in node.args]
                kwargs = {kw.arg: self._evaluate_ast(kw.value, context) for kw in node.keywords}
                return SAFE_FUNCTIONS[func_name](*args, **kwargs)
            else:
                raise FormulaSecurityError(f"–§—É–Ω–∫—Ü–∏—è '{func_name}' –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
        
        else:
            raise FormulaSecurityError(f"AST —É–∑–µ–ª {type(node).__name__} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    
    def _normalize_result(self, result: Any, target_length: int) -> List[float]:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É float"""
        if isinstance(result, (int, float)):
            return [float(result)] * target_length
        elif isinstance(result, (list, tuple, np.ndarray)):
            result_list = list(result)
            # –î–æ–ø–æ–ª–Ω—è–µ–º NaN –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–æ—á–µ
            while len(result_list) < target_length:
                result_list.insert(0, float('nan'))
            return [float(x) if not pd.isna(x) else float('nan') for x in result_list[:target_length]]
        else:
            raise FormulaValidationError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
    
    async def _get_cached_result(self, cache_key: str) -> Optional[List[float]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫—ç—à–∞"""
        try:
            redis_client = await self.get_redis()
            cached_data = await redis_client.get(f"indicator_cache:{cache_key}")
            if cached_data:
                return json.loads(cached_data)
        except Exception as e:
            logger.error(f"Error getting cached result: {e}")
        return None
    
    async def _cache_result(self, cache_key: str, result: List[float]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫—ç—à"""
        try:
            redis_client = await self.get_redis()
            await redis_client.setex(
                f"indicator_cache:{cache_key}",
                self.cache_ttl,
                json.dumps(result)
            )
        except Exception as e:
            logger.error(f"Error caching result: {e}")
    
    def generate_cache_key(self, formula: str, data_hash: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞"""
        combined = f"{formula}:{data_hash}"
        return hashlib.md5(combined.encode()).hexdigest()

# === –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
def _calculate_rsi(data: List[float], period: int = 14) -> List[float]:
    """–†–∞—Å—á–µ—Ç RSI"""
    if len(data) < period + 1:
        return [float('nan')] * len(data)
    
    df = pd.DataFrame({'close': data})
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.fillna(float('nan')).tolist()

def _calculate_macd(data: List[float], fast: int = 12, slow: int = 26, signal: int = 9) -> Dict[str, List[float]]:
    """–†–∞—Å—á–µ—Ç MACD"""
    df = pd.DataFrame({'close': data})
    ema_fast = df['close'].ewm(span=fast).mean()
    ema_slow = df['close'].ewm(span=slow).mean()
    macd_line = ema_fast - ema_slow
    signal_line = macd_line.ewm(span=signal).mean()
    histogram = macd_line - signal_line
    
    return {
        'macd': macd_line.fillna(float('nan')).tolist(),
        'signal': signal_line.fillna(float('nan')).tolist(),
        'histogram': histogram.fillna(float('nan')).tolist()
    }

def _calculate_bollinger_bands(data: List[float], period: int = 20, std_dev: float = 2) -> Dict[str, List[float]]:
    """–†–∞—Å—á–µ—Ç –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"""
    df = pd.DataFrame({'close': data})
    sma = df['close'].rolling(window=period).mean()
    std = df['close'].rolling(window=period).std()
    
    upper_band = sma + (std * std_dev)
    lower_band = sma - (std * std_dev)
    
    return {
        'upper': upper_band.fillna(float('nan')).tolist(),
        'middle': sma.fillna(float('nan')).tolist(),
        'lower': lower_band.fillna(float('nan')).tolist()
    }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞
dynamic_indicator_engine = DynamicIndicatorEngine()
