# üìä Market Data Service for ChartGenius
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# Unified market data service with CoinGecko + CCXT fallback

import os
import asyncio
import logging
from typing import Dict, Any, List, Optional, Union
from datetime import datetime
import pandas as pd
from dataclasses import dataclass
from enum import Enum

from backend.services.crypto_compare_provider import fetch_ohlcv as fetch_coingecko_ohlcv
from backend.services.ccxt_service import ccxt_service, normalize_symbol, ccxt_to_chartgenius_format
from backend.services.metrics_service import metrics

logger = logging.getLogger(__name__)

class DataSource(Enum):
    """–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    COINGECKO = "coingecko"
    CCXT_BINANCE = "ccxt_binance"
    CCXT_COINBASE = "ccxt_coinbase"
    CCXT_KRAKEN = "ccxt_kraken"
    CCXT_BYBIT = "ccxt_bybit"

@dataclass
class MarketDataConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    source: DataSource
    priority: int
    timeout: float
    enabled: bool = True

class MarketDataService:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    """
    
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        self.data_sources = [
            MarketDataConfig(DataSource.COINGECKO, 1, 15.0),
            MarketDataConfig(DataSource.CCXT_BINANCE, 2, 10.0),
            MarketDataConfig(DataSource.CCXT_COINBASE, 3, 15.0),
            MarketDataConfig(DataSource.CCXT_KRAKEN, 4, 20.0),
            MarketDataConfig(DataSource.CCXT_BYBIT, 5, 10.0),
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CCXT —Å–µ—Ä–≤–∏—Å
        asyncio.create_task(self._initialize_ccxt())
        
        logger.info("Market Data Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _initialize_ccxt(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CCXT —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            await ccxt_service.initialize_exchanges()
            logger.info("CCXT exchanges –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CCXT: {e}")
    
    async def get_ohlcv_data(self, symbol: str, interval: str = '4h', 
                           limit: int = 500, preferred_source: Optional[str] = None) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (BTCUSDT –∏–ª–∏ BTC/USDT)
            interval: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
            preferred_source: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            pd.DataFrame: OHLCV –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ø—ã—Ç–æ–∫
        sources_to_try = self._get_sources_order(preferred_source)
        
        for source_config in sources_to_try:
            if not source_config.enabled:
                continue
            
            try:
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {source_config.source.value}")
                
                data = await self._fetch_from_source(
                    source_config.source, symbol, interval, limit
                )
                
                if data is not None and not data.empty:
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ {source_config.source.value}: {len(data)} —Å–≤–µ—á–µ–π")
                    
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    metrics.track_user_action(f'market_data_success_{source_config.source.value}', 'system')
                    
                    return data
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {source_config.source.value}: {e}")
                metrics.track_error(type(e).__name__, f'market_data_{source_config.source.value}')
                continue
        
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        metrics.track_user_action('market_data_all_failed', 'system')
        return None
    
    async def _fetch_from_source(self, source: DataSource, symbol: str, 
                               interval: str, limit: int) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        
        if source == DataSource.COINGECKO:
            return await self._fetch_from_coingecko(symbol, interval, limit)
        
        elif source.value.startswith('ccxt_'):
            exchange_name = source.value.replace('ccxt_', '')
            return await self._fetch_from_ccxt(exchange_name, symbol, interval, limit)
        
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
            return None
    
    async def _fetch_from_coingecko(self, symbol: str, interval: str, limit: int) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CoinGecko (CryptoCompare)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CryptoCompare provider
            df = await fetch_coingecko_ohlcv(symbol, interval, limit)
            
            if df is not None and not df.empty:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                required_columns = ['Open Time', 'Close Time', 'Open', 'High', 'Low', 'Close', 'Volume']
                
                for col in required_columns:
                    if col not in df.columns:
                        logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col} –≤ –¥–∞–Ω–Ω—ã—Ö CoinGecko")
                        return None
                
                return df
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CoinGecko: {e}")
            return None
    
    async def _fetch_from_ccxt(self, exchange_name: str, symbol: str, 
                             interval: str, limit: int) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CCXT –±–∏—Ä–∂–∏"""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è CCXT
            normalized_symbol = normalize_symbol(symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ CCXT —Å–µ—Ä–≤–∏—Å
            market_data_response = await ccxt_service.get_ohlcv_data(
                symbol=normalized_symbol,
                timeframe=interval,
                limit=limit,
                preferred_exchange=exchange_name
            )
            
            if market_data_response and market_data_response.data:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CCXT —Ñ–æ—Ä–º–∞—Ç –≤ pandas DataFrame
                df_data = ccxt_to_chartgenius_format(market_data_response.data)
                
                if df_data:
                    df = pd.DataFrame(df_data)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ datetime
                    df['Open Time'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df['Close Time'] = df['Open Time'] + pd.Timedelta(hours=4)  # –ü—Ä–∏–º–µ—Ä–Ω–æ –¥–ª—è 4h –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    df.rename(columns={
                        'open': 'Open',
                        'high': 'High', 
                        'low': 'Low',
                        'close': 'Close',
                        'volume': 'Volume'
                    }, inplace=True)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    if 'Quote Asset Volume' not in df.columns:
                        df['Quote Asset Volume'] = df['Volume'] * df['Close']
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É timestamp
                    df.drop(columns=['timestamp'], inplace=True, errors='ignore')
                    
                    return df
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CCXT {exchange_name}: {e}")
            return None
    
    def _get_sources_order(self, preferred_source: Optional[str] = None) -> List[MarketDataConfig]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫"""
        sources = self.data_sources.copy()
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫, —Å—Ç–∞–≤–∏–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
        if preferred_source:
            preferred_config = None
            remaining_sources = []
            
            for source_config in sources:
                if source_config.source.value == preferred_source:
                    preferred_config = source_config
                else:
                    remaining_sources.append(source_config)
            
            if preferred_config:
                return [preferred_config] + remaining_sources
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        return sorted(sources, key=lambda x: x.priority)
    
    async def get_ticker_data(self, symbol: str, preferred_source: Optional[str] = None) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω (ticker)
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            preferred_source: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            
        Returns:
            Dict: –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ None
        """
        # –î–ª—è ticker –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ CCXT (–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        ccxt_sources = [s for s in self.data_sources if s.source.value.startswith('ccxt_')]
        
        if preferred_source and preferred_source.startswith('ccxt_'):
            exchange_name = preferred_source.replace('ccxt_', '')
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é CCXT –±–∏—Ä–∂—É
            exchange_name = 'binance'
        
        try:
            normalized_symbol = normalize_symbol(symbol)
            ticker_data = await ccxt_service.get_ticker_data(normalized_symbol, exchange_name)
            
            if ticker_data:
                metrics.track_user_action(f'ticker_data_success_{exchange_name}', 'system')
                return ticker_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ticker –¥–∞–Ω–Ω—ã—Ö: {e}")
            metrics.track_error(type(e).__name__, 'ticker_data')
        
        return None
    
    async def get_supported_symbols(self, source: Optional[str] = None) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        """
        try:
            if source and source.startswith('ccxt_'):
                exchange_name = source.replace('ccxt_', '')
                return await ccxt_service.get_supported_symbols(exchange_name)
            else:
                # –î–ª—è CoinGecko –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                return [
                    'BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'DOTUSDT', 'LINKUSDT',
                    'BNBUSDT', 'XRPUSDT', 'LTCUSDT', 'BCHUSDT', 'EOSUSDT'
                ]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
    
    async def get_data_sources_health(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        health_status = {
            'timestamp': datetime.utcnow().isoformat(),
            'sources': {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CoinGecko (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        try:
            test_data = await self._fetch_from_coingecko('BTCUSDT', '1h', 1)
            health_status['sources']['coingecko'] = {
                'status': 'healthy' if test_data is not None else 'unhealthy',
                'last_check': datetime.utcnow().isoformat()
            }
        except Exception as e:
            health_status['sources']['coingecko'] = {
                'status': 'unhealthy',
                'error': str(e),
                'last_check': datetime.utcnow().isoformat()
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CCXT –±–∏—Ä–∂–∏
        try:
            ccxt_health = await ccxt_service.health_check_all()
            for exchange_name, health in ccxt_health.items():
                health_status['sources'][f'ccxt_{exchange_name}'] = {
                    'status': health.status.value,
                    'response_time': health.response_time,
                    'error_rate': health.error_rate,
                    'last_check': health.last_check.isoformat()
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è CCXT: {e}")
        
        return health_status

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
market_data_service = MarketDataService()
