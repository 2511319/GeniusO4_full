# üîÑ WebSocket Service for ChartGenius
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

import json
import asyncio
import logging
from typing import Dict, Set, Any, Optional
from fastapi import WebSocket, WebSocketDisconnect
from datetime import datetime
import redis.asyncio as redis
from backend.services.metrics_service import metrics

logger = logging.getLogger(__name__)

class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: user_id -> WebSocket
        self.active_connections: Dict[str, WebSocket] = {}
        # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–¥–∞—á–∏: task_id -> Set[user_id]
        self.task_subscriptions: Dict[str, Set[str]] = {}
        # Redis –¥–ª—è pub/sub
        self.redis_client: Optional[redis.Redis] = None
        self.pubsub_task: Optional[asyncio.Task] = None
    
    async def connect(self, websocket: WebSocket, user_id: str):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            await websocket.accept()
            self.active_connections[user_id] = websocket
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not self.redis_client:
                await self._init_redis()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_personal_message({
                'type': 'connection_established',
                'message': 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                'timestamp': datetime.utcnow().isoformat(),
                'user_id': user_id
            }, user_id)
            
            logger.info(f"WebSocket connected: user {user_id}")
            metrics.track_user_action('websocket_connect', 'user')
            
        except Exception as e:
            logger.error(f"Error connecting WebSocket for user {user_id}: {e}")
            raise
    
    def disconnect(self, user_id: str):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if user_id in self.active_connections:
                del self.active_connections[user_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∑–∞–¥–∞—á–∏
            for task_id, subscribers in self.task_subscriptions.items():
                subscribers.discard(user_id)
            
            # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            self.task_subscriptions = {
                task_id: subscribers 
                for task_id, subscribers in self.task_subscriptions.items() 
                if subscribers
            }
            
            logger.info(f"WebSocket disconnected: user {user_id}")
            metrics.track_user_action('websocket_disconnect', 'user')
            
        except Exception as e:
            logger.error(f"Error disconnecting WebSocket for user {user_id}: {e}")
    
    async def send_personal_message(self, message: Dict[str, Any], user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if user_id in self.active_connections:
                websocket = self.active_connections[user_id]
                await websocket.send_text(json.dumps(message))
                logger.debug(f"Message sent to user {user_id}: {message['type']}")
            else:
                logger.warning(f"User {user_id} not connected, message not sent")
                
        except WebSocketDisconnect:
            logger.info(f"WebSocket disconnected during message send: user {user_id}")
            self.disconnect(user_id)
        except Exception as e:
            logger.error(f"Error sending message to user {user_id}: {e}")
    
    async def broadcast_message(self, message: Dict[str, Any]):
        """–®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            disconnected_users = []
            
            for user_id, websocket in self.active_connections.items():
                try:
                    await websocket.send_text(json.dumps(message))
                except WebSocketDisconnect:
                    disconnected_users.append(user_id)
                except Exception as e:
                    logger.error(f"Error broadcasting to user {user_id}: {e}")
                    disconnected_users.append(user_id)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id in disconnected_users:
                self.disconnect(user_id)
            
            logger.info(f"Broadcast message sent to {len(self.active_connections)} users")
            
        except Exception as e:
            logger.error(f"Error broadcasting message: {e}")
    
    async def subscribe_to_task(self, user_id: str, task_id: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            if task_id not in self.task_subscriptions:
                self.task_subscriptions[task_id] = set()
            
            self.task_subscriptions[task_id].add(user_id)
            
            await self.send_personal_message({
                'type': 'task_subscription',
                'message': f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É {task_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
                'task_id': task_id,
                'timestamp': datetime.utcnow().isoformat()
            }, user_id)
            
            logger.info(f"User {user_id} subscribed to task {task_id}")
            
        except Exception as e:
            logger.error(f"Error subscribing user {user_id} to task {task_id}: {e}")
    
    async def notify_task_update(self, task_id: str, update_data: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"""
        try:
            if task_id not in self.task_subscriptions:
                return
            
            subscribers = self.task_subscriptions[task_id]
            message = {
                'type': 'task_update',
                'task_id': task_id,
                'data': update_data,
                'timestamp': datetime.utcnow().isoformat()
            }
            
            for user_id in subscribers.copy():  # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                await self.send_personal_message(message, user_id)
            
            logger.info(f"Task update sent to {len(subscribers)} subscribers for task {task_id}")
            
        except Exception as e:
            logger.error(f"Error notifying task update for {task_id}: {e}")
    
    async def _init_redis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è pub/sub"""
        try:
            self.redis_client = redis.Redis(
                host='localhost', 
                port=6379, 
                decode_responses=True
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è Redis pub/sub
            self.pubsub_task = asyncio.create_task(self._redis_listener())
            
            logger.info("Redis pub/sub initialized for WebSocket")
            
        except Exception as e:
            logger.error(f"Error initializing Redis for WebSocket: {e}")
    
    async def _redis_listener(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ Redis pub/sub –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            pubsub = self.redis_client.pubsub()
            await pubsub.subscribe('chartgenius:notifications')
            
            async for message in pubsub.listen():
                if message['type'] == 'message':
                    try:
                        data = json.loads(message['data'])
                        await self._handle_redis_notification(data)
                    except Exception as e:
                        logger.error(f"Error handling Redis notification: {e}")
                        
        except Exception as e:
            logger.error(f"Error in Redis listener: {e}")
    
    async def _handle_redis_notification(self, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Redis"""
        try:
            notification_type = data.get('type')
            
            if notification_type == 'task_update':
                task_id = data.get('task_id')
                update_data = data.get('data', {})
                await self.notify_task_update(task_id, update_data)
                
            elif notification_type == 'broadcast':
                message = data.get('message', {})
                await self.broadcast_message(message)
                
            elif notification_type == 'personal':
                user_id = data.get('user_id')
                message = data.get('message', {})
                if user_id:
                    await self.send_personal_message(message, user_id)
            
        except Exception as e:
            logger.error(f"Error handling Redis notification: {e}")
    
    def get_connection_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return {
            'active_connections': len(self.active_connections),
            'task_subscriptions': len(self.task_subscriptions),
            'total_subscribers': sum(len(subs) for subs in self.task_subscriptions.values()),
            'connected_users': list(self.active_connections.keys())
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
connection_manager = ConnectionManager()

# === NOTIFICATION HELPERS ===
async def notify_analysis_started(user_id: str, task_id: str, symbol: str, interval: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞"""
    message = {
        'type': 'analysis_started',
        'task_id': task_id,
        'symbol': symbol,
        'interval': interval,
        'message': f'–ê–Ω–∞–ª–∏–∑ {symbol} ({interval}) –∑–∞–ø—É—â–µ–Ω',
        'timestamp': datetime.utcnow().isoformat()
    }
    
    await connection_manager.send_personal_message(message, user_id)

async def notify_analysis_progress(task_id: str, progress: int, status: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞"""
    update_data = {
        'progress': progress,
        'status': status,
        'timestamp': datetime.utcnow().isoformat()
    }
    
    await connection_manager.notify_task_update(task_id, update_data)

async def notify_analysis_completed(user_id: str, task_id: str, symbol: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    message = {
        'type': 'analysis_completed',
        'task_id': task_id,
        'symbol': symbol,
        'message': f'–ê–Ω–∞–ª–∏–∑ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω',
        'timestamp': datetime.utcnow().isoformat(),
        'action': {
            'type': 'view_result',
            'url': f'/analysis/result/{task_id}'
        }
    }
    
    await connection_manager.send_personal_message(message, user_id)

async def notify_analysis_error(user_id: str, task_id: str, error_message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞"""
    message = {
        'type': 'analysis_error',
        'task_id': task_id,
        'error': error_message,
        'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ',
        'timestamp': datetime.utcnow().isoformat()
    }
    
    await connection_manager.send_personal_message(message, user_id)

async def notify_system_maintenance(message: str, duration_minutes: int = 0):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏"""
    broadcast_message = {
        'type': 'system_maintenance',
        'message': message,
        'duration_minutes': duration_minutes,
        'timestamp': datetime.utcnow().isoformat(),
        'severity': 'info'
    }
    
    await connection_manager.broadcast_message(broadcast_message)

# === REDIS PUBLISHER ===
async def publish_notification(notification_data: Dict[str, Any]):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Redis pub/sub"""
    try:
        redis_client = redis.Redis(host='localhost', port=6379, decode_responses=True)
        await redis_client.publish('chartgenius:notifications', json.dumps(notification_data))
        await redis_client.close()
        
    except Exception as e:
        logger.error(f"Error publishing notification: {e}")

# === WEBSOCKET ENDPOINT HANDLER ===
async def websocket_endpoint_handler(websocket: WebSocket, user_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket endpoint"""
    try:
        await connection_manager.connect(websocket, user_id)
        
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            
            try:
                message = json.loads(data)
                await _handle_client_message(message, user_id)
            except json.JSONDecodeError:
                await connection_manager.send_personal_message({
                    'type': 'error',
                    'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è',
                    'timestamp': datetime.utcnow().isoformat()
                }, user_id)
                
    except WebSocketDisconnect:
        connection_manager.disconnect(user_id)
    except Exception as e:
        logger.error(f"WebSocket error for user {user_id}: {e}")
        connection_manager.disconnect(user_id)

async def _handle_client_message(message: Dict[str, Any], user_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        message_type = message.get('type')
        
        if message_type == 'subscribe_task':
            task_id = message.get('task_id')
            if task_id:
                await connection_manager.subscribe_to_task(user_id, task_id)
        
        elif message_type == 'ping':
            await connection_manager.send_personal_message({
                'type': 'pong',
                'timestamp': datetime.utcnow().isoformat()
            }, user_id)
        
        elif message_type == 'get_stats':
            stats = connection_manager.get_connection_stats()
            await connection_manager.send_personal_message({
                'type': 'connection_stats',
                'data': stats,
                'timestamp': datetime.utcnow().isoformat()
            }, user_id)
        
        else:
            await connection_manager.send_personal_message({
                'type': 'error',
                'message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}',
                'timestamp': datetime.utcnow().isoformat()
            }, user_id)
            
    except Exception as e:
        logger.error(f"Error handling client message from user {user_id}: {e}")
        await connection_manager.send_personal_message({
            'type': 'error',
            'message': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
            'timestamp': datetime.utcnow().isoformat()
        }, user_id)
