# üóÑÔ∏è Cloud Storage Service for ChartGenius
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –≤ Google Cloud Storage

import os
import json
import asyncio
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime
from google.cloud import storage
from google.cloud import firestore
import redis.asyncio as redis
from dataclasses import dataclass, asdict
from enum import Enum

logger = logging.getLogger(__name__)

class PromptType(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    TECHNICAL_ANALYSIS = "technical_analysis"
    FUNDAMENTAL_ANALYSIS = "fundamental_analysis"
    SENTIMENT_ANALYSIS = "sentiment_analysis"
    RISK_ASSESSMENT = "risk_assessment"

@dataclass
class PromptVersion:
    """–í–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    version: str
    created_at: datetime
    created_by: str
    description: str
    file_path: str
    file_size: int
    parameters: Dict[str, Any]

@dataclass
class PromptMetadata:
    """–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞"""
    prompt_type: str
    active_version: str
    versions: Dict[str, PromptVersion]
    updated_at: datetime
    updated_by: str

class CloudStorageService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ –≤ Google Cloud Storage
    """
    
    def __init__(self):
        self.bucket_name = os.getenv("GOOGLE_CLOUD_STORAGE_BUCKET", "chartgenius-prompts")
        self.redis_url = os.getenv("REDIS_URL", "redis://localhost:6379/0")
        self.cache_ttl = 3600  # 1 —á–∞—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        try:
            self.storage_client = storage.Client()
            self.bucket = self.storage_client.bucket(self.bucket_name)
            self.db = firestore.Client()
            logger.info(f"Cloud Storage Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è bucket: {self.bucket_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Cloud Storage Service: {e}")
            raise
    
    async def get_redis(self) -> redis.Redis:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Redis –∫–ª–∏–µ–Ω—Ç–∞"""
        return redis.from_url(self.redis_url)
    
    async def upload_prompt(self, prompt_type: str, version: str, content: str, 
                          description: str = "", parameters: Dict[str, Any] = None,
                          created_by: str = "admin") -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ Cloud Storage
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞ (technical_analysis, etc.)
            version: –í–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.1")
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
            parameters: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è LLM (temperature, max_tokens, etc.)
            created_by: –ö—Ç–æ —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–ø—Ç
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            if not content.strip():
                raise ValueError("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            
            if parameters is None:
                parameters = {
                    "temperature": 0.7,
                    "max_tokens": 4000
                }
            
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ Cloud Storage
            file_path = f"{prompt_type}/v{version}.txt"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Cloud Storage
            blob = self.bucket.blob(file_path)
            blob.upload_from_string(content, content_type='text/plain')
            
            # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–æ–º–ø—Ç–∞
            prompt_version = PromptVersion(
                version=version,
                created_at=datetime.utcnow(),
                created_by=created_by,
                description=description,
                file_path=f"gs://{self.bucket_name}/{file_path}",
                file_size=len(content.encode('utf-8')),
                parameters=parameters
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ Firestore
            await self._update_prompt_metadata(prompt_type, prompt_version)
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            await self._clear_prompt_cache(prompt_type)
            
            logger.info(f"–ü—Ä–æ–º–ø—Ç {prompt_type} v{version} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} v{version}: {e}")
            return False
    
    async def download_prompt(self, prompt_type: str, version: str = None) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ Cloud Storage
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            version: –í–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞ (–µ—Å–ª–∏ None, —Ç–æ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            
        Returns:
            str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–ª–∏ None
        """
        try:
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é
            if version is None:
                metadata = await self._get_prompt_metadata(prompt_type)
                if not metadata:
                    return None
                version = metadata.active_version
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"prompt:{prompt_type}:v{version}"
            redis_client = await self.get_redis()
            cached_content = await redis_client.get(cache_key)
            
            if cached_content:
                logger.debug(f"–ü—Ä–æ–º–ø—Ç {prompt_type} v{version} –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞")
                return cached_content.decode('utf-8')
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑ Cloud Storage
            file_path = f"{prompt_type}/v{version}.txt"
            blob = self.bucket.blob(file_path)
            
            if not blob.exists():
                logger.warning(f"–ü—Ä–æ–º–ø—Ç {prompt_type} v{version} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            content = blob.download_as_text()
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await redis_client.setex(cache_key, self.cache_ttl, content)
            
            logger.debug(f"–ü—Ä–æ–º–ø—Ç {prompt_type} v{version} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Cloud Storage")
            return content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} v{version}: {e}")
            return None
    
    async def get_active_prompt(self, prompt_type: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            str: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        """
        return await self.download_prompt(prompt_type)
    
    async def list_prompt_versions(self, prompt_type: str) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π
        """
        try:
            metadata = await self._get_prompt_metadata(prompt_type)
            if not metadata:
                return []
            
            return list(metadata.versions.keys())
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}")
            return []
    
    async def set_active_version(self, prompt_type: str, version: str, 
                               updated_by: str = "admin") -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            version: –í–µ—Ä—Å–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            updated_by: –ö—Ç–æ –æ–±–Ω–æ–≤–∏–ª
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            metadata = await self._get_prompt_metadata(prompt_type)
            if not metadata:
                logger.error(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            if version not in metadata.versions:
                logger.error(f"–í–µ—Ä—Å–∏—è {version} –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é
            metadata.active_version = version
            metadata.updated_at = datetime.utcnow()
            metadata.updated_by = updated_by
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            doc_ref = self.db.collection('prompt_metadata').document(prompt_type)
            doc_ref.set(asdict(metadata))
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            await self._clear_prompt_cache(prompt_type)
            
            logger.info(f"–ê–∫—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {version}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–µ—Ä—Å–∏–∏ {prompt_type}: {e}")
            return False
    
    async def delete_prompt_version(self, prompt_type: str, version: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            version: –í–µ—Ä—Å–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            metadata = await self._get_prompt_metadata(prompt_type)
            if not metadata:
                return False
            
            if version not in metadata.versions:
                logger.warning(f"–í–µ—Ä—Å–∏—è {version} –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True
            
            # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é
            if metadata.active_version == version:
                logger.error(f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–µ—Ä—Å–∏—é {version} –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}")
                return False
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Cloud Storage
            file_path = f"{prompt_type}/v{version}.txt"
            blob = self.bucket.blob(file_path)
            if blob.exists():
                blob.delete()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            del metadata.versions[version]
            metadata.updated_at = datetime.utcnow()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            doc_ref = self.db.collection('prompt_metadata').document(prompt_type)
            doc_ref.set(asdict(metadata))
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            await self._clear_prompt_cache(prompt_type, version)
            
            logger.info(f"–í–µ—Ä—Å–∏—è {version} –ø—Ä–æ–º–ø—Ç–∞ {prompt_type} —É–¥–∞–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ {version} –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}")
            return False
    
    async def get_prompt_metadata(self, prompt_type: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è API
        
        Args:
            prompt_type: –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            Dict: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞
        """
        try:
            metadata = await self._get_prompt_metadata(prompt_type)
            if not metadata:
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API
            result = asdict(metadata)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏
            result['updated_at'] = metadata.updated_at.isoformat()
            for version_key, version_data in result['versions'].items():
                if isinstance(version_data, dict) and 'created_at' in version_data:
                    version_data['created_at'] = version_data['created_at'].isoformat()
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ {prompt_type}: {e}")
            return None
    
    async def _get_prompt_metadata(self, prompt_type: str) -> Optional[PromptMetadata]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ Firestore"""
        try:
            doc_ref = self.db.collection('prompt_metadata').document(prompt_type)
            doc = doc_ref.get()
            
            if not doc.exists:
                return None
            
            data = doc.to_dict()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã
            versions = {}
            for version_key, version_data in data.get('versions', {}).items():
                if isinstance(version_data['created_at'], str):
                    version_data['created_at'] = datetime.fromisoformat(version_data['created_at'])
                versions[version_key] = PromptVersion(**version_data)
            
            if isinstance(data['updated_at'], str):
                data['updated_at'] = datetime.fromisoformat(data['updated_at'])
            
            return PromptMetadata(
                prompt_type=data['prompt_type'],
                active_version=data['active_version'],
                versions=versions,
                updated_at=data['updated_at'],
                updated_by=data['updated_by']
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Firestore: {e}")
            return None
    
    async def _update_prompt_metadata(self, prompt_type: str, prompt_version: PromptVersion):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞ –≤ Firestore"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = await self._get_prompt_metadata(prompt_type)
            
            if metadata is None:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = PromptMetadata(
                    prompt_type=prompt_type,
                    active_version=prompt_version.version,
                    versions={prompt_version.version: prompt_version},
                    updated_at=datetime.utcnow(),
                    updated_by=prompt_version.created_by
                )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
                metadata.versions[prompt_version.version] = prompt_version
                metadata.updated_at = datetime.utcnow()
                metadata.updated_by = prompt_version.created_by
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            doc_ref = self.db.collection('prompt_metadata').document(prompt_type)
            doc_ref.set(asdict(metadata))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def _clear_prompt_cache(self, prompt_type: str, version: str = None):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        try:
            redis_client = await self.get_redis()
            
            if version:
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
                cache_key = f"prompt:{prompt_type}:v{version}"
                await redis_client.delete(cache_key)
            else:
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏
                pattern = f"prompt:{prompt_type}:*"
                keys = await redis_client.keys(pattern)
                if keys:
                    await redis_client.delete(*keys)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
cloud_storage_service = CloudStorageService()
