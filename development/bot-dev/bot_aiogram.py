# ü§ñ ChartGenius Telegram Bot - aiogram Version
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –ú–∏–≥—Ä–∞—Ü–∏—è —Å python-telegram-bot –Ω–∞ aiogram

import asyncio
import logging
import os
import json
from typing import Dict, Any, Optional
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo, BotCommand, BotCommandScopeDefault
)
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiohttp.web_request import Request

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend
import aiohttp
import jwt

logger = logging.getLogger(__name__)

# === CONFIGURATION ===
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8001")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://chartgenius-frontend.com")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "chartgenius_webhook_secret")

# === STATES ===
class UserStates(StatesGroup):
    waiting_for_symbol = State()
    waiting_for_settings = State()

# === BOT INITIALIZATION ===
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# === MIDDLEWARE ===
class AuthMiddleware:
    """Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    async def __call__(self, handler, event, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        user_id = None

        if hasattr(event, 'from_user') and event.from_user:
            user_id = str(event.from_user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ backend (—Å fallback)
            user_data = await self.check_user_auth(user_id)
            data['user_data'] = user_data
            data['user_id'] = user_id

        return await handler(event, data)

    async def check_user_auth(self, telegram_id: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{BACKEND_URL}/api/users/{telegram_id}",
                    timeout=aiohttp.ClientTimeout(total=3)  # –£–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    return None
        except asyncio.TimeoutError:
            logger.warning(f"Backend timeout for user {telegram_id}, using fallback")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            return {
                'telegram_id': telegram_id,
                'role': 'user',
                'subscription': 'free',
                'fallback': True
            }
        except Exception as e:
            logger.error(f"Error checking user auth: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            return {
                'telegram_id': telegram_id,
                'role': 'user',
                'subscription': 'free',
                'fallback': True
            }

class LoggingMiddleware:
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def __call__(self, handler, event, data):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        start_time = datetime.utcnow()
        
        try:
            result = await handler(event, data)
            
            processing_time = (datetime.utcnow() - start_time).total_seconds()
            logger.info(f"Event processed in {processing_time:.3f}s: {type(event).__name__}")
            
            return result
            
        except Exception as e:
            processing_time = (datetime.utcnow() - start_time).total_seconds()
            logger.error(f"Event failed after {processing_time:.3f}s: {e}")
            raise

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.message.middleware(AuthMiddleware())
dp.callback_query.middleware(AuthMiddleware())
dp.message.middleware(LoggingMiddleware())
dp.callback_query.middleware(LoggingMiddleware())

# === HELPER FUNCTIONS ===
async def send_start_menu(chat_id: int, username: str, user_data: Optional[Dict[str, Any]] = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöÄ –û—Ç–∫—Ä—ã—Ç—å ChartGenius",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )],
            [InlineKeyboardButton(
                text="üìä –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑",
                callback_data="quick_analysis"
            )],
            [InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                callback_data="settings"
            )],
            [InlineKeyboardButton(
                text="‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                callback_data="help"
            )]
        ])

        welcome_text = f"""
üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChartGenius!</b>

–ü—Ä–∏–≤–µ—Ç, {username}! üëã

ChartGenius - —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.

üî• <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å 20+ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
‚Ä¢ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
‚Ä¢ –£—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏
‚Ä¢ –í–æ–ª–Ω—ã –≠–ª–ª–∏–æ—Ç—Ç–∞
‚Ä¢ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

üíé <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> {user_data.get('role', 'user').title() if user_data else 'User'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è! üöÄ
        """

        await bot.send_message(
            chat_id=chat_id,
            text=welcome_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error sending start menu: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# === COMMAND HANDLERS ===
@router.message(CommandStart())
async def start_command(message: Message, user_data: Optional[Dict[str, Any]] = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = str(message.from_user.id)
        username = message.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ backend –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not user_data or user_data.get('fallback'):
            await register_user_in_backend(user_id, username)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º helper —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
        await send_start_menu(message.chat.id, username, user_data)
        
        logger.info(f"Start command processed for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ ChartGenius</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/watch - –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/unwatch - –£–±—Ä–∞—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üöÄ –û—Ç–∫—Ä—ã—Ç—å ChartGenius" –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
4. –ü–æ–ª—É—á–∏—Ç–µ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

<b>–í–µ—Ä—Å–∏—è:</b> 1.1.0-dev (aiogram)
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöÄ –û—Ç–∫—Ä—ã—Ç—å ChartGenius",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                callback_data="back_to_menu"
            )]
        ])
        
        await message.answer(help_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.")

@router.message(Command("settings"))
async def settings_command(message: Message, user_data: Optional[Dict[str, Any]] = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    try:
        user_role = user_data.get('role', 'user') if user_data else 'user'
        
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

<b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> {user_role.title()}
<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã
<b>–Ø–∑—ã–∫:</b> –†—É—Å—Å–∫–∏–π

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–∞—Ö
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –ø–∞—Ä—ã
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="settings_notifications"
            )],
            [InlineKeyboardButton(
                text="üìä –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
                callback_data="settings_preferences"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="back_to_menu"
            )]
        ])
        
        await message.answer(settings_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in settings command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

# === CALLBACK QUERY HANDLERS ===
@router.callback_query(F.data == "quick_analysis")
async def quick_analysis_callback(callback: CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑"""
    try:
        await callback.answer()
        
        text = """
üìä <b>–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑</b>

–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ BTCUSDT
‚Ä¢ ETHUSDT
‚Ä¢ ADAUSDT

–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚Çø BTC/USDT", callback_data="analyze_BTCUSDT"),
                InlineKeyboardButton(text="‚ü† ETH/USDT", callback_data="analyze_ETHUSDT")
            ],
            [
                InlineKeyboardButton(text="üîµ ADA/USDT", callback_data="analyze_ADAUSDT"),
                InlineKeyboardButton(text="üü° BNB/USDT", callback_data="analyze_BNBUSDT")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(UserStates.waiting_for_symbol)
        
    except Exception as e:
        logger.error(f"Error in quick analysis: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞.")

@router.callback_query(F.data.startswith("analyze_"))
async def analyze_symbol_callback(callback: CallbackQuery):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        await callback.answer("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        
        symbol = callback.data.replace("analyze_", "")
        user_id = str(callback.from_user.id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ backend
        analysis_result = await start_analysis_in_backend(user_id, symbol)
        
        if analysis_result:
            text = f"""
‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω!</b>

<b>–ü–∞—Ä–∞:</b> {symbol}
<b>–°—Ç–∞—Ç—É—Å:</b> –û–±—Ä–∞–±–æ—Ç–∫–∞...
<b>ID –∑–∞–¥–∞—á–∏:</b> {analysis_result.get('task_id', 'N/A')}

–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.
–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/analysis")
                )],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
            
        else:
            text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error analyzing symbol: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.")

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.answer()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
        if callback.message:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await send_start_menu(callback.message.chat.id, callback.from_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    except Exception as e:
        logger.error(f"Error returning to menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.")

# === MESSAGE HANDLERS ===
@router.message(UserStates.waiting_for_symbol)
async def handle_symbol_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        symbol = message.text.upper().strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞
        if not symbol or len(symbol) < 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                "–ü—Ä–∏–º–µ—Ä: BTCUSDT"
            )
            return
        
        user_id = str(message.from_user.id)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_result = await start_analysis_in_backend(user_id, symbol)
        
        if analysis_result:
            text = f"""
‚úÖ <b>–ê–Ω–∞–ª–∏–∑ {symbol} –∑–∞–ø—É—â–µ–Ω!</b>

<b>ID –∑–∞–¥–∞—á–∏:</b> {analysis_result.get('task_id', 'N/A')}
<b>–°—Ç–∞—Ç—É—Å:</b> –û–±—Ä–∞–±–æ—Ç–∫–∞...

–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.
            """
        else:
            text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol}."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling symbol input: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–º–≤–æ–ª–∞.")

# === BACKEND INTEGRATION ===
async def register_user_in_backend(telegram_id: str, username: str) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ backend"""
    try:
        async with aiohttp.ClientSession() as session:
            data = {
                'telegram_id': telegram_id,
                'username': username,
                'source': 'telegram_bot'
            }
            
            async with session.post(
                f"{BACKEND_URL}/api/users/register",
                json=data,
                timeout=aiohttp.ClientTimeout(total=5)  # –£–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
            ) as response:
                return response.status in [200, 201]

    except asyncio.TimeoutError:
        logger.warning(f"Backend timeout during user registration for {telegram_id}")
        return False
    except Exception as e:
        logger.error(f"Error registering user: {e}")
        return False

async def start_analysis_in_backend(user_id: str, symbol: str) -> Optional[Dict[str, Any]]:
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ backend"""
    try:
        async with aiohttp.ClientSession() as session:
            data = {
                'symbol': symbol,
                'interval': '4h',
                'indicators': ['RSI', 'MACD', 'MA_20'],
                'user_id': user_id
            }

            async with session.post(
                f"{BACKEND_URL}/api/analyze/async",
                json=data,
                timeout=aiohttp.ClientTimeout(total=10)  # –£–º–µ–Ω—å—à–µ–Ω —Ç–∞–π–º–∞—É—Ç
            ) as response:
                if response.status == 200:
                    return await response.json()
                return None

    except asyncio.TimeoutError:
        logger.warning(f"Backend timeout during analysis start for {user_id}")
        return None
    except Exception as e:
        logger.error(f"Error starting async analysis: {e}")
        return None

async def get_analysis_status(task_id: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{BACKEND_URL}/api/analyze/status/{task_id}",
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status == 200:
                    return await response.json()
                return None

    except Exception as e:
        logger.error(f"Error getting analysis status: {e}")
        return None

async def send_analysis_notification(user_id: str, task_id: str, symbol: str, status: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        if status == "completed":
            text = f"""
‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

<b>–ü–∞—Ä–∞:</b> {symbol}
<b>ID –∑–∞–¥–∞—á–∏:</b> {task_id}

–†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É.
            """

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/analysis/result/{task_id}")
                )],
                [InlineKeyboardButton(
                    text="üöÄ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
                    callback_data="quick_analysis"
                )]
            ])

        elif status == "failed":
            text = f"""
‚ùå <b>–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è</b>

<b>–ü–∞—Ä–∞:</b> {symbol}
<b>ID –∑–∞–¥–∞—á–∏:</b> {task_id}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –µ—â–µ —Ä–∞–∑.
            """

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data=f"analyze_{symbol}"
                )]
            ])
        else:
            return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤

        await bot.send_message(
            chat_id=int(user_id),
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        logger.info(f"Analysis notification sent to user {user_id}: {status}")

    except Exception as e:
        logger.error(f"Error sending analysis notification: {e}")

# === BOT SETUP ===
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="üìö –°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
    ]
    
    await bot.set_my_commands(commands, BotCommandScopeDefault())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# === WEBHOOK SETUP ===
async def on_startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await set_bot_commands()
    
    if WEBHOOK_URL:
        webhook_url = f"{WEBHOOK_URL.rstrip('/')}{WEBHOOK_PATH}"
        await bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET,
            drop_pending_updates=True
        )
        logger.info(f"Webhook set to: {webhook_url}")
    else:
        logger.info("Starting in polling mode")

async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.session.close()

# === MAIN FUNCTION ===
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        await on_startup()
        
        if WEBHOOK_URL:
            # Webhook mode
            app = web.Application()

            # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            async def error_middleware(request, handler):
                try:
                    return await handler(request)
                except Exception as e:
                    logger.error(f"Webhook error: {e}")
                    return web.Response(status=500, text="Internal Server Error")

            app.middlewares.append(error_middleware)

            # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
            async def health_check(request):
                return web.Response(text="OK", status=200)

            app.router.add_get("/health", health_check)

            webhook_requests_handler = SimpleRequestHandler(
                dispatcher=dp,
                bot=bot,
                secret_token=WEBHOOK_SECRET
            )
            webhook_requests_handler.register(app, path=WEBHOOK_PATH)

            setup_application(app, dp, bot=bot)

            return app
        else:
            # Polling mode
            await dp.start_polling(bot, skip_updates=True)
            
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise
    finally:
        await on_shutdown()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    if WEBHOOK_URL:
        # –î–ª—è webhook —Ä–µ–∂–∏–º–∞ –Ω—É–∂–µ–Ω web server
        web.run_app(main(), host="0.0.0.0", port=8000)
    else:
        # Polling —Ä–µ–∂–∏–º
        asyncio.run(main())
