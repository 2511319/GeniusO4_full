#!/bin/bash
# üöÄ ChartGenius Bot Deployment Script
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –î–µ–ø–ª–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ Google Cloud Run

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_ID="chartgenius-444017"
REGION="europe-west1"
SERVICE_NAME="chartgenius-bot"
IMAGE_NAME="gcr.io/${PROJECT_ID}/${SERVICE_NAME}"
BOT_TOKEN="7279183061:AAERodVAje0VnifJmUJWeq0EM4FxMueXrB0"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_header() {
    echo -e "\n${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ gcloud
    if ! command -v gcloud &> /dev/null; then
        print_error "gcloud CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    print_success "gcloud CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
        print_error "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ gcloud"
        print_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: gcloud auth login"
        exit 1
    fi
    print_success "gcloud –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    current_project=$(gcloud config get-value project 2>/dev/null)
    if [ "$current_project" != "$PROJECT_ID" ]; then
        print_warning "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: $current_project"
        print_info "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: $PROJECT_ID"
        gcloud config set project $PROJECT_ID
    fi
    print_success "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: $PROJECT_ID"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
test_bot_locally() {
    print_header "–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
    
    print_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    if python test-bot.py; then
        print_success "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        print_error "–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? [y/N]: " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
build_image() {
    print_header "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"

    print_info "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è –±–æ—Ç–∞..."
    cd bot-dev

    # –°–æ–∑–¥–∞–µ–º .dockerignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -f .dockerignore ]; then
        cat > .dockerignore << EOF
__pycache__
*.pyc
*.pyo
*.pyd
.Python
env
pip-log.txt
pip-delete-this-directory.txt
.tox
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.log
.git
.mypy_cache
.pytest_cache
.hypothesis
.DS_Store
*.egg-info
.venv
venv/
EOF
    fi

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
    print_info "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker rmi $IMAGE_NAME:latest 2>/dev/null || true
    docker system prune -f

    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    TIMESTAMP=$(date +%Y%m%d-%H%M%S)
    UNIQUE_TAG="v1.1.0-fix-${TIMESTAMP}"

    print_info "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º: $UNIQUE_TAG"

    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –ë–ï–ó –∫–µ—à–∞
    docker build --no-cache --pull -t $IMAGE_NAME:latest -t $IMAGE_NAME:$UNIQUE_TAG .

    if [ $? -eq 0 ]; then
        print_success "–û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å —Ç–µ–≥–æ–º: $UNIQUE_TAG"
        echo "IMAGE_TAG=$UNIQUE_TAG" > ../image_tag.env
    else
        print_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi

    cd ..
}

# –ü—É—à –æ–±—Ä–∞–∑–∞ –≤ Container Registry
push_image() {
    print_header "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Container Registry"

    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è GCR..."
    gcloud auth configure-docker --quiet

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–∞ —Ç–µ–≥–∞
    print_info "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ latest..."
    docker push $IMAGE_NAME:latest

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
    if [ -f image_tag.env ]; then
        source image_tag.env
        print_info "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º: $IMAGE_TAG"
        docker push $IMAGE_NAME:$IMAGE_TAG
    fi

    if [ $? -eq 0 ]; then
        print_success "–û–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ GCR"
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—Ä–∞–∑–∞"
        exit 1
    fi
}

# –î–µ–ø–ª–æ–π –≤ Cloud Run
deploy_to_cloud_run() {
    print_header "–î–µ–ø–ª–æ–π –≤ Google Cloud Run"
    
    print_info "–î–µ–ø–ª–æ–π —Å–µ—Ä–≤–∏—Å–∞..."
    
    # –ü–æ–ª—É—á–∞–µ–º URL webhook
    SERVICE_URL="https://${SERVICE_NAME}-$(echo $REGION | tr '-' '')-${PROJECT_ID}.a.run.app"
    WEBHOOK_URL="${SERVICE_URL}/webhook"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    IMAGE_TO_DEPLOY="$IMAGE_NAME:latest"
    if [ -f image_tag.env ]; then
        source image_tag.env
        IMAGE_TO_DEPLOY="$IMAGE_NAME:$IMAGE_TAG"
        print_info "–î–µ–ø–ª–æ–π –æ–±—Ä–∞–∑–∞ —Å —Ç–µ–≥–æ–º: $IMAGE_TAG"
    fi

    gcloud run deploy $SERVICE_NAME \
        --image $IMAGE_TO_DEPLOY \
        --platform managed \
        --region $REGION \
        --allow-unauthenticated \
        --memory 512Mi \
        --cpu 1 \
        --concurrency 1000 \
        --timeout 300 \
        --max-instances 10 \
        --set-env-vars "TELEGRAM_BOT_TOKEN=${BOT_TOKEN}" \
        --set-env-vars "WEBHOOK_URL=${WEBHOOK_URL}" \
        --set-env-vars "ENVIRONMENT=production" \
        --set-env-vars "DEBUG=false" \
        --set-env-vars "VERSION=1.1.0-prod-$(date +%Y%m%d-%H%M%S)" \
        --set-env-vars "DEPLOYED_AT=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        --port 8000 \
        --no-traffic \
        --tag candidate
    
    if [ $? -eq 0 ]; then
        print_success "–ö–∞–Ω–¥–∏–¥–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –≤ Cloud Run"
        print_info "URL —Å–µ—Ä–≤–∏—Å–∞: $SERVICE_URL"

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
        print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏..."
        sleep 10

        # –ü–æ–ª—É—á–∞–µ–º URL –∫–∞–Ω–¥–∏–¥–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        CANDIDATE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.traffic[0].url)")

        if curl -f "${CANDIDATE_URL}/health" > /dev/null 2>&1; then
            print_success "–ö–∞–Ω–¥–∏–¥–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—à–ª–∞ health check"

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            print_info "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é..."
            gcloud run services update-traffic $SERVICE_NAME --to-latest --region=$REGION

            if [ $? -eq 0 ]; then
                print_success "–¢—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é"
            else
                print_error "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"
                exit 1
            fi
        else
            print_error "–ö–∞–Ω–¥–∏–¥–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ health check"
            print_warning "–û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π..."
            gcloud run services update-traffic $SERVICE_NAME --to-revisions=LATEST=0 --region=$REGION
            exit 1
        fi
    else
        print_error "–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –≤ Cloud Run"
        exit 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
setup_webhook() {
    print_header "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Webhook"
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞
    SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
    WEBHOOK_URL="${SERVICE_URL}/webhook"
    
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: $WEBHOOK_URL"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    curl -X POST "https://api.telegram.org/bot${BOT_TOKEN}/setWebhook" \
        -H "Content-Type: application/json" \
        -d "{\"url\":\"${WEBHOOK_URL}\",\"drop_pending_updates\":true}"
    
    echo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook..."
    curl -s "https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo" | python -m json.tool
    
    print_success "Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ production
test_production() {
    print_header "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ production"
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ (30 —Å–µ–∫—É–Ω–¥)..."
    sleep 30
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞
    SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
    
    # –¢–µ—Å—Ç health check
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check..."
    if curl -f "${SERVICE_URL}/health" > /dev/null 2>&1; then
        print_success "Health check –ø—Ä–æ–π–¥–µ–Ω"
    else
        print_warning "Health check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    print_info "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è..."
    curl -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
        -H "Content-Type: application/json" \
        -d '{"chat_id":"299820674","text":"üöÄ ChartGenius Bot v1.1.0 —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!\n\n–í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã callback handlers\n‚úÖ –£–ª—É—á—à–µ–Ω middleware\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫","parse_mode":"HTML"}'
    
    echo
    print_success "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
check_logs() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"
    
    print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞:"
    gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=$SERVICE_NAME" \
        --limit=10 \
        --format="table(timestamp,severity,textPayload)" \
        --freshness=1h
}

# –û—Ç–∫–∞—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
rollback() {
    print_header "–û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏"
    
    print_warning "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–∫–∞—Ç..."
    gcloud run services replace-traffic $SERVICE_NAME --to-revisions=LATEST=0 --region=$REGION
    
    print_success "–û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    clear
    echo -e "${PURPLE}"
    echo "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo " ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo " ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo " ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë"
    echo " ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë"
    echo "  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${CYAN}                          Bot Deployment Script v1.1.0${NC}"
    echo -e "${CYAN}                               Production Deploy${NC}\n"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤
    check_dependencies
    test_bot_locally
    build_image
    push_image
    deploy_to_cloud_run
    setup_webhook
    test_production
    check_logs
    
    print_header "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    print_success "ChartGenius Bot v1.1.0 —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ production"
    print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    
    # –û–ø—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    echo
    read -p "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏? [y/N]: " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)..."
        gcloud logging tail "resource.type=cloud_run_revision AND resource.labels.service_name=$SERVICE_NAME"
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo -e "\n${YELLOW}–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...${NC}"; exit 0' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
