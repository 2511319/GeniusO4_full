#!/usr/bin/env python3
# üß™ Test Script for ChartGenius Telegram Bot
# –í–µ—Ä—Å–∏—è: 1.1.0-dev
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ

import asyncio
import aiohttp
import json
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7279183061:AAERodVAje0VnifJmUJWeq0EM4FxMueXrB0"
ADMIN_USER_ID = "299820674"
TEST_USER_ID = "123456789"
BACKEND_URL = "http://localhost:8001"
BOT_URL = "http://localhost:8002"

class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.session = None
        self.test_results = []
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def test_bot_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getMe...")
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        bot_info = data['result']
                        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info['username']}")
                        print(f"   ID: {bot_info['id']}")
                        print(f"   –ò–º—è: {bot_info['first_name']}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
                        return False
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    async def test_webhook_info(self):
        """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getWebhookInfo...")
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        webhook_info = data['result']
                        print(f"‚úÖ Webhook URL: {webhook_info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                        print(f"   Pending updates: {webhook_info.get('pending_update_count', 0)}")
                        print(f"   Last error: {webhook_info.get('last_error_message', '–ù–µ—Ç –æ—à–∏–±–æ–∫')}")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
                        return False
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    async def test_backend_health(self):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è backend"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend health...")
        try:
            url = f"{BACKEND_URL}/health"
            async with self.session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
        except asyncio.TimeoutError:
            print("‚ùå Backend timeout")
            return False
        except Exception as e:
            print(f"‚ùå Backend –æ—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_bot_health(self):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bot health...")
        try:
            url = f"{BOT_URL}/health"
            async with self.session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    print("‚úÖ Bot webhook –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ùå Bot webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
        except asyncio.TimeoutError:
            print("‚ùå Bot webhook timeout")
            return False
        except Exception as e:
            print(f"‚ùå Bot webhook –æ—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_send_message(self, user_id: str, text: str):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": user_id,
                "text": text,
                "parse_mode": "HTML"
            }
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                        return False
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    async def test_webhook_simulation(self):
        """–°–∏–º—É–ª—è—Ü–∏—è webhook –∑–∞–ø—Ä–æ—Å–∞"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–∏–º—É–ª—è—Ü–∏–∏...")
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º /start –∫–æ–º–∞–Ω–¥—É
            webhook_data = {
                "update_id": 123456789,
                "message": {
                    "message_id": 1,
                    "from": {
                        "id": int(TEST_USER_ID),
                        "is_bot": False,
                        "first_name": "Test",
                        "username": "testuser"
                    },
                    "chat": {
                        "id": int(TEST_USER_ID),
                        "first_name": "Test",
                        "username": "testuser",
                        "type": "private"
                    },
                    "date": int(datetime.now().timestamp()),
                    "text": "/start",
                    "entities": [
                        {
                            "offset": 0,
                            "length": 6,
                            "type": "bot_command"
                        }
                    ]
                }
            }
            
            url = f"{BOT_URL}/webhook"
            async with self.session.post(url, json=webhook_data, timeout=aiohttp.ClientTimeout(total=30)) as response:
                if response.status == 200:
                    print("‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {response.status}")
                    text = await response.text()
                    print(f"   –û—Ç–≤–µ—Ç: {text}")
                    return False
        except asyncio.TimeoutError:
            print("‚ùå Webhook timeout")
            return False
        except Exception as e:
            print(f"‚ùå Webhook –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ChartGenius Telegram Bot")
        print("=" * 50)
        
        tests = [
            ("Bot Info", self.test_bot_info()),
            ("Webhook Info", self.test_webhook_info()),
            ("Backend Health", self.test_backend_health()),
            ("Bot Health", self.test_bot_health()),
            ("Send Test Message", self.test_send_message(ADMIN_USER_ID, "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ChartGenius")),
            ("Webhook Simulation", self.test_webhook_simulation())
        ]
        
        results = []
        for test_name, test_coro in tests:
            try:
                result = await test_coro
                results.append((test_name, result))
            except Exception as e:
                print(f"‚ùå –¢–µ—Å—Ç {test_name} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
                results.append((test_name, False))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        passed = 0
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"{test_name:.<30} {status}")
            if result:
                passed += 1
        
        print("-" * 50)
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.1f}%)")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            print("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    async with BotTester() as tester:
        success = await tester.run_all_tests()
        
        if success:
            print("\n‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –≤ production!")
        else:
            print("\n‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º")
            exit(1)

if __name__ == "__main__":
    asyncio.run(main())
