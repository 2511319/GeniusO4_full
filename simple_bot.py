#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import os
import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
from jose import jwt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE = "http://localhost:8000"
TOKEN = "7279183061:AAERodVAje0VnifJmUJWeq0EM4FxMueXrB0"
JWT_SECRET_KEY = "34sSDF542rf65EJ1kj"
WEBAPP_URL = "http://localhost:5173"

def create_jwt_token(telegram_id: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    expire = datetime.utcnow() + timedelta(days=7)
    payload = {
        "sub": telegram_id,
        "exp": expire,
        "telegram_id": telegram_id
    }
    return jwt.encode(payload, JWT_SECRET_KEY, algorithm="HS256")

async def send_message(chat_id: int, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data) as response:
            return await response.json()

async def get_updates(offset=0):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    url = f"https://api.telegram.org/bot{TOKEN}/getUpdates"
    params = {"offset": offset, "timeout": 30}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            return await response.json()

async def handle_start(chat_id: int, user_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    print(f"üéØ Handling /start for user {user_id} in chat {chat_id}")

    keyboard = {
        "inline_keyboard": [[
            {"text": "üöÄ –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑", "callback_data": "analyse"}
        ]]
    }

    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GeniusO4!</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑:"
    )

    try:
        result = await send_message(chat_id, welcome_text, keyboard)
        print(f"‚úÖ Welcome message sent: {result}")
    except Exception as e:
        print(f"‚ùå Error sending welcome message: {e}")

async def handle_analyse(chat_id: int, user_id: int, message_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    url = f"https://api.telegram.org/bot{TOKEN}/editMessageText"
    data = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": "‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑...",
        "parse_mode": "HTML"
    }
    
    async with aiohttp.ClientSession() as session:
        await session.post(url, json=data)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
        headers = {"X-Telegram-Id": str(user_id)}
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_BASE}/bot/analysis/simple", headers=headers, timeout=30) as response:
                if response.status == 402:
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    keyboard = {
                        "inline_keyboard": [[
                            {"text": "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "url": "https://your-payment-url.com"}
                        ]]
                    }
                    
                    text = (
                        "üö´ <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.</b>\n\n"
                        "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç."
                    )
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    edit_data = {
                        "chat_id": chat_id,
                        "message_id": message_id,
                        "text": text,
                        "parse_mode": "HTML",
                        "reply_markup": json.dumps(keyboard)
                    }
                    
                    async with aiohttp.ClientSession() as session:
                        await session.post(f"https://api.telegram.org/bot{TOKEN}/editMessageText", json=edit_data)
                    return
                
                if response.status != 200:
                    error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    edit_data = {
                        "chat_id": chat_id,
                        "message_id": message_id,
                        "text": error_text,
                        "parse_mode": "HTML"
                    }
                    async with aiohttp.ClientSession() as session:
                        await session.post(f"https://api.telegram.org/bot{TOKEN}/editMessageText", json=edit_data)
                    return
                
                analysis_data = await response.json()
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        token = create_jwt_token(str(user_id))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        web_link = f"{WEBAPP_URL}?token={token}&analysis_id={analysis_data['id']}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        analysis = analysis_data.get('analysis', {})
        summary = analysis.get('summary', '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üìä –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", "url": web_link}],
                [{"text": "üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "callback_data": "analyse"}]
            ]
        }
        
        message_text = (
            f"‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!</b>\n\n"
            f"üìà <b>–°–∏–º–≤–æ–ª:</b> {analysis_data.get('symbol', 'BTC/USDT')}\n"
            f"üìù <b>–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä:</b> {summary[:200]}...\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏:"
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        edit_data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": message_text,
            "parse_mode": "HTML",
            "reply_markup": json.dumps(keyboard)
        }
        
        async with aiohttp.ClientSession() as session:
            await session.post(f"https://api.telegram.org/bot{TOKEN}/editMessageText", json=edit_data)
        
    except Exception as e:
        print(f"Error in analyse handler: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        edit_data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": error_text,
            "parse_mode": "HTML"
        }
        async with aiohttp.ClientSession() as session:
            await session.post(f"https://api.telegram.org/bot{TOKEN}/editMessageText", json=edit_data)

async def process_update(update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    print(f"üîÑ Processing update type: {list(update.keys())}")

    if "message" in update:
        message = update["message"]
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        text = message.get("text", "")

        print(f"üí¨ Message: '{text}' from user {user_id}")

        if text == "/start":
            print(f"üéØ Calling handle_start for user {user_id}")
            await handle_start(chat_id, user_id)
        else:
            print(f"‚ùì Unknown command: {text}")
    
    elif "callback_query" in update:
        callback = update["callback_query"]
        chat_id = callback["message"]["chat"]["id"]
        user_id = callback["from"]["id"]
        message_id = callback["message"]["message_id"]
        data = callback["data"]
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        url = f"https://api.telegram.org/bot{TOKEN}/answerCallbackQuery"
        answer_data = {"callback_query_id": callback["id"]}
        async with aiohttp.ClientSession() as session:
            await session.post(url, json=answer_data)
        
        if data == "analyse":
            await handle_analyse(chat_id, user_id, message_id)

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        data = await request.json()
        print(f"üì® Webhook received: {data}")
        await process_update(data)
        return {"status": "ok"}
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return {"status": "error", "message": str(e)}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üìä Backend API: {API_BASE}")
    print(f"üåê Web App: {WEBAPP_URL}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    webhook_url = os.getenv("BOT_WEBHOOK_URL")
    port = int(os.getenv("PORT", 8080))

    if webhook_url:
        # Webhook —Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        print(f"üåê –ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        from aiohttp import web

        app = web.Application()
        app.router.add_post(f"/{TOKEN}", webhook_handler)
        app.router.add_get("/health", lambda r: web.json_response({"status": "ok"}))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        webhook_full_url = f"{webhook_url}/{TOKEN}"
        print(f"üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_full_url}")

        async with aiohttp.ClientSession() as session:
            webhook_data = {"url": webhook_full_url}
            async with session.post(f"https://api.telegram.org/bot{TOKEN}/setWebhook", json=webhook_data) as response:
                result = await response.json()
                if result.get("ok"):
                    print("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {result}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", port)
        await site.start()

        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ webhook —Ä–µ–∂–∏–º–µ –Ω–∞ –ø–æ—Ä—Ç—É {port}")

        # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        try:
            while True:
                await asyncio.sleep(3600)
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        finally:
            await runner.cleanup()

    else:
        # Polling —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ")
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É @Chart_Genius_bot")

        offset = 0

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                print(f"üîÑ Polling updates with offset {offset}...")
                result = await get_updates(offset)

                if result.get("ok"):
                    updates = result.get("result", [])
                    print(f"üì® Received {len(updates)} updates")

                    for update in updates:
                        print(f"üìù Processing update: {update}")
                        offset = update["update_id"] + 1
                        await process_update(update)
                else:
                    print(f"‚ùå Error getting updates: {result}")

                await asyncio.sleep(1)

            except KeyboardInterrupt:
                print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())
