import os
import logging
import asyncio
import json
import aiohttp
import time
from datetime import datetime, timedelta
from jose import jwt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE = os.getenv("API_URL", "http://backend:8000")
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
JWT_SECRET_KEY = os.environ["JWT_SECRET_KEY"]
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://your-frontend-url.com")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
app = Application.builder().token(TOKEN).build()

def create_jwt_token(telegram_id: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    expire = datetime.utcnow() + timedelta(days=7)
    payload = {
        "sub": telegram_id,
        "exp": expire,
        "telegram_id": telegram_id
    }
    return jwt.encode(payload, JWT_SECRET_KEY, algorithm="HS256")

async def register_user(query) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        user = query.from_user
        user_data = {
            "id": str(user.id),
            "first_name": user.first_name or "",
            "last_name": user.last_name or "",
            "username": user.username or "",
            "photo_url": "",
            "auth_date": str(int(time.time()))
        }

        # –°–æ–∑–¥–∞–µ–º hash –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        import hashlib
        import hmac

        secret_key = hashlib.sha256(TOKEN.encode()).digest()
        data_check_string = "\n".join(f"{k}={user_data[k]}" for k in sorted(user_data.keys()) if k != "hash")
        user_data["hash"] = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ backend –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{API_BASE}/auth/telegram", json=user_data) as response:
                if response.status == 200:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {response.status}")
                    return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

async def show_dashboard(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        token = create_jwt_token(str(query.from_user.id))

        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        dashboard_link = f"{WEBAPP_URL}?token={token}&page=dashboard"

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        async with aiohttp.ClientSession() as session:
            headers = {"X-Telegram-Id": str(query.from_user.id)}
            try:
                async with session.get(f"{API_BASE}/api/user/subscription", headers=headers) as response:
                    if response.status == 200:
                        sub_data = await response.json()
                        subscription_status = sub_data.get('level', 'none')
                        expires_at = sub_data.get('expires_at', 'N/A')
                    else:
                        subscription_status = 'none'
                        expires_at = 'N/A'
            except:
                subscription_status = 'none'
                expires_at = 'N/A'

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        status_emoji = "‚úÖ" if subscription_status != 'none' else "‚ùå"
        status_text = {
            'premium': '–ü—Ä–µ–º–∏—É–º',
            'basic': '–ë–∞–∑–æ–≤–∞—è',
            'none': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
            'expired': '–ò—Å—Ç–µ–∫–ª–∞'
        }.get(subscription_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=dashboard_link)],
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyse")],
            [InlineKeyboardButton("üìà –ü–æ–ª–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", url=f"{WEBAPP_URL}?token={token}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="continue")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message_text = (
            f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"üÜî ID: <code>{query.from_user.id}</code>\n"
            f"üë§ –ò–º—è: {query.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìß Username: @{query.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"{status_emoji} <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {status_text}\n"
            f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_at}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É:"
        )

        await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def get_login_payload(query) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç payload –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""
    user = query.from_user
    auth_date = int(time.time())
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    data = {
        "id": str(user.id),
        "first_name": user.first_name or "",
        "last_name": user.last_name or "",
        "username": user.username or "",
        "photo_url": "",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
        "auth_date": str(auth_date)
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º hash (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ)
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ telegram-webapp-auth
    import hashlib
    import hmac
    
    secret_key = hashlib.sha256(TOKEN.encode()).digest()
    data_check_string = "\n".join(f"{k}={data[k]}" for k in sorted(data.keys()))
    data["hash"] = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
    
    return data

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [[InlineKeyboardButton("üìà –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChartGenius!\n\n"
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º "
        "–ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        "üîπ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
        "üîπ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n"
        "üîπ –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "üîπ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:"
    )

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()

    if query.data == "continue":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await register_user(query)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyse")],
            [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="dashboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
        return

    elif query.data == "dashboard":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        await show_dashboard(query)
        return

    elif query.data == "analyse":
        await query.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
            async with aiohttp.ClientSession() as session:
                headers = {"X-Telegram-Id": str(query.from_user.id)}
                async with session.post(f"{API_BASE}/api/analysis/simple", headers=headers) as response:
                    if response.status == 402:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        keyboard = [[InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url="https://your-payment-url.com")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await query.edit_message_text(
                            "üö´ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.",
                            reply_markup=reply_markup
                        )
                        return
                    
                    if response.status != 200:
                        await query.edit_message_text(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )
                        return
                    
                    analysis_data = await response.json()
            
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            token = create_jwt_token(str(query.from_user.id))
            
            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
            web_link = f"{WEBAPP_URL}?token={token}&analysis_type=full&symbol={analysis_data.get('symbol', 'BTCUSDT')}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
            analysis = analysis_data.get('analysis', {})
            primary = analysis_data.get('primary_analysis', {})

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ primary_analysis –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            trend = primary.get('trend', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
            signal = primary.get('signal', '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')
            risk_level = primary.get('risk_level', '–°—Ä–µ–¥–Ω–∏–π')
            main_recommendation = primary.get('main_recommendation', '–û–∂–∏–¥–∞–Ω–∏–µ')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            signal_emoji = {
                'Long': 'üü¢',
                'Short': 'üî¥',
                'Hold': 'üü°',
                '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π': '‚ö™'
            }.get(signal, '‚ö™')

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∏—Å–∫–∞
            risk_emoji = {
                '–ù–∏–∑–∫–∏–π': 'üü¢',
                '–°—Ä–µ–¥–Ω–∏–π': 'üü°',
                '–í—ã—Å–æ–∫–∏–π': 'üî¥'
            }.get(risk_level, 'üü°')

            keyboard = [
                [InlineKeyboardButton("üìä –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", url=web_link)],
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="analyse")],
                [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="dashboard")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message_text = (
                f"‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìà <b>–°–∏–º–≤–æ–ª:</b> {analysis_data.get('symbol', 'BTC/USDT')}\n"
                f"üìä <b>–¢—Ä–µ–Ω–¥:</b> {trend}\n"
                f"{signal_emoji} <b>–°–∏–≥–Ω–∞–ª:</b> {signal}\n"
                f"{risk_emoji} <b>–†–∏—Å–∫:</b> {risk_level}\n\n"
                f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b>\n{main_recommendation}\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏:"
            )
            
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error in callback handler: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    port = int(os.getenv("PORT", 8080))
    webhook_url = os.getenv("BOT_WEBHOOK_URL")
    
    if webhook_url:
        # –ó–∞–ø—É—Å–∫ —Å webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        logger.info(f"Starting bot with webhook: {webhook_url}")
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=TOKEN,
            webhook_url=f"{webhook_url}/{TOKEN}"
        )
    else:
        # –ó–∞–ø—É—Å–∫ —Å polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        logger.info("Starting bot with polling")
        app.run_polling()

if __name__ == "__main__":
    main()
