# bot/bot.py

import os
import sys
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebApp
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from backend.config.config import logger, db
from backend.auth.dependencies import create_jwt_token
from google.cloud import firestore


class ChartGeniusBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.token = os.getenv("TELEGRAM_BOT_TOKEN")
        self.admin_id = int(os.getenv("ADMIN_TELEGRAM_ID", "299820674"))
        self.webapp_url = os.getenv("WEBAPP_URL", "https://your-webapp-url.com")
        
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("watch", self.watch_command))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("ban", self.ban_command))
        self.application.add_handler(CommandHandler("unban", self.unban_command))
        self.application.add_handler(CommandHandler("review", self.review_command))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("setrole", self.setrole_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("broadcast", self.broadcast_command))
        self.application.add_handler(CommandHandler("gc", self.gc_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            telegram_id = str(user.id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
            await self.get_or_create_user(telegram_id, user)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(
                    "üöÄ –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª", 
                    web_app=WebApp(url=self.webapp_url)
                )],
                [
                    InlineKeyboardButton("üìä –ú–æ–π watch-–ª–∏—Å—Ç", callback_data="watchlist"),
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChartGenius, {user.first_name}!\n\n"
                "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ä—ã–Ω–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
                "üìà –ü–æ–ª—É—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã\n"
                "‚ö° –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            user = update.effective_user
            telegram_id = str(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')
            
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
            help_text = "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            help_text += "üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n"
            help_text += "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            help_text += "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
            help_text += "/watch BTC,ETH - –û–±–Ω–æ–≤–∏—Ç—å watch-–ª–∏—Å—Ç\n"
            help_text += "/settings lang=ru tz=UTC+3 - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            if role in ['moderator', 'admin']:
                help_text += "üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**\n"
                help_text += "/ban @user_id 15 - –ó–∞–±–∞–Ω–∏—Ç—å –Ω–∞ 15 –¥–Ω–µ–π\n"
                help_text += "/unban @user_id - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
                help_text += "/review <ulid> <reason> - –ü–æ–º–µ—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑\n\n"
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if role == 'admin':
                help_text += "üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:**\n"
                help_text += "/setrole @user_id vip 60 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å\n"
                help_text += "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                help_text += "/broadcast <—Ç–µ–∫—Å—Ç> - –†–∞—Å—Å—ã–ª–∫–∞\n"
                help_text += "/gc - –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            
            await update.message.reply_text(help_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def watch_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /watch"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /watch BTC,ETH,ADA\n"
                    "–£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è watch-–ª–∏—Å—Ç–∞"
                )
                return
            
            symbols_str = ' '.join(context.args)
            symbols = [s.strip().upper() for s in symbols_str.split(',')]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
            if len(symbols) > 50:
                await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ –≤ watch-–ª–∏—Å—Ç–µ")
                return
            
            telegram_id = str(update.effective_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            if db:
                watchlist_ref = db.collection('watchlists').document(telegram_id)
                watchlist_ref.set({
                    'symbols': symbols,
                    'updated_at': firestore.SERVER_TIMESTAMP
                })
            
            await update.message.reply_text(
                f"‚úÖ Watch-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
                f"üìä –°–∏–º–≤–æ–ª—ã ({len(symbols)}): {', '.join(symbols)}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /watch: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è watch-–ª–∏—Å—Ç–∞")
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settings lang=ru tz=UTC+3\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                    "‚Ä¢ lang - —è–∑—ã–∫ (ru, en)\n"
                    "‚Ä¢ tz - —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (UTC+3, UTC-5, etc.)"
                )
                return
            
            settings = {}
            for arg in context.args:
                if '=' in arg:
                    key, value = arg.split('=', 1)
                    settings[key] = value
            
            telegram_id = str(update.effective_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Firestore
            if db:
                settings_ref = db.collection('user_settings').document(telegram_id)
                settings_ref.set({
                    **settings,
                    'updated_at': firestore.SERVER_TIMESTAMP
                })
            
            await update.message.reply_text("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /settings: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    async def get_or_create_user(self, telegram_id: str, user) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore"""
        try:
            if not db:
                return {}
            
            user_ref = db.collection('users').document(telegram_id)
            user_doc = user_ref.get()
            
            if user_doc.exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_ref.update({
                    'username': user.username or '',
                    'first_name': user.first_name or '',
                    'last_name': user.last_name or '',
                    'last_seen': firestore.SERVER_TIMESTAMP
                })
                return user_doc.to_dict()
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                role = "admin" if int(telegram_id) == self.admin_id else "user"
                
                new_user = {
                    'telegram_id': telegram_id,
                    'username': user.username or '',
                    'first_name': user.first_name or '',
                    'last_name': user.last_name or '',
                    'role': role,
                    'created_at': firestore.SERVER_TIMESTAMP,
                    'last_seen': firestore.SERVER_TIMESTAMP
                }
                
                user_ref.set(new_user)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id} —Å —Ä–æ–ª—å—é {role}")
                
                return new_user
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return {}
    
    async def get_user_data(self, telegram_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if not db:
                return {}
            
            user_ref = db.collection('users').document(telegram_id)
            user_doc = user_ref.get()
            
            if user_doc.exists:
                return user_doc.to_dict()
            
            return {}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}
    
    async def ban_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)"""
        try:
            telegram_id = str(update.effective_user.id)
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')

            if role not in ['moderator', 'admin']:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            if len(context.args) < 1:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @user_id [–¥–Ω–∏] [–ø—Ä–∏—á–∏–Ω–∞]")
                return

            target_id = context.args[0].replace('@', '')
            days = int(context.args[1]) if len(context.args) > 1 else 30
            reason = ' '.join(context.args[2:]) if len(context.args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"

            # –°–æ–∑–¥–∞–µ–º –±–∞–Ω –≤ Firestore
            if db:
                ban_ref = db.collection('bans').document(target_id)
                expires_at = datetime.utcnow() + timedelta(days=days)

                ban_ref.set({
                    'telegram_id': target_id,
                    'moderator_id': telegram_id,
                    'reason': reason,
                    'expires_at': expires_at,
                    'created_at': firestore.SERVER_TIMESTAMP
                })

            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /ban: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

    async def unban_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unban (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)"""
        try:
            telegram_id = str(update.effective_user.id)
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')

            if role not in ['moderator', 'admin']:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            if len(context.args) < 1:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban @user_id")
                return

            target_id = context.args[0].replace('@', '')

            # –£–¥–∞–ª—è–µ–º –±–∞–Ω –∏–∑ Firestore
            if db:
                ban_ref = db.collection('bans').document(target_id)
                ban_ref.delete()

            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /unban: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

    async def review_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /review (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)"""
        try:
            telegram_id = str(update.effective_user.id)
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')

            if role not in ['moderator', 'admin']:
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            if len(context.args) < 2:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /review <ulid> <–ø—Ä–∏—á–∏–Ω–∞>")
                return

            analysis_ulid = context.args[0]
            reason = ' '.join(context.args[1:])

            # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –≤ Firestore
            if db:
                flag_ref = db.collection('flags').document(analysis_ulid)
                flag_ref.set({
                    'analysis_ulid': analysis_ulid,
                    'reason': reason,
                    'flagged_by': telegram_id,
                    'ts': firestore.SERVER_TIMESTAMP
                })

            await update.message.reply_text(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {analysis_ulid} –ø–æ–º–µ—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /review: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

    async def setrole_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setrole (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            telegram_id = str(update.effective_user.id)
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')

            if role != 'admin':
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            if len(context.args) < 2:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrole @user_id —Ä–æ–ª—å [–¥–Ω–∏_–ø–æ–¥–ø–∏—Å–∫–∏]")
                return

            target_id = context.args[0].replace('@', '')
            new_role = context.args[1]
            sub_days = int(context.args[2]) if len(context.args) > 2 else 0

            valid_roles = ['user', 'premium', 'vip', 'moderator', 'admin']
            if new_role not in valid_roles:
                await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_roles)}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ Firestore
            if db:
                user_ref = db.collection('users').document(target_id)
                user_ref.update({
                    'role': new_role,
                    'updated_at': firestore.SERVER_TIMESTAMP
                })

                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                if sub_days > 0:
                    sub_ref = db.collection('subscriptions').document(target_id)
                    expires_at = datetime.utcnow() + timedelta(days=sub_days)

                    sub_ref.set({
                        'level': new_role if new_role in ['premium', 'vip'] else 'premium',
                        'expires_at': expires_at,
                        'created_at': firestore.SERVER_TIMESTAMP
                    })

            message = f"‚úÖ –†–æ–ª—å {new_role} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}"
            if sub_days > 0:
                message += f"\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {sub_days} –¥–Ω–µ–π"

            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /setrole: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            telegram_id = str(update.effective_user.id)
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')

            if role != 'admin':
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_ref = db.collection('users')
            users = users_ref.stream()

            role_counts = {'admin': 0, 'moderator': 0, 'vip': 0, 'premium': 0, 'user': 0}
            total_users = 0

            for user in users:
                total_users += 1
                user_data = user.to_dict()
                user_role = user_data.get('role', 'user')
                if user_role in role_counts:
                    role_counts[user_role] += 1

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            subs_ref = db.collection('subscriptions')
            subs = subs_ref.stream()

            active_premium = 0
            active_vip = 0
            now = datetime.utcnow()

            for sub in subs:
                sub_data = sub.to_dict()
                expires_at = sub_data.get('expires_at')
                level = sub_data.get('level', '')

                if expires_at and expires_at > now:
                    if level == 'premium':
                        active_premium += 1
                    elif level == 'vip':
                        active_vip += 1

            stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ChartGenius**\n\n"
            stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
            stats_text += f"**–ü–æ —Ä–æ–ª—è–º:**\n"
            stats_text += f"üëë –ê–¥–º–∏–Ω—ã: {role_counts['admin']}\n"
            stats_text += f"üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: {role_counts['moderator']}\n"
            stats_text += f"üíé VIP: {role_counts['vip']}\n"
            stats_text += f"‚≠ê Premium: {role_counts['premium']}\n"
            stats_text += f"üë§ –û–±—ã—á–Ω—ã–µ: {role_counts['user']}\n\n"
            stats_text += f"**–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:**\n"
            stats_text += f"‚≠ê Premium: {active_premium}\n"
            stats_text += f"üíé VIP: {active_vip}"

            await update.message.reply_text(stats_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def broadcast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            telegram_id = str(update.effective_user.id)
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')

            if role != 'admin':
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            if not context.args:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
                return

            message_text = ' '.join(context.args)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if db:
                users_ref = db.collection('users')
                users = users_ref.stream()

                user_ids = []
                for user in users:
                    user_ids.append(user.id)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
                broadcast_ref = db.collection('broadcast_queue').document()
                broadcast_ref.set({
                    'text': message_text,
                    'user_ids': user_ids,
                    'status': 'pending',
                    'created_at': firestore.SERVER_TIMESTAMP
                })

            await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /broadcast: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")

    async def gc_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gc (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            telegram_id = str(update.effective_user.id)
            user_data = await self.get_user_data(telegram_id)
            role = user_data.get('role', 'user')

            if role != 'admin':
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
                return

            if not db:
                await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–Ω–∞–ª–∏–∑—ã (>30 –¥–Ω–µ–π)
            cutoff_date = datetime.utcnow() - timedelta(days=30)
            analyses_ref = db.collection('analyses')
            old_analyses = analyses_ref.where('created_at', '<', cutoff_date).stream()

            deleted_analyses = 0
            for analysis in old_analyses:
                analysis.reference.delete()
                deleted_analyses += 1

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–ª–∞–≥–∏ (>14 –¥–Ω–µ–π)
            flags_cutoff = datetime.utcnow() - timedelta(days=14)
            flags_ref = db.collection('flags')
            old_flags = flags_ref.where('ts', '<', flags_cutoff).stream()

            deleted_flags = 0
            for flag in old_flags:
                flag.reference.delete()
                deleted_flags += 1

            result_text = f"üßπ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:**\n"
            result_text += f"üìä –£–¥–∞–ª–µ–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {deleted_analyses}\n"
            result_text += f"üö© –£–¥–∞–ª–µ–Ω–æ —Ñ–ª–∞–≥–æ–≤: {deleted_flags}"

            await update.message.reply_text(result_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /gc: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
            "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ ChartGenius –±–æ—Ç–∞...")
        self.application.run_polling()


if __name__ == "__main__":
    try:
        bot = ChartGeniusBot()
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)
