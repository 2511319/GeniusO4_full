#!/usr/bin/env python3
# production/test-analysis.py
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–Ω–∞–ª–∏–∑–∞

import requests
import json
import time
from datetime import datetime

# URLs
API_URL = "https://chartgenius-api-working-169129692197.europe-west1.run.app"

# –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram WebApp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
REAL_INIT_DATA = "query_id=AAGC5t4RAAAAAILm3hF4OoMR&user=%7B%22id%22%3A299820674%2C%22first_name%22%3A%22%D0%94%D0%B8%D0%BC%D0%B0%22%2C%22last_name%22%3A%22%22%2C%22username%22%3A%22Dushnar%22%2C%22language_code%22%3A%22ru%22%2C%22is_premium%22%3Atrue%2C%22allows_write_to_pm%22%3Atrue%2C%22photo_url%22%3A%22https%3A%5C%2F%5C%2Ft.me%5C%2Fi%5C%2Fuserpic%5C%2F320%5C%2FXV2IBaxMPch2a19AJW5Q2zF3ccAOR6HvE9B7VMzx34k.svg%22%7D&auth_date=1750669916&signature=tWj0BgfvWVmIfUBWlrQGFElyrs68eF1Lp4QUjsU8XMe1iwZDqG4CybLjGXdA7Y0NSU-gBtxsh6GI4GvqQi8JCA&hash=080de3032960cb91f896b86c807e24d60a1bcea7056005584852e9a7f7aeefd5"

def get_auth_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        print("üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        response = requests.post(
            f"{API_URL}/api/auth/webapp-token",
            headers={
                'Content-Type': 'text/plain',
                'Host': 'chartgenius-api-working-169129692197.europe-west1.run.app',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            },
            data=REAL_INIT_DATA,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('access_token', '')
            if token:
                print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(token)})")
                return token
            else:
                print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_analysis_with_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    token = get_auth_token()
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return False
    
    try:
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...")
        
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        
        body = {
            "symbol": "BTCUSDT",
            "interval": "4h", 
            "limit": 144,
            "indicators": ["RSI", "MACD"]
        }
        
        response = requests.post(
            f"{API_URL}/api/analyze",
            headers=headers,
            json=body,
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ï–ù!")
            print(f"üìà –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {body['symbol']}")
            if 'analysis' in data:
                print(f"üìã –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏—Ç: {list(data['analysis'].keys())}")
            if 'ohlc' in data:
                print(f"üìä OHLC –¥–∞–Ω–Ω—ã—Ö: {len(data['ohlc'])} –∑–∞–ø–∏—Å–µ–π")
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {response.status_code}")
            try:
                error_data = response.json()
                print(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                print(f"üìã –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

def test_analysis_without_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        print("üîì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        headers = {
            'Content-Type': 'application/json'
        }
        
        body = {
            "symbol": "BTCUSDT",
            "interval": "4h", 
            "limit": 144,
            "indicators": ["RSI", "MACD"]
        }
        
        response = requests.post(
            f"{API_URL}/api/analyze",
            headers=headers,
            json=body,
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ –ê–ù–ê–õ–ò–ó –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –†–ê–ë–û–¢–ê–ï–¢!")
            return True
        else:
            print(f"‚ùå –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            try:
                error_data = response.json()
                print(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                print(f"üìã –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîó API URL: {API_URL}")
    print()
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    print("üìã –¢–ï–°–¢ 1: –ê–Ω–∞–ª–∏–∑ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
    print("-" * 30)
    auth_result = test_analysis_with_auth()
    print()
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
    print("üìã –¢–ï–°–¢ 2: –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("-" * 30)
    no_auth_result = test_analysis_without_auth()
    print()
    
    # –ò—Ç–æ–≥–∏
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: {'–†–ê–ë–û–¢–ê–ï–¢' if auth_result else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {'–†–ê–ë–û–¢–ê–ï–¢' if no_auth_result else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print()
    
    if auth_result or no_auth_result:
        print("üéâ API –ê–ù–ê–õ–ò–ó–ê –†–ê–ë–û–¢–ê–ï–¢!")
        if not no_auth_result:
            print("‚ö†Ô∏è  –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    else:
        print("üö® API –ê–ù–ê–õ–ò–ó–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Google Cloud Run")
    
    return auth_result or no_auth_result

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
