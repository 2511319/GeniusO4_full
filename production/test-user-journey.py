#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—É—Ç–µ–π ChartGenius
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import requests
import json
import time
from urllib.parse import urlparse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FRONTEND_URL = "https://chartgenius-frontend-169129692197.europe-west1.run.app"
API_URL = "https://chartgenius-api-169129692197.europe-west1.run.app"
BOT_URL = "https://chartgenius-bot-new-169129692197.europe-west1.run.app"

def test_scenario(name, test_func):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {name}")
    print("=" * 60)
    try:
        result = test_func()
        status = "‚úÖ PASS" if result['success'] else "‚ùå FAIL"
        print(f"   –°—Ç–∞—Ç—É—Å: {status}")
        if 'details' in result:
            for detail in result['details']:
                print(f"   {detail}")
        return result['success']
    except Exception as e:
        print(f"   –°—Ç–∞—Ç—É—Å: ‚ùå ERROR")
        print(f"   –û—à–∏–±–∫–∞: {e}")
        return False

def test_desktop_browser_scenario():
    """–¢–µ—Å—Ç: Desktop –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    details = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend
    response = requests.get(FRONTEND_URL, timeout=10)
    if response.status_code == 200:
        details.append("‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        details.append(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        return {'success': False, 'details': details}
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ HTML –µ—Å—Ç—å Telegram script
    if 'telegram-web-app.js' in response.text:
        details.append("‚úÖ Telegram WebApp script –ø–æ–¥–∫–ª—é—á–µ–Ω")
    else:
        details.append("‚ùå Telegram WebApp script –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Telegram
    if '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Telegram' in response.text or '–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram' in response.text:
        details.append("‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ Telegram –Ω–∞–π–¥–µ–Ω–∞")
    else:
        details.append("‚ùå –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'Telegram' in response.text and ('–≤–æ–π—Ç–∏' in response.text.lower() or 'login' in response.text.lower()):
        details.append("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        details.append("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    return {'success': True, 'details': details}

def test_telegram_bot_scenario():
    """–¢–µ—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å Telegram –±–æ—Ç–æ–º"""
    details = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    try:
        response = requests.get(f"{BOT_URL}/health", timeout=10)
        if response.status_code == 200:
            details.append("‚úÖ Telegram –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
            bot_info = response.json()
            details.append(f"   –í–µ—Ä—Å–∏—è: {bot_info.get('version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            details.append(f"   –†–µ–∂–∏–º: {bot_info.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            details.append(f"‚ùå Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return {'success': False, 'details': details}
    except Exception as e:
        details.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return {'success': False, 'details': details}
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    try:
        response = requests.get(f"{BOT_URL}/webhook-info", timeout=10)
        if response.status_code == 200:
            webhook_info = response.json()
            details.append("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            details.append(f"   URL: {webhook_info.get('url', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            details.append(f"   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {webhook_info.get('pending_update_count', 0)}")
        else:
            details.append("‚ùå Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        details.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")
    
    return {'success': True, 'details': details}

def test_webapp_authentication_scenario():
    """–¢–µ—Å—Ç: WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API"""
    details = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
        response = requests.post(
            f"{API_URL}/api/auth/webapp-token",
            headers={'Content-Type': 'text/plain'},
            data="test_data",
            timeout=10
        )
        
        if response.status_code == 401:
            details.append("‚úÖ API endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            details.append("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
        else:
            details.append(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response.status_code}")
            
    except Exception as e:
        details.append(f"‚ùå –û—à–∏–±–∫–∞ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return {'success': False, 'details': details}
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    try:
        response = requests.options(
            f"{API_URL}/api/auth/webapp-token",
            headers={
                'Origin': 'https://web.telegram.org',
                'Access-Control-Request-Method': 'POST'
            },
            timeout=10
        )
        
        if 'access-control-allow-origin' in response.headers:
            details.append("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Telegram")
        else:
            details.append("‚ö†Ô∏è CORS –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
    except Exception as e:
        details.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CORS: {e}")
    
    return {'success': True, 'details': details}

def test_api_functionality():
    """–¢–µ—Å—Ç: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API"""
    details = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        response = requests.get(f"{API_URL}/testdata", timeout=10)
        if response.status_code == 200:
            data = response.json()
            details.append("‚úÖ API —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
            details.append(f"   –°–∏–º–≤–æ–ª: {data.get('symbol', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            details.append(f"‚ùå API —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {response.status_code}")
            return {'success': False, 'details': details}
    except Exception as e:
        details.append(f"‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {'success': False, 'details': details}
    
    return {'success': True, 'details': details}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—É—Ç–µ–π ChartGenius")
    print("=" * 60)
    
    scenarios = [
        ("Desktop –±—Ä–∞—É–∑–µ—Ä (–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞)", test_desktop_browser_scenario),
        ("Telegram –±–æ—Ç (–∫–æ–º–∞–Ω–¥—ã –∏ webhook)", test_telegram_bot_scenario),
        ("WebApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (API)", test_webapp_authentication_scenario),
        ("API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_api_functionality),
    ]
    
    results = []
    for name, test_func in scenarios:
        success = test_scenario(name, test_func)
        results.append(success)
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    success_rate = (passed / total) * 100
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    print("\nüîç –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ü–£–¢–ï–ô:")
    print("=" * 60)
    
    print("1. üñ•Ô∏è DESKTOP –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
    print("   ‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ ‚Üí –í–∏–¥–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞")
    print("   ‚Ä¢ window.Telegram.WebApp = undefined (–ù–ï–¢ Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)")
    print("   ‚Ä¢ –î–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Telegram' ‚Üí –û—Ç–∫—Ä—ã—Ç—å Telegram Desktop")
    print("   ‚Ä¢ –ù–∞–π—Ç–∏ –±–æ—Ç–∞ @Chart_Genius_bot ‚Üí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start")
    print("   ‚Ä¢ –ù–∞–∂–∞—Ç—å '–û—Ç–∫—Ä—ã—Ç—å ChartGenius' ‚Üí –¢–û–õ–¨–ö–û –¢–û–ì–î–ê WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print("\n2. üì± MOBILE –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨:")
    print("   ‚Ä¢ –¢–æ –∂–µ —Å–∞–º–æ–µ - –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("   ‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä –ù–ï –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Telegram WebApp API")
    
    print("\n3. ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ (Telegram WebApp):")
    print("   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –£–ñ–ï –≤ Telegram ‚Üí –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–æ—Ç–∞")
    print("   ‚Ä¢ window.Telegram.WebApp –¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí initData –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Üí –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ dashboard")
    
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    if success_rate >= 75:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è Telegram WebApp")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ –∫–æ–¥–µ, –∞ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        print("‚úÖ Telegram WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ Telegram")
    else:
        print("‚ùå –ï—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô –ø—É—Ç—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞")
    print("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ WebApp –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")

if __name__ == "__main__":
    main()
