# production/bot/app.py

import os
import sys
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google.cloud import secretmanager, firestore
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
import json


class ProductionBotConfig:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞"""

    def __init__(self):
        # Cloud Run –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç GOOGLE_CLOUD_PROJECT
        self.gcp_project_id = os.getenv("GCP_PROJECT_ID") or os.getenv("GOOGLE_CLOUD_PROJECT") or "chartgenius-444017"
        self.environment = "production"
        self.admin_id = int(os.getenv("ADMIN_TELEGRAM_ID", "299820674"))
        self.webapp_url = self._get_webapp_url()
        self.webhook_url = self._get_webhook_url()
        self.use_webhook = os.getenv("USE_WEBHOOK", "true").lower() == "true"
        # Cloud Run —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç PORT, –∏—Å–ø–æ–ª—å–∑—É–µ–º SERVER_PORT –∏–ª–∏ fallback –Ω–∞ PORT
        self.port = int(os.getenv("SERVER_PORT", os.getenv("PORT", "8080")))

        # –û—Ç–∫–ª—é—á–∞–µ–º Firestore –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        self.db = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.logger = logging.getLogger("ChartGeniusBotConfig")
        self.logger.info(f"WebApp URL: {repr(self.webapp_url)}")
        self.logger.info(f"Webhook URL: {repr(self.webhook_url)}")
        self.logger.info(f"Port: {self.port}")
        self.logger.info(f"Use webhook: {self.use_webhook}")
        
    def _get_webapp_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        region = os.getenv("GCP_REGION", "europe-west1")
        url = f"https://chartgenius-frontend-169129692197.{region}.run.app"
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ \r –∏ \n
        return self._clean_url(url)

    def _get_webhook_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è webhook"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π URL –±–æ—Ç–∞
        url = "https://chartgenius-bot-new-169129692197.europe-west1.run.app/webhook"
        return self._clean_url(url)

    def _clean_url(self, url: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–∫–ª—é—á–∞—è \r"""
        if not url:
            return ""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        cleaned = url.replace('\r', '').replace('\n', '').replace('\t', '').strip()
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –≤—Å–µ—Ö —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (ASCII < 32)
        cleaned = ''.join(char for char in cleaned if ord(char) >= 32)
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ URL
        cleaned = ' '.join(cleaned.split())
        return cleaned

    def _init_firestore(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firestore –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if self.gcp_project_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º default credentials –¥–ª—è Cloud Run
                return firestore.Client()
            else:
                logging.warning("GCP_PROJECT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, Firestore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return None
        except Exception as e:
            logging.warning(f"Firestore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return None
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        
        # –û—Ç–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger("httpx").setLevel(logging.WARNING)
        logging.getLogger("telegram").setLevel(logging.INFO)
        
    def get_secret(self, secret_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ Google Cloud Secret Manager"""
        try:
            client = secretmanager.SecretManagerServiceClient()
            name = f"projects/{self.gcp_project_id}/secrets/{secret_name}/versions/latest"
            response = client.access_secret_version(request={"name": name})
            # –û—á–∏—â–∞–µ–º —Å–µ–∫—Ä–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è \r, \n)
            secret_value = response.payload.data.decode("UTF-8")
            return secret_value.replace('\r', '').replace('\n', '').strip()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ {secret_name}: {e}")
            raise
    
    def get_telegram_bot_token(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if token:
            return token.replace('\r', '').replace('\n', '').strip()

        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Secret Manager
        try:
            return self.get_secret("telegram-bot-token")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {e}")
            raise


class ChartGeniusProductionBot:
    """–ü—Ä–æ–¥–∞–∫—à–Ω –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ ChartGenius"""
    
    def __init__(self):
        self.config = ProductionBotConfig()
        self.logger = logging.getLogger("ChartGeniusBot")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Secret Manager
        self.token = self.config.get_telegram_bot_token()
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        self.logger.info("ChartGenius Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("webapp", self.webapp_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Firestore –æ—Ç–∫–ª—é—á–µ–Ω)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å WebApp
            keyboard = [
                [InlineKeyboardButton(
                    "üöÄ –û—Ç–∫—Ä—ã—Ç—å ChartGenius",
                    web_app=WebAppInfo(url=self.config.webapp_url)
                )]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChartGenius, {user.first_name}!\n\n"
                "üîç –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤\n"
                "üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
                "üéØ –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑:"
            )
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ <b>ChartGenius Bot - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
            "/webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
            "üîó <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
            "–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å ChartGenius' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏–∑—É.\n\n"
            "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def webapp_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /webapp"""
        keyboard = [
            [InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å ChartGenius",
                web_app=WebAppInfo(url=self.config.webapp_url)
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Firestore
            db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞" if self.config.db else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            status_text = (
                "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã ChartGenius</b>\n\n"
                f"ü§ñ –ë–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
                f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_status}\n"
                f"üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ\n"
                f"üïê –í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC\n"
                f"üè∑Ô∏è –í–µ—Ä—Å–∏—è: 1.0.15\n"
                f"üåç –†–µ–≥–∏–æ–Ω: {os.getenv('GCP_REGION', 'europe-west1')}"
            )
            
            await update.message.reply_text(status_text, parse_mode='HTML')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ status_command: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "üëã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å ChartGenius –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ /webapp –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
        )
    
    async def register_user(self, user):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore"""
        try:
            if not self.config.db:
                self.logger.warning("Firestore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            telegram_id = str(user.id)
            user_ref = self.config.db.collection('users').document(telegram_id)
            user_doc = user_ref.get()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            role = "admin" if user.id == self.config.admin_id else "user"
            
            user_data = {
                'telegram_id': telegram_id,
                'username': user.username or '',
                'first_name': user.first_name or '',
                'last_name': user.last_name or '',
                'role': role,
                'last_seen': firestore.SERVER_TIMESTAMP
            }
            
            if user_doc.exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_ref.update({
                    'username': user_data['username'],
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                    'last_seen': user_data['last_seen']
                })
                self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data['created_at'] = firestore.SERVER_TIMESTAMP
                user_ref.set(user_data)
                self.logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id} —Å —Ä–æ–ª—å—é {role}")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}", exc_info=context.error)
        
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞"""
        try:
            await self.application.bot.set_webhook(
                url=self.config.webhook_url,
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
            self.logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.config.webhook_url}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            raise

    async def remove_webhook(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
        try:
            await self.application.bot.delete_webhook(drop_pending_updates=True)
            self.logger.info("Webhook —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")

    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ"""
        self.logger.info("–ó–∞–ø—É—Å–∫ ChartGenius –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ...")
        self.application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.config.use_webhook:
            self.logger.info("–ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ...")
            # Webhook —Ä–µ–∂–∏–º –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ FastAPI
            return
        else:
            self.run_polling()


# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
app = FastAPI(
    title="ChartGenius Telegram Bot",
    description="–ü—Ä–æ–¥–∞–∫—à–Ω Telegram –±–æ—Ç –¥–ª—è ChartGenius",
    version="1.0.15"
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–æ—Ç–∞
bot_instance = None

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global bot_instance
    try:
        bot_instance = ChartGeniusProductionBot()

        # –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Application –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
        await bot_instance.application.initialize()

        # –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        logging.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å webhook")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global bot_instance
    if bot_instance:
        try:
            if bot_instance.config.use_webhook:
                await bot_instance.remove_webhook()

            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É Application
            await bot_instance.application.shutdown()

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

@app.post("/webhook")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        if not bot_instance:
            raise HTTPException(status_code=500, detail="–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        body = await request.body()
        update_data = json.loads(body.decode('utf-8'))

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(update_data, bot_instance.application.bot)

        if update:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await bot_instance.application.process_update(update)

        return JSONResponse(content={"status": "ok"})

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Cloud Run"""
    return {
        "status": "healthy",
        "mode": "webhook" if bot_instance and bot_instance.config.use_webhook else "polling",
        "version": "1.0.15"
    }

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "ChartGenius Telegram Bot",
        "version": "1.0.15",
        "mode": "webhook" if bot_instance and bot_instance.config.use_webhook else "polling"
    }

@app.post("/setup-webhook")
async def setup_webhook_endpoint():
    """Endpoint –¥–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
    try:
        if not bot_instance:
            raise HTTPException(status_code=500, detail="–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        await bot_instance.setup_webhook()
        return {"status": "success", "message": "Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {str(e)}")

@app.get("/webhook-info")
async def webhook_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook"""
    try:
        if not bot_instance:
            raise HTTPException(status_code=500, detail="–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        webhook_info = await bot_instance.application.bot.get_webhook_info()
        return {
            "url": webhook_info.url,
            "pending_update_count": webhook_info.pending_update_count,
            "max_connections": webhook_info.max_connections,
            "allowed_updates": webhook_info.allowed_updates
        }

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {str(e)}")

if __name__ == "__main__":
    try:
        config = ProductionBotConfig()

        if config.use_webhook:
            # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook
            logging.info(f"–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {config.port}")
            uvicorn.run(
                app,
                host="0.0.0.0",
                port=config.port,
                workers=1,
                access_log=False,
                log_level="info"
            )
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ polling —Ä–µ–∂–∏–º–µ
            bot = ChartGeniusProductionBot()
            bot.run_polling()

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)
