#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram WebApp
–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import hmac
import hashlib
from urllib.parse import parse_qsl, unquote

# –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REAL_INIT_DATA = "query_id=AAGC5t4RAAAAAILm3hEdkibA&user=%7B%22id%22%3A299820674%2C%22first_name%22%3A%22%D0%94%D0%B8%D0%BC%D0%B0%22%2C%22last_name%22%3A%22%22%2C%22username%22%3A%22Dushnar%22%2C%22language_code%22%3A%22ru%22%2C%22is_premium%22%3Atrue%2C%22allows_write_to_pm%22%3Atrue%2C%22photo_url%22%3A%22https%3A%5C%2F%5C%2Ft.me%5C%2Fi%5C%2Fuserpic%5C%2F320%5C%2FXV2IBaxMPch2a19AJW5Q2zF3ccAOR6HvE9B7VMzx34k.svg%22%7D&auth_date=1750664616&signature=xWxiOLmAz1UH--VXWE-MpbHRVCA_2o3zXvytMlZECFQ1ZhFeXS7OGm5z84RElDyWFp59jwTvv3Sw4SEveX_BCg&hash=38c4dd29c1f05407714aa91bd9b6a87408ac72bab0dab215e700ec688725c0ac"

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
BOT_TOKEN = "7279183061:AAERodVAje0VnifJmUJWeq0EM4FxMueXrB0"

def test_validation_method_1():
    """–ú–µ—Ç–æ–¥ 1: –ë–µ–∑ URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ –Ω–∞—à–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ)"""
    print("üß™ –ú–µ—Ç–æ–¥ 1: –ë–µ–∑ URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    parsed_data = dict(parse_qsl(REAL_INIT_DATA))
    received_hash = parsed_data.pop('hash')
    
    data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])
    
    print(f"üìã Data check string (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   {data_check_string[:200]}...")
    
    secret_key = hmac.new(
        "WebAppData".encode(),
        BOT_TOKEN.encode(),
        hashlib.sha256
    ).digest()
    
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()
    
    print(f"üîë Received hash:  {received_hash}")
    print(f"üîë Calculated hash: {calculated_hash}")
    print(f"‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç: {received_hash == calculated_hash}")
    
    return received_hash == calculated_hash

def test_validation_method_2():
    """–ú–µ—Ç–æ–¥ 2: –° URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print("\nüß™ –ú–µ—Ç–æ–¥ 2: –° URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    
    decoded_data = unquote(REAL_INIT_DATA)
    parsed_data = dict(parse_qsl(decoded_data))
    received_hash = parsed_data.pop('hash')
    
    data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(parsed_data.items())])
    
    print(f"üìã Data check string (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   {data_check_string[:200]}...")
    
    secret_key = hmac.new(
        "WebAppData".encode(),
        BOT_TOKEN.encode(),
        hashlib.sha256
    ).digest()
    
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()
    
    print(f"üîë Received hash:  {received_hash}")
    print(f"üîë Calculated hash: {calculated_hash}")
    print(f"‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç: {received_hash == calculated_hash}")
    
    return received_hash == calculated_hash

def test_validation_method_3():
    """–ú–µ—Ç–æ–¥ 3: –ö–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º gist (split & join)"""
    print("\nüß™ –ú–µ—Ç–æ–¥ 3: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (split & join)")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
    encoded = unquote(REAL_INIT_DATA)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    arr = encoded.split('&')
    hash_index = arr.index([s for s in arr if s.startswith('hash=')][0])
    hash_value = arr.pop(hash_index).split('=')[1]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º
    arr.sort()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
    data_check_string = '\n'.join(arr)
    
    print(f"üìã Data check string (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(f"   {data_check_string[:200]}...")
    
    secret_key = hmac.new(
        "WebAppData".encode(),
        BOT_TOKEN.encode(),
        hashlib.sha256
    ).digest()
    
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode(),
        hashlib.sha256
    ).hexdigest()
    
    print(f"üîë Received hash:  {hash_value}")
    print(f"üîë Calculated hash: {calculated_hash}")
    print(f"‚úÖ –°–æ–≤–ø–∞–¥–∞—é—Ç: {hash_value == calculated_hash}")
    
    return hash_value == calculated_hash

def analyze_photo_url():
    """–ê–Ω–∞–ª–∏–∑ photo_url –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    print("\nüîç –ê–ù–ê–õ–ò–ó PHOTO_URL:")
    print("=" * 60)
    
    # –ë–µ–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    parsed_raw = dict(parse_qsl(REAL_INIT_DATA))
    user_raw = parsed_raw.get('user', '')
    print(f"üìã User (raw): {user_raw[:100]}...")
    
    # –° –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    parsed_decoded = dict(parse_qsl(unquote(REAL_INIT_DATA)))
    user_decoded = parsed_decoded.get('user', '')
    print(f"üìã User (decoded): {user_decoded[:100]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º photo_url
    import json
    try:
        user_data_decoded = json.loads(user_decoded)
        photo_url = user_data_decoded.get('photo_url', '')
        print(f"üñºÔ∏è Photo URL: {photo_url}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç \\/ : {'\\/' in photo_url}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç %5C: {'%5C' in user_raw}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

if __name__ == "__main__":
    print("üîç –û–¢–õ–ê–î–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò TELEGRAM WEBAPP")
    print("=" * 60)
    
    analyze_photo_url()
    
    print("\n" + "=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 60)
    
    method1_result = test_validation_method_1()
    method2_result = test_validation_method_2()
    method3_result = test_validation_method_3()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)
    print(f"–ú–µ—Ç–æ–¥ 1 (–±–µ–∑ URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è): {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if method1_result else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"–ú–µ—Ç–æ–¥ 2 (—Å URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º): {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if method2_result else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"–ú–µ—Ç–æ–¥ 3 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π gist): {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if method3_result else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if method1_result:
        print("\nüéâ –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ 1 (–±–µ–∑ URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)")
    elif method2_result:
        print("\nüéâ –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ 2 (—Å URL-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)")
    elif method3_result:
        print("\nüéâ –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ 3 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)")
    else:
        print("\n‚ùå –ù–ò –û–î–ò–ù –ú–ï–¢–û–î –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ bot token!")
