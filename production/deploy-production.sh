#!/usr/bin/env bash
# production/deploy-production.sh
# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ChartGenius –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞ Google Cloud Platform

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env_vars() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ -z "$GCP_PROJECT_ID" ]; then
        log_error "GCP_PROJECT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if [ -z "$GCP_REGION" ]; then
        log_warning "GCP_REGION –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è europe-west1"
        export GCP_REGION="europe-west1"
    fi
    
    log_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
    log_info "–ü—Ä–æ–µ–∫—Ç: $GCP_PROJECT_ID"
    log_info "–†–µ–≥–∏–æ–Ω: $GCP_REGION"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cloud CLI
check_gcloud() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Google Cloud CLI..."
    
    if ! command -v gcloud &> /dev/null; then
        log_error "Google Cloud CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | grep -q .; then
        log_error "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Cloud"
        log_info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: gcloud auth login"
        exit 1
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    gcloud config set project $GCP_PROJECT_ID
    
    log_success "Google Cloud CLI –≥–æ—Ç–æ–≤"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
check_docker() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        exit 1
    fi
    
    log_success "Docker –≥–æ—Ç–æ–≤"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
check_secrets() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ Secret Manager..."
    
    secrets=("openai-api-key" "jwt-secret-key" "cryptocompare-api-key" "telegram-bot-token")
    
    for secret in "${secrets[@]}"; do
        if ! gcloud secrets describe $secret &> /dev/null; then
            log_error "–°–µ–∫—Ä–µ—Ç $secret –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Secret Manager"
            log_info "–°–æ–∑–¥–∞–π—Ç–µ —Å–µ–∫—Ä–µ—Ç: echo 'your-secret-value' | gcloud secrets create $secret --data-file=-"
            exit 1
        fi
    done
    
    log_success "–í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã"
}

# –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API
enable_apis() {
    log_info "–í–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö Google Cloud API..."
    
    apis=(
        "run.googleapis.com"
        "containerregistry.googleapis.com"
        "secretmanager.googleapis.com"
        "firestore.googleapis.com"
        "logging.googleapis.com"
        "monitoring.googleapis.com"
    )
    
    for api in "${apis[@]}"; do
        log_info "–í–∫–ª—é—á–µ–Ω–∏–µ $api..."
        gcloud services enable $api
    done
    
    log_success "API –≤–∫–ª—é—á–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    VERSION=${VERSION:-"1.0.0"}
    
    # Backend
    log_info "–°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞..."
    docker build -t gcr.io/$GCP_PROJECT_ID/chartgenius-api:$VERSION \
        -f production/backend/Dockerfile .
    
    # Frontend
    log_info "–°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞..."
    docker build -t gcr.io/$GCP_PROJECT_ID/chartgenius-frontend:$VERSION \
        -f production/frontend/Dockerfile .
    
    # Bot
    log_info "–°–±–æ—Ä–∫–∞ bot –æ–±—Ä–∞–∑–∞..."
    docker build -t gcr.io/$GCP_PROJECT_ID/chartgenius-bot:$VERSION \
        -f production/bot/Dockerfile .
    
    log_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤
push_images() {
    log_info "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ Container Registry..."
    
    VERSION=${VERSION:-"1.0.0"}
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GCR
    gcloud auth configure-docker --quiet
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    docker push gcr.io/$GCP_PROJECT_ID/chartgenius-api:$VERSION
    docker push gcr.io/$GCP_PROJECT_ID/chartgenius-frontend:$VERSION
    docker push gcr.io/$GCP_PROJECT_ID/chartgenius-bot:$VERSION
    
    log_success "–û–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
deploy_services() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Cloud Run..."
    
    VERSION=${VERSION:-"1.0.0"}
    
    # Backend API
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ API backend..."
    gcloud run deploy chartgenius-api \
        --image gcr.io/$GCP_PROJECT_ID/chartgenius-api:$VERSION \
        --platform managed \
        --region $GCP_REGION \
        --allow-unauthenticated \
        --memory 1Gi \
        --cpu 1 \
        --max-instances 10 \
        --min-instances 0 \
        --concurrency 80 \
        --timeout 300 \
        --set-env-vars="GCP_PROJECT_ID=$GCP_PROJECT_ID,GCP_REGION=$GCP_REGION,ENVIRONMENT=production,ADMIN_TELEGRAM_ID=299820674" \
        --set-secrets="OPENAI_API_KEY=openai-api-key:latest,JWT_SECRET_KEY=jwt-secret-key:latest,CRYPTOCOMPARE_API_KEY=cryptocompare-api-key:latest" \
        --quiet
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL API
    API_URL=$(gcloud run services describe chartgenius-api --platform=managed --region=$GCP_REGION --format='value(status.url)')
    log_info "API URL: $API_URL"
    
    # Frontend
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ frontend..."
    gcloud run deploy chartgenius-frontend \
        --image gcr.io/$GCP_PROJECT_ID/chartgenius-frontend:$VERSION \
        --platform managed \
        --region $GCP_REGION \
        --allow-unauthenticated \
        --memory 512Mi \
        --cpu 1 \
        --max-instances 5 \
        --min-instances 0 \
        --concurrency 100 \
        --timeout 60 \
        --set-env-vars="API_URL=$API_URL" \
        --quiet
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL Frontend
    FRONTEND_URL=$(gcloud run services describe chartgenius-frontend --platform=managed --region=$GCP_REGION --format='value(status.url)')
    log_info "Frontend URL: $FRONTEND_URL"
    
    # Telegram Bot
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞..."
    gcloud run deploy chartgenius-bot \
        --image gcr.io/$GCP_PROJECT_ID/chartgenius-bot:$VERSION \
        --platform managed \
        --region $GCP_REGION \
        --no-allow-unauthenticated \
        --memory 512Mi \
        --cpu 1 \
        --min-instances 1 \
        --max-instances 1 \
        --concurrency 1 \
        --timeout 3600 \
        --set-env-vars="GCP_PROJECT_ID=$GCP_PROJECT_ID,GCP_REGION=$GCP_REGION,ENVIRONMENT=production,ADMIN_TELEGRAM_ID=299820674" \
        --set-secrets="TELEGRAM_BOT_TOKEN=telegram-bot-token:latest" \
        --quiet
    
    log_success "–°–µ—Ä–≤–∏—Å—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
    log_success "Frontend: $FRONTEND_URL"
    log_success "API: $API_URL"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
verify_deployment() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    API_URL=$(gcloud run services describe chartgenius-api --platform=managed --region=$GCP_REGION --format='value(status.url)')
    if curl -f "$API_URL/health" &> /dev/null; then
        log_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_error "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
    FRONTEND_URL=$(gcloud run services describe chartgenius-frontend --platform=managed --region=$GCP_REGION --format='value(status.url)')
    if curl -f "$FRONTEND_URL/health" &> /dev/null; then
        log_success "Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_error "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        exit 1
    fi
    
    log_success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log_info "–ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ChartGenius –≤ –ø—Ä–æ–¥–∞–∫—à–Ω..."
    
    check_env_vars
    check_gcloud
    check_docker
    check_secrets
    enable_apis
    build_images
    push_images
    deploy_services
    verify_deployment
    
    log_success "üéâ ChartGenius —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–Ω!"
    log_info "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º–µ–Ω—ã –∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
