# production/frontend/nginx.conf
# Продакшн конфигурация nginx для ChartGenius Frontend

server {
    listen 8080;
    server_name _;
    
    # Корневая директория
    root /usr/share/nginx/html;
    index index.html;
    
    # Настройки безопасности
    server_tokens off;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ${BACKEND_URL} https://api.telegram.org;" always;
    
    # Gzip сжатие
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Кэширование статических ресурсов
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
        
        # Предварительная проверка существования файла
        try_files $uri =404;
    }
    
    # Кэширование HTML файлов
    location ~* \.html$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header X-Content-Type-Options "nosniff";
    }
    
    # API запросы теперь идут напрямую к API сервису через CORS
    # Убираем проксирование - используем прямые вызовы из JavaScript

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Основная логика маршрутизации для SPA
    location / {
        try_files $uri $uri/ /index.html;
        
        # Предотвращение кэширования index.html
        location = /index.html {
            expires -1;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header X-App-Version "1.0.16";
            add_header Last-Modified $date_gmt;
            add_header ETag "";
            if_modified_since off;
        }
    }

    # JavaScript файлы - ПОЛНОЕ отключение кэша для исправления проблемы
    location ~* \.js$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        add_header Pragma "no-cache";
        add_header Expires "0";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header X-App-Version "1.0.16";
        add_header Last-Modified $date_gmt;
        add_header ETag "";
        if_modified_since off;
    }

    # Кэширование других статических файлов
    location ~* \.(css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
    }

    # Запрет доступа к скрытым файлам
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Запрет доступа к служебным файлам
    location ~ ^/(package\.json|package-lock\.json|yarn\.lock|\.env.*|vite\.config\.js)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Настройки логирования
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;
    
    # Ограничения размера запроса
    client_max_body_size 10M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    
    # Настройки keep-alive
    keepalive_timeout 65s;
    keepalive_requests 100;
}
