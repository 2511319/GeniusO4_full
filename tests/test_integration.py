#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è ChartGenius
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import pytest
import asyncio
import aiohttp
import json
import os
from datetime import datetime, timedelta
from unittest.mock import patch, MagicMock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_API_URL = os.getenv("TEST_API_URL", "http://localhost:8000")
TEST_TELEGRAM_ID = "123456789"
TEST_JWT_SECRET = "test_jwt_secret_key_for_testing_purposes_only"

class TestSystemIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    @pytest.fixture
    def mock_telegram_user(self):
        """–ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        return {
            "id": TEST_TELEGRAM_ID,
            "first_name": "Test",
            "last_name": "User",
            "username": "test_user",
            "photo_url": "",
            "auth_date": str(int(datetime.utcnow().timestamp()))
        }
    
    @pytest.fixture
    async def http_session(self):
        """HTTP —Å–µ—Å—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        async with aiohttp.ClientSession() as session:
            yield session
    
    async def test_health_endpoints(self, http_session):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        endpoints = [
            f"{TEST_API_URL}/health",
            f"{TEST_API_URL}/",
        ]
        
        for endpoint in endpoints:
            try:
                async with http_session.get(endpoint) as response:
                    assert response.status in [200, 404], f"Endpoint {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    print(f"‚úÖ {endpoint} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è {endpoint} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    async def test_telegram_auth_flow(self, http_session, mock_telegram_user):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""
        # –î–æ–±–∞–≤–ª—è–µ–º hash –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        import hashlib
        import hmac
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ hash –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram
        secret_key = hashlib.sha256("test_bot_token".encode()).digest()
        data_check_string = "\n".join(f"{k}={mock_telegram_user[k]}" for k in sorted(mock_telegram_user.keys()))
        mock_telegram_user["hash"] = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        try:
            async with http_session.post(f"{TEST_API_URL}/auth/telegram", json=mock_telegram_user) as response:
                if response.status == 200:
                    data = await response.json()
                    assert "access_token" in data
                    print("‚úÖ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return data["access_token"]
                else:
                    print(f"‚ö†Ô∏è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status}")
                    return None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None
    
    async def test_subscription_system(self, http_session):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        headers = {"X-Telegram-Id": TEST_TELEGRAM_ID}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
            async with http_session.get(f"{TEST_API_URL}/api/user/subscription", headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    assert "level" in data
                    assert "is_active" in data
                    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['level']}")
                else:
                    print(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            async with http_session.post(f"{TEST_API_URL}/api/user/subscription/create", headers=headers) as response:
                if response.status == 200:
                    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response.status}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    async def test_analysis_system(self, http_session):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞"""
        headers = {"X-Telegram-Id": TEST_TELEGRAM_ID}
        
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            async with http_session.post(f"{TEST_API_URL}/api/analysis/simple", headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    assert "analysis" in data
                    assert "primary_analysis" in data
                    print("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                elif response.status == 402:
                    print("‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É (–æ–∂–∏–¥–∞–µ–º–æ)")
                else:
                    print(f"‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
            
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_request = {
                "symbol": "BTCUSDT",
                "interval": "4h",
                "limit": 100,
                "indicators": ["RSI", "MACD"]
            }
            
            async with http_session.post(f"{TEST_API_URL}/api/analyze", 
                                       json=analysis_request, 
                                       headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    assert "analysis" in data
                    print("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                elif response.status == 401:
                    print("‚ÑπÔ∏è –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç JWT —Ç–æ–∫–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
                else:
                    print(f"‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def test_user_dashboard_api(self, http_session):
        """–¢–µ—Å—Ç API –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        headers = {"X-Telegram-Id": TEST_TELEGRAM_ID}
        
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            async with http_session.get(f"{TEST_API_URL}/api/user/profile", headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    assert "id" in data
                    print("‚úÖ API –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"‚ö†Ô∏è API –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response.status}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
            async with http_session.get(f"{TEST_API_URL}/api/user/analyses", headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    assert "analyses" in data
                    print("‚úÖ API –∞–Ω–∞–ª–∏–∑–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print(f"‚ö†Ô∏è API –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {response.status}")
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")

class TestBotIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞"""
    
    def test_bot_webhook_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã webhook –±–æ—Ç–∞"""
        from bot.bot import app, handle_webhook
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
        assert app is not None
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    def test_bot_commands(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        from bot.bot import start, handle_callback
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        assert callable(start)
        assert callable(handle_callback)
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")

class TestFrontendIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Frontend"""
    
    async def test_frontend_build(self):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∫–∏ frontend"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        frontend_files = [
            "frontend/package.json",
            "frontend/src/App.jsx",
            "frontend/src/pages/Home.jsx",
            "frontend/src/pages/UserDashboard.jsx"
        ]
        
        for file_path in frontend_files:
            assert os.path.exists(file_path), f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ frontend –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

async def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ ChartGenius")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    system_tests = TestSystemIntegration()
    
    async with aiohttp.ClientSession() as session:
        print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
        await system_tests.test_health_endpoints(session)
        
        print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        token = await system_tests.test_telegram_auth_flow(session, {
            "id": TEST_TELEGRAM_ID,
            "first_name": "Test",
            "last_name": "User",
            "username": "test_user",
            "photo_url": "",
            "auth_date": str(int(datetime.utcnow().timestamp()))
        })
        
        print("\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫...")
        await system_tests.test_subscription_system(session)
        
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞...")
        await system_tests.test_analysis_system(session)
        
        print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞...")
        await system_tests.test_user_dashboard_api(session)
    
    # –¢–µ—Å—Ç—ã –±–æ—Ç–∞
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
    bot_tests = TestBotIntegration()
    bot_tests.test_bot_webhook_structure()
    bot_tests.test_bot_commands()
    
    # –¢–µ—Å—Ç—ã frontend
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend...")
    frontend_tests = TestFrontendIntegration()
    await frontend_tests.test_frontend_build()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python tests/test_integration.py")
    print("2. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –≤ Google Cloud: scripts/setup_complete.sh")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")

if __name__ == "__main__":
    asyncio.run(run_integration_tests())
