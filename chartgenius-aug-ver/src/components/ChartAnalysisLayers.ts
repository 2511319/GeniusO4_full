// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–ª–æ—è–º–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
import { IChartApi, ISeriesApi, LineStyle } from 'lightweight-charts';
import {
  SupportResistanceLevel,
  TrendLine,
  ImbalanceZone,
  UnfinishedZone,
  CandlestickPattern,
  Divergence,
  ElliottWave,
  VirtualCandle,
  TradingStrategy,
  toTimestamp,
  sortAndDeduplicateData,
  COLORS,
  getTrendLineColor,
  getCandlestickPatternColor,
  getLineStyle,
} from '../utils/chartAnalysisUtils';

export class ChartAnalysisLayers {
  private chart: IChartApi;
  private candlestickSeries: ISeriesApi<"Candlestick">;
  private layers: Map<string, any[]> = new Map();

  constructor(chart: IChartApi, candlestickSeries: ISeriesApi<"Candlestick">) {
    this.chart = chart;
    this.candlestickSeries = candlestickSeries;
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª–æ–µ–≤
  clearAllLayers() {
    this.layers.forEach((layerItems) => {
      layerItems.forEach((item) => {
        if (item && typeof item.remove === 'function') {
          item.remove();
        }
      });
    });
    this.layers.clear();
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—è
  clearLayer(layerName: string) {
    const layerItems = this.layers.get(layerName);
    if (layerItems) {
      layerItems.forEach((item, index) => {
        if (item) {
          try {
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            const itemType = item.constructor?.name || 'Unknown';
            const hasRemove = typeof item.remove === 'function';

            console.log(`–£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç ${index} –≤ —Å–ª–æ–µ ${layerName}: —Ç–∏–ø=${itemType}, hasRemove=${hasRemove}`);

            // 1. –î–ª—è PriceLine –∏—Å–ø–æ–ª—å–∑—É–µ–º removePriceLine –Ω–∞ —Å–µ—Ä–∏–∏ (–ü–†–ò–û–†–ò–¢–ï–¢)
            // PriceLine —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ tradingRecommendations
            // fibonacci —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç AreaSeries + LineSeries, supportResistance –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LineSeries, unfinishedZones –∏ imbalances –∏—Å–ø–æ–ª—å–∑—É—é—Ç AreaSeries
            if (layerName === 'tradingRecommendations') {
              this.candlestickSeries.removePriceLine(item);
              console.log(`‚úÖ PriceLine ${index} –≤ —Å–ª–æ–µ ${layerName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ removePriceLine()`);
            }
            // 2. –î–ª—è —Å–µ—Ä–∏–π —Å –º–µ—Ç–æ–¥–æ–º remove() –∏—Å–ø–æ–ª—å–∑—É–µ–º item.remove()
            else if (hasRemove) {
              item.remove();
              console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${index} –≤ —Å–ª–æ–µ ${layerName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ remove()`);
            }
            // 3. –î–ª—è SeriesApi –±–µ–∑ –º–µ—Ç–æ–¥–∞ remove() –∏—Å–ø–æ–ª—å–∑—É–µ–º chart.removeSeries()
            // –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π –¥–ª—è LineSeries, CandlestickSeries, HistogramSeries
            else if (itemType === 'SeriesApi' || itemType.includes('Series')) {
              this.chart.removeSeries(item);
              console.log(`‚úÖ SeriesApi ${index} –≤ —Å–ª–æ–µ ${layerName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ chart.removeSeries()`);
            }
            // 4. –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ chart.removeSeries()
            else {
              // –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ TradingView - —ç—Ç–æ —Å–µ—Ä–∏–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ chart
              this.chart.removeSeries(item);
              console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${index} –≤ —Å–ª–æ–µ ${layerName} (—Ç–∏–ø: ${itemType}) —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ chart.removeSeries()`);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index} —Å–ª–æ—è ${layerName}:`, error);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è
            try {
              if (typeof item.remove === 'function') {
                item.remove();
                console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç ${index} –≤ —Å–ª–æ–µ ${layerName} —É–¥–∞–ª–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º —á–µ—Ä–µ–∑ remove()`);
              }
            } catch (secondError) {
              console.error(`‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, secondError);
            }
          }
        }
      });

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª–æ–µ–≤ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
      if (layerName === 'candlestickPatterns' || layerName === 'divergences' ||
          layerName === 'elliottWaves' || layerName === 'tradingRecommendations') {
        // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–∏–∏ —Å–≤–µ—á–µ–π
        this.candlestickSeries.setMarkers([]);
        console.log(`‚úÖ –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Å–ª–æ—è ${layerName} –æ—á–∏—â–µ–Ω—ã`);
      }

      this.layers.delete(layerName);
      console.log(`‚úÖ –°–ª–æ–π ${layerName} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω`);
    } else {
      console.log(`‚ÑπÔ∏è –°–ª–æ–π ${layerName} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç`);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
  addSupportResistanceLevels(supports: SupportResistanceLevel[], resistances: SupportResistanceLevel[]) {
    this.clearLayer('supportResistance');
    const layerItems: any[] = [];

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—É—á–µ–π
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º, –µ—Å–ª–∏ visibleRange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const timeScale = this.chart.timeScale();
    const visibleRange = timeScale.getVisibleRange();
    const currentTime = Date.now() / 1000;
    const futureTime = currentTime + (365 * 24 * 60 * 60); // +1 –≥–æ–¥ –≤ –±—É–¥—É—â–µ–µ
    const lastDataTime = visibleRange?.to || futureTime;

    console.log(`üìä –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è. Supports: ${supports.length}, Resistances: ${resistances.length}`);

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–ª—É—á–∏)
    supports.forEach((support, index) => {
      const startTime = toTimestamp(support.date);

      console.log(`üü¢ –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ${index + 1}: —É—Ä–æ–≤–µ–Ω—å ${support.level}, –¥–∞—Ç–∞ ${support.date}, timestamp ${startTime}`);

      // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Å–µ—Ä–∏—é –¥–ª—è –ª—É—á–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      const raySeries = this.chart.addLineSeries({
        color: COLORS.support,
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        title: `–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ${support.level}`,
      });

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á–∞ –æ—Ç startTime –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      const rayData = [
        { time: startTime as any, value: support.level },
        { time: lastDataTime as any, value: support.level }
      ];

      raySeries.setData(rayData);
      layerItems.push(raySeries);
      console.log(`‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ${support.level} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–ª—É—á–∏)
    resistances.forEach((resistance, index) => {
      const startTime = toTimestamp(resistance.date);

      console.log(`üî¥ –°–æ–∑–¥–∞–µ–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ${index + 1}: —É—Ä–æ–≤–µ–Ω—å ${resistance.level}, –¥–∞—Ç–∞ ${resistance.date}, timestamp ${startTime}`);

      // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Å–µ—Ä–∏—é –¥–ª—è –ª—É—á–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
      const raySeries = this.chart.addLineSeries({
        color: COLORS.resistance,
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        title: `–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ${resistance.level}`,
      });

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á–∞ –æ—Ç startTime –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      const rayData = [
        { time: startTime as any, value: resistance.level },
        { time: lastDataTime as any, value: resistance.level }
      ];

      raySeries.setData(rayData);
      layerItems.push(raySeries);
      console.log(`‚úÖ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ ${resistance.level} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
    });

    this.layers.set('supportResistance', layerItems);
    console.log(`üìä –°–ª–æ–π supportResistance —Å–æ–∑–¥–∞–Ω —Å ${layerItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π —Ç—Ä–µ–Ω–¥–∞
  addTrendLines(trendLines: TrendLine[]) {
    this.clearLayer('trendLines');
    const layerItems: any[] = [];

    trendLines.forEach((trendLine) => {
      const lineSeries = this.chart.addLineSeries({
        color: getTrendLineColor(trendLine.type),
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        title: `–¢—Ä–µ–Ω–¥ (${trendLine.type})`,
      });

      const lineData = [
        {
          time: toTimestamp(trendLine.start_point.date) as any,
          value: trendLine.start_point.price,
        },
        {
          time: toTimestamp(trendLine.end_point.date) as any,
          value: trendLine.end_point.price,
        },
      ];

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ setData
      const sortedLineData = sortAndDeduplicateData(lineData);
      lineSeries.setData(sortedLineData);
      layerItems.push(lineSeries);
    });

    this.layers.set('trendLines', layerItems);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –§–∏–±–æ–Ω–∞—á—á–∏
  addFibonacciLevels(fibonacciData: any) {
    this.clearLayer('fibonacci');
    const layerItems: any[] = [];

    console.log(`üìä –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ–Ω–∞—á—á–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏). –î–∞–Ω–Ω—ã–µ:`, fibonacciData);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
    if (fibonacciData.based_on_local_trend) {
      const localFib = fibonacciData.based_on_local_trend;
      console.log(`üü¢ –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Fibonacci Retracement. –û–±–ª–∞—Å—Ç—å:`, localFib.start_point, '–¥–æ', localFib.end_point);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
      const startTime = toTimestamp(localFib.start_point.date);
      const endTime = toTimestamp(localFib.end_point.date);

      console.log(`üü¢ –ì—Ä–∞–Ω–∏—Ü—ã –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: –≤—Ä–µ–º—è ${startTime}-${endTime}`);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ —Ü–µ–Ω–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π –º–µ–∂–¥—É –Ω–∏–º–∏
      const sortedLevels = Object.entries(localFib.levels).sort(([,a], [,b]) => (b as number) - (a as number));

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏
      for (let i = 0; i < sortedLevels.length - 1; i++) {
        const [upperLevel, upperPrice] = sortedLevels[i];
        const [lowerLevel, lowerPrice] = sortedLevels[i + 1];

        console.log(`üü¢ –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ ${upperLevel} (${upperPrice}) –∏ ${lowerLevel} (${lowerPrice})`);

        // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —É—Ä–æ–≤–Ω—è–º–∏
        const fibArea = this.chart.addAreaSeries({
          topColor: COLORS.fibonacci + (i % 2 === 0 ? '15' : '10'), // –ß–µ—Ä–µ–¥—É—é—â–∞—è—Å—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
          bottomColor: COLORS.fibonacci + '05',
          lineColor: COLORS.fibonacci,
          lineWidth: 1,
          title: `–§–∏–± –õ–æ–∫ ${upperLevel}-${lowerLevel}`,
        });

        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
        const areaData = [
          { time: startTime as any, value: upperPrice as number },
          { time: endTime as any, value: upperPrice as number },
          { time: endTime as any, value: lowerPrice as number },
          { time: startTime as any, value: lowerPrice as number },
        ];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const sortedAreaData = areaData.sort((a, b) => a.time - b.time);

        fibArea.setData([
          { time: startTime as any, value: upperPrice as number },
          { time: endTime as any, value: upperPrice as number },
        ]);

        layerItems.push(fibArea);
        console.log(`‚úÖ –û–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ ${upperLevel}-${lowerLevel} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      }

      // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
      const topBorder = this.chart.addLineSeries({
        color: COLORS.fibonacci,
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        title: `–§–∏–± –õ–æ–∫ –í–µ—Ä—Ö`,
      });

      const bottomBorder = this.chart.addLineSeries({
        color: COLORS.fibonacci,
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        title: `–§–∏–± –õ–æ–∫ –ù–∏–∑`,
      });

      const maxPrice = Math.max(...Object.values(localFib.levels) as number[]);
      const minPrice = Math.min(...Object.values(localFib.levels) as number[]);

      topBorder.setData([
        { time: startTime as any, value: maxPrice },
        { time: endTime as any, value: maxPrice },
      ]);

      bottomBorder.setData([
        { time: startTime as any, value: minPrice },
        { time: endTime as any, value: minPrice },
      ]);

      layerItems.push(topBorder, bottomBorder);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
    if (fibonacciData.based_on_global_trend) {
      const globalFib = fibonacciData.based_on_global_trend;
      console.log(`üîµ –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π Fibonacci Retracement. –û–±–ª–∞—Å—Ç—å:`, globalFib.start_point, '–¥–æ', globalFib.end_point);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
      const startTime = toTimestamp(globalFib.start_point.date);
      const endTime = toTimestamp(globalFib.end_point.date);

      console.log(`üîµ –ì—Ä–∞–Ω–∏—Ü—ã –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞: –≤—Ä–µ–º—è ${startTime}-${endTime}`);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ —Ü–µ–Ω–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–µ–π –º–µ–∂–¥—É –Ω–∏–º–∏
      const sortedLevels = Object.entries(globalFib.levels).sort(([,a], [,b]) => (b as number) - (a as number));

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –§–∏–±–æ–Ω–∞—á—á–∏
      for (let i = 0; i < sortedLevels.length - 1; i++) {
        const [upperLevel, upperPrice] = sortedLevels[i];
        const [lowerLevel, lowerPrice] = sortedLevels[i + 1];

        console.log(`üîµ –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ ${upperLevel} (${upperPrice}) –∏ ${lowerLevel} (${lowerPrice})`);

        // –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —É—Ä–æ–≤–Ω—è–º–∏
        const fibArea = this.chart.addAreaSeries({
          topColor: COLORS.fibonacciGlobal + (i % 2 === 0 ? '15' : '10'), // –ß–µ—Ä–µ–¥—É—é—â–∞—è—Å—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
          bottomColor: COLORS.fibonacciGlobal + '05',
          lineColor: COLORS.fibonacciGlobal,
          lineWidth: 1,
          title: `–§–∏–± –ì–ª–æ–± ${upperLevel}-${lowerLevel}`,
        });

        // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
        fibArea.setData([
          { time: startTime as any, value: upperPrice as number },
          { time: endTime as any, value: upperPrice as number },
        ]);

        layerItems.push(fibArea);
        console.log(`‚úÖ –û–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ ${upperLevel}-${lowerLevel} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      }

      // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
      const topBorder = this.chart.addLineSeries({
        color: COLORS.fibonacciGlobal,
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        title: `–§–∏–± –ì–ª–æ–± –í–µ—Ä—Ö`,
      });

      const bottomBorder = this.chart.addLineSeries({
        color: COLORS.fibonacciGlobal,
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        title: `–§–∏–± –ì–ª–æ–± –ù–∏–∑`,
      });

      const maxPrice = Math.max(...Object.values(globalFib.levels) as number[]);
      const minPrice = Math.min(...Object.values(globalFib.levels) as number[]);

      topBorder.setData([
        { time: startTime as any, value: maxPrice },
        { time: endTime as any, value: maxPrice },
      ]);

      bottomBorder.setData([
        { time: startTime as any, value: minPrice },
        { time: endTime as any, value: minPrice },
      ]);

      layerItems.push(topBorder, bottomBorder);
    }

    this.layers.set('fibonacci', layerItems);
    console.log(`üìä –°–ª–æ–π fibonacci —Å–æ–∑–¥–∞–Ω —Å ${layerItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏)`);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
  addImbalanceZones(imbalances: ImbalanceZone[]) {
    this.clearLayer('imbalances');
    const layerItems: any[] = [];

    console.log(`üìä –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${imbalances.length}`);

    imbalances.forEach((imbalance, index) => {
      console.log(`üîµ –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ ${index + 1}:`, imbalance);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∑–æ–Ω—ã –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
      const areaSeries = this.chart.addAreaSeries({
        topColor: COLORS.imbalance + '40', // 25% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        bottomColor: COLORS.imbalance + '10', // 6% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        lineColor: COLORS.imbalance,
        lineWidth: 1,
        title: `–î–∏—Å–±–∞–ª–∞–Ω—Å (${imbalance.type})`,
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
      const startTime = toTimestamp(imbalance.start_point.date);
      const endTime = toTimestamp(imbalance.end_point.date);
      const topPrice = Math.max(imbalance.start_point.price, imbalance.end_point.price);
      const bottomPrice = Math.min(imbalance.start_point.price, imbalance.end_point.price);

      console.log(`üîµ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–æ–Ω—ã: –æ—Ç ${startTime} (${topPrice}) –¥–æ ${endTime} (${bottomPrice})`);

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
      const areaData = [
        { time: startTime as any, value: topPrice },
        { time: endTime as any, value: topPrice },
      ];

      areaSeries.setData(areaData);
      layerItems.push(areaSeries);
      console.log(`‚úÖ –ó–æ–Ω–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ ${imbalance.type} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    });

    this.layers.set('imbalances', layerItems);
    console.log(`üìä –°–ª–æ–π imbalances —Å–æ–∑–¥–∞–Ω —Å ${layerItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–æ–Ω (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏)
  addUnfinishedZones(unfinishedZones: UnfinishedZone[]) {
    this.clearLayer('unfinishedZones');
    const layerItems: any[] = [];

    console.log(`üìä –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${unfinishedZones.length}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω
    const timeScale = this.chart.timeScale();
    const visibleRange = timeScale.getVisibleRange();
    const currentTime = Date.now() / 1000;
    const futureTime = currentTime + (365 * 24 * 60 * 60); // +1 –≥–æ–¥ –≤ –±—É–¥—É—â–µ–µ
    const endTime = visibleRange?.to || futureTime;

    unfinishedZones.forEach((zone, index) => {
      console.log(`üü† –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–æ–Ω—É ${index + 1}:`, zone);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
      const areaSeries = this.chart.addAreaSeries({
        topColor: COLORS.unfinished + '40', // 25% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        bottomColor: COLORS.unfinished + '10', // 6% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        lineColor: zone.line_color || COLORS.unfinished,
        lineWidth: 2,
        title: `${zone.type} (${zone.level})`,
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω—ã
      const startTime = toTimestamp(zone.date);
      const zoneHeight = zone.level * 0.001; // –í—ã—Å–æ—Ç–∞ –∑–æ–Ω—ã (0.1% –æ—Ç —É—Ä–æ–≤–Ω—è)
      const topPrice = zone.level + zoneHeight;
      const bottomPrice = zone.level - zoneHeight;

      console.log(`üü† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–æ–Ω—ã: –æ—Ç ${startTime} –¥–æ ${endTime}, —É—Ä–æ–≤–µ–Ω—å ${zone.level} (${bottomPrice}-${topPrice})`);

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
      const areaData = [
        { time: startTime as any, value: topPrice },
        { time: endTime as any, value: topPrice },
      ];

      areaSeries.setData(areaData);
      layerItems.push(areaSeries);
      console.log(`‚úÖ –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ ${zone.type} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    });

    this.layers.set('unfinishedZones', layerItems);
    console.log(`üìä –°–ª–æ–π unfinishedZones —Å–æ–∑–¥–∞–Ω —Å ${layerItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–º–∞—Ä–∫–µ—Ä—ã)
  addCandlestickPatterns(patterns: CandlestickPattern[]) {
    this.clearLayer('candlestickPatterns');
    const layerItems: any[] = [];

    patterns.forEach((pattern) => {
      const markerSeries = this.chart.addLineSeries({
        color: getCandlestickPatternColor(pattern.type),
        lineWidth: 1,
        title: `–ü–∞—Ç—Ç–µ—Ä–Ω: ${pattern.type}`,
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
      const markers = [{
        time: toTimestamp(pattern.date) as any,
        position: pattern.type.includes('–º–µ–¥–≤–µ–∂') || pattern.type.includes('bearish') ? 'aboveBar' as const : 'belowBar' as const,
        color: getCandlestickPatternColor(pattern.type),
        shape: pattern.type.includes('–º–µ–¥–≤–µ–∂') || pattern.type.includes('bearish') ? 'arrowDown' as const : 'arrowUp' as const,
        text: pattern.type.substring(0, 3),
      }];

      this.candlestickSeries.setMarkers(markers);
      layerItems.push(markerSeries);
    });

    this.layers.set('candlestickPatterns', layerItems);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π (–º–∞—Ä–∫–µ—Ä—ã)
  addDivergences(divergences: Divergence[]) {
    this.clearLayer('divergences');
    const layerItems: any[] = [];

    divergences.forEach((divergence) => {
      const markerSeries = this.chart.addLineSeries({
        color: COLORS.divergence,
        lineWidth: 1,
        title: `–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: ${divergence.indicator}`,
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
      const markers = [{
        time: toTimestamp(divergence.date) as any,
        position: 'aboveBar' as const,
        color: COLORS.divergence,
        shape: 'circle' as const,
        text: 'D',
      }];

      this.candlestickSeries.setMarkers(markers);
      layerItems.push(markerSeries);
    });

    this.layers.set('divergences', layerItems);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–Ω –≠–ª–ª–∏–æ—Ç—Ç–∞ (—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –æ—Ç—Ä–µ–∑–∫–∏ —Å –º–µ—Ç–∫–∞–º–∏)
  addElliottWaves(elliottData: any) {
    this.clearLayer('elliottWaves');
    const layerItems: any[] = [];

    if (elliottData.waves) {
      elliottData.waves.forEach((wave: ElliottWave) => {
        // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –≤–æ–ª–Ω—ã
        const waveSeries = this.chart.addLineSeries({
          color: COLORS.elliott,
          lineWidth: 2,
          lineStyle: LineStyle.Solid,
          title: `–í–æ–ª–Ω–∞ ${wave.wave_number}`,
        });

        const waveData = [
          {
            time: toTimestamp(wave.start_point.date) as any,
            value: wave.start_point.price,
          },
          {
            time: toTimestamp(wave.end_point.date) as any,
            value: wave.end_point.price,
          },
        ];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ setData
        const sortedWaveData = sortAndDeduplicateData(waveData);
        waveSeries.setData(sortedWaveData);
        layerItems.push(waveSeries);

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º –≤–æ–ª–Ω—ã –≤ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ
        const markers = [{
          time: toTimestamp(wave.end_point.date) as any,
          position: 'aboveBar' as const,
          color: COLORS.elliott,
          shape: 'circle' as const,
          text: wave.wave_number.toString(),
        }];

        this.candlestickSeries.setMarkers(markers);
      });
    }

    this.layers.set('elliottWaves', layerItems);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Å–≤–µ—á–∏)
  addPricePrediction(predictionData: any) {
    this.clearLayer('pricePrediction');
    const layerItems: any[] = [];

    if (predictionData.virtual_candles) {
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Å–≤–µ—á–µ–π
      const predictionSeries = this.chart.addCandlestickSeries({
        upColor: 'rgba(38, 166, 154, 0.3)', // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
        downColor: 'rgba(239, 83, 80, 0.3)', // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
        borderVisible: true,
        wickUpColor: 'rgba(38, 166, 154, 0.5)',
        wickDownColor: 'rgba(239, 83, 80, 0.5)',
        borderUpColor: 'rgba(38, 166, 154, 0.7)',
        borderDownColor: 'rgba(239, 83, 80, 0.7)',
        title: '–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã',
      });

      const predictionCandles = predictionData.virtual_candles.map((candle: VirtualCandle) => ({
        time: toTimestamp(candle.date) as any,
        open: candle.open,
        high: candle.high,
        low: candle.low,
        close: candle.close,
      }));

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ setData
      const sortedCandles = sortAndDeduplicateData(predictionCandles);
      predictionSeries.setData(sortedCandles);
      layerItems.push(predictionSeries);
    }

    this.layers.set('pricePrediction', layerItems);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏)
  addTradingRecommendations(strategies: TradingStrategy[]) {
    this.clearLayer('tradingRecommendations');
    const layerItems: any[] = [];

    strategies.forEach((strategy) => {
      // –õ–∏–Ω–∏—è –≤—Ö–æ–¥–∞
      const entryLine = this.candlestickSeries.createPriceLine({
        price: strategy.entry_point.Price,
        color: COLORS.entry,
        lineWidth: 2,
        lineStyle: LineStyle.Solid,
        axisLabelVisible: true,
        title: `–í—Ö–æ–¥: ${strategy.entry_point.Price}`,
      });
      layerItems.push(entryLine);

      // –õ–∏–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
      const stopLossLine = this.candlestickSeries.createPriceLine({
        price: strategy.stop_loss,
        color: COLORS.stopLoss,
        lineWidth: 2,
        lineStyle: LineStyle.Dashed,
        axisLabelVisible: true,
        title: `–°—Ç–æ–ø: ${strategy.stop_loss}`,
      });
      layerItems.push(stopLossLine);

      // –õ–∏–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
      const takeProfitLine = this.candlestickSeries.createPriceLine({
        price: strategy.take_profit,
        color: COLORS.takeProfit,
        lineWidth: 2,
        lineStyle: LineStyle.Dashed,
        axisLabelVisible: true,
        title: `–¢–µ–π–∫: ${strategy.take_profit}`,
      });
      layerItems.push(takeProfitLine);
    });

    this.layers.set('tradingRecommendations', layerItems);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–µ–≤
  getActiveLayers(): string[] {
    return Array.from(this.layers.keys());
  }
}
