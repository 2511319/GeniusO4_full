name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PROJECT_ID: chartgenius-444017
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest

    - name: Run Python tests
      run: |
        pytest tests/ -v

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Frontend tests
      run: |
        cd frontend
        npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    name: Deploy to Cloud Run
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Get commit SHA
      id: vars
      run: echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build and push Backend API
      run: |
        docker build -t gcr.io/$PROJECT_ID/chartgenius-api:${{ steps.vars.outputs.COMMIT_SHA }} -f backend/Dockerfile .
        docker push gcr.io/$PROJECT_ID/chartgenius-api:${{ steps.vars.outputs.COMMIT_SHA }}

    - name: Build and push Telegram Bot
      run: |
        docker build -t gcr.io/$PROJECT_ID/chartgenius-bot:${{ steps.vars.outputs.COMMIT_SHA }} -f bot/Dockerfile .
        docker push gcr.io/$PROJECT_ID/chartgenius-bot:${{ steps.vars.outputs.COMMIT_SHA }}

    - name: Build and push Frontend
      run: |
        docker build -t gcr.io/$PROJECT_ID/chartgenius-frontend:${{ steps.vars.outputs.COMMIT_SHA }} \
          --build-arg VITE_API_URL=https://chartgenius-api-$REGION-uc.a.run.app \
          --build-arg VITE_TELEGRAM_BOT_USERNAME=Chart_Genius_bot \
          -f frontend/Dockerfile .
        docker push gcr.io/$PROJECT_ID/chartgenius-frontend:${{ steps.vars.outputs.COMMIT_SHA }}

    - name: Deploy Backend API
      run: |
        gcloud run deploy chartgenius-api \
          --image gcr.io/$PROJECT_ID/chartgenius-api:${{ steps.vars.outputs.COMMIT_SHA }} \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-secrets="JWT_SECRET_KEY=JWT_SECRET_KEY:latest,TELEGRAM_BOT_TOKEN=TELEGRAM_BOT_TOKEN:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,CRYPTOCOMPARE_API_KEY=CRYPTOCOMPARE_API_KEY:latest" \
          --set-env-vars="LLM_PROVIDER=openai,DEFAULT_SYMBOL=BTCUSDT,LOCAL_TESTING=false" \
          --cpu=1 \
          --memory=1Gi \
          --max-instances=10

    - name: Get API URL
      id: api-url
      run: |
        API_URL=$(gcloud run services describe chartgenius-api --region=$REGION --format="value(status.url)")
        echo "API_URL=$API_URL" >> $GITHUB_OUTPUT

    - name: Deploy Frontend
      run: |
        gcloud run deploy chartgenius-frontend \
          --image gcr.io/$PROJECT_ID/chartgenius-frontend:${{ steps.vars.outputs.COMMIT_SHA }} \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --cpu=1 \
          --memory=512Mi \
          --max-instances=5

    - name: Get Frontend URL
      id: frontend-url
      run: |
        FRONTEND_URL=$(gcloud run services describe chartgenius-frontend --region=$REGION --format="value(status.url)")
        echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Deploy Telegram Bot
      run: |
        gcloud run deploy chartgenius-bot \
          --image gcr.io/$PROJECT_ID/chartgenius-bot:${{ steps.vars.outputs.COMMIT_SHA }} \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-secrets="JWT_SECRET_KEY=JWT_SECRET_KEY:latest,TELEGRAM_BOT_TOKEN=TELEGRAM_BOT_TOKEN:latest" \
          --set-env-vars="API_URL=${{ steps.api-url.outputs.API_URL }},WEBAPP_URL=${{ steps.frontend-url.outputs.FRONTEND_URL }}" \
          --cpu=1 \
          --memory=512Mi \
          --max-instances=5

    - name: Get Bot URL
      id: bot-url
      run: |
        BOT_URL=$(gcloud run services describe chartgenius-bot --region=$REGION --format="value(status.url)")
        echo "BOT_URL=$BOT_URL" >> $GITHUB_OUTPUT

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📋 Service URLs:"
        echo "• API:      ${{ steps.api-url.outputs.API_URL }}"
        echo "• Frontend: ${{ steps.frontend-url.outputs.FRONTEND_URL }}"
        echo "• Bot:      ${{ steps.bot-url.outputs.BOT_URL }}"
        echo ""
        echo "📝 Next steps:"
        echo "1. Set up Telegram webhook"
        echo "2. Configure bot commands"
        echo "3. Test the application"

    - name: Create deployment comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment Preview**
            
            📋 **Service URLs:**
            • **API:** ${{ steps.api-url.outputs.API_URL }}
            • **Frontend:** ${{ steps.frontend-url.outputs.FRONTEND_URL }}
            • **Bot:** ${{ steps.bot-url.outputs.BOT_URL }}
            
            🔖 **Commit:** \`${{ steps.vars.outputs.COMMIT_SHA }}\`
            
            ⚠️ **Note:** This is a preview deployment. Telegram webhook needs manual configuration.`
          })
